var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function webpackUniversalModuleDefinition(root, factory) {
    if (typeof exports === 'object' && typeof module === 'object')
        module.exports = factory();
    else if (typeof define === 'function' && define.amd)
        define("math/math", [], factory);
    else if (typeof exports === 'object')
        exports["math"] = factory();
    else
        root["math"] = factory();
})(this, function () {
    return (function (modules) {
        var installedModules = {};
        function __webpack_require__(moduleId) {
            if (installedModules[moduleId]) {
                return installedModules[moduleId].exports;
            }
            var module = installedModules[moduleId] = {
                i: moduleId,
                l: false,
                exports: {}
            };
            modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
            module.l = true;
            return module.exports;
        }
        __webpack_require__.m = modules;
        __webpack_require__.c = installedModules;
        __webpack_require__.d = function (exports, name, getter) {
            if (!__webpack_require__.o(exports, name)) {
                Object.defineProperty(exports, name, {
                    configurable: false,
                    enumerable: true,
                    get: getter
                });
            }
        };
        __webpack_require__.n = function (module) {
            var getter = module && module.__esModule ?
                function getDefault() { return module['default']; } :
                function getModuleExports() { return module; };
            __webpack_require__.d(getter, 'a', getter);
            return getter;
        };
        __webpack_require__.o = function (object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
        __webpack_require__.p = "";
        return __webpack_require__(__webpack_require__.s = 148);
    })([
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load, typed) {
                var matrix = typed('matrix', {
                    '': function () {
                        return _create([]);
                    },
                    'string': function (format) {
                        return _create([], format);
                    },
                    'string, string': function (format, datatype) {
                        return _create([], format, datatype);
                    },
                    'Array': function (data) {
                        return _create(data);
                    },
                    'Matrix': function (data) {
                        return _create(data, data.storage());
                    },
                    'Array | Matrix, string': _create,
                    'Array | Matrix, string, string': _create
                });
                matrix.toTex = {
                    0: '\\begin{bmatrix}\\end{bmatrix}',
                    1: '\\left(${args[0]}\\right)',
                    2: '\\left(${args[0]}\\right)'
                };
                return matrix;
                function _create(data, format, datatype) {
                    var M = type.Matrix.storage(format || 'default');
                    return new M(data, datatype);
                }
            }
            exports.name = 'matrix';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            module.exports = function deepMap(array, callback, skipZeros) {
                if (array && (typeof array.map === 'function')) {
                    return array.map(function (x) {
                        return deepMap(x, callback, skipZeros);
                    });
                }
                else {
                    return callback(array);
                }
            };
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var number = __webpack_require__(3);
            var string = __webpack_require__(9);
            var object = __webpack_require__(5);
            var types = __webpack_require__(59);
            var DimensionError = __webpack_require__(10);
            var IndexError = __webpack_require__(51);
            exports.size = function (x) {
                var s = [];
                while (Array.isArray(x)) {
                    s.push(x.length);
                    x = x[0];
                }
                return s;
            };
            function _validate(array, size, dim) {
                var i;
                var len = array.length;
                if (len != size[dim]) {
                    throw new DimensionError(len, size[dim]);
                }
                if (dim < size.length - 1) {
                    var dimNext = dim + 1;
                    for (i = 0; i < len; i++) {
                        var child = array[i];
                        if (!Array.isArray(child)) {
                            throw new DimensionError(size.length - 1, size.length, '<');
                        }
                        _validate(array[i], size, dimNext);
                    }
                }
                else {
                    for (i = 0; i < len; i++) {
                        if (Array.isArray(array[i])) {
                            throw new DimensionError(size.length + 1, size.length, '>');
                        }
                    }
                }
            }
            exports.validate = function (array, size) {
                var isScalar = (size.length == 0);
                if (isScalar) {
                    if (Array.isArray(array)) {
                        throw new DimensionError(array.length, 0);
                    }
                }
                else {
                    _validate(array, size, 0);
                }
            };
            exports.validateIndex = function (index, length) {
                if (!number.isNumber(index) || !number.isInteger(index)) {
                    throw new TypeError('Index must be an integer (value: ' + index + ')');
                }
                if (index < 0 || (typeof length === 'number' && index >= length)) {
                    throw new IndexError(index, length);
                }
            };
            exports.UNINITIALIZED = {};
            exports.resize = function (array, size, defaultValue) {
                if (!Array.isArray(array) || !Array.isArray(size)) {
                    throw new TypeError('Array expected');
                }
                if (size.length === 0) {
                    throw new Error('Resizing to scalar is not supported');
                }
                size.forEach(function (value) {
                    if (!number.isNumber(value) || !number.isInteger(value) || value < 0) {
                        throw new TypeError('Invalid size, must contain positive integers ' +
                            '(size: ' + string.format(size) + ')');
                    }
                });
                var _defaultValue = (defaultValue !== undefined) ? defaultValue : 0;
                _resize(array, size, 0, _defaultValue);
                return array;
            };
            function _resize(array, size, dim, defaultValue) {
                var i;
                var elem;
                var oldLen = array.length;
                var newLen = size[dim];
                var minLen = Math.min(oldLen, newLen);
                array.length = newLen;
                if (dim < size.length - 1) {
                    var dimNext = dim + 1;
                    for (i = 0; i < minLen; i++) {
                        elem = array[i];
                        if (!Array.isArray(elem)) {
                            elem = [elem];
                            array[i] = elem;
                        }
                        _resize(elem, size, dimNext, defaultValue);
                    }
                    for (i = minLen; i < newLen; i++) {
                        elem = [];
                        array[i] = elem;
                        _resize(elem, size, dimNext, defaultValue);
                    }
                }
                else {
                    for (i = 0; i < minLen; i++) {
                        while (Array.isArray(array[i])) {
                            array[i] = array[i][0];
                        }
                    }
                    if (defaultValue !== exports.UNINITIALIZED) {
                        for (i = minLen; i < newLen; i++) {
                            array[i] = defaultValue;
                        }
                    }
                }
            }
            exports.reshape = function (array, sizes) {
                var flatArray = exports.flatten(array);
                var newArray;
                var product = function (arr) {
                    return arr.reduce(function (prev, curr) {
                        return prev * curr;
                    });
                };
                if (!Array.isArray(array) || !Array.isArray(sizes)) {
                    throw new TypeError('Array expected');
                }
                if (sizes.length === 0) {
                    throw new DimensionError(0, product(exports.size(array)), '!=');
                }
                try {
                    newArray = _reshape(flatArray, sizes);
                }
                catch (e) {
                    if (e instanceof DimensionError) {
                        throw new DimensionError(product(sizes), product(exports.size(array)), '!=');
                    }
                    throw e;
                }
                if (flatArray.length > 0) {
                    throw new DimensionError(product(sizes), product(exports.size(array)), '!=');
                }
                return newArray;
            };
            function _reshape(array, sizes) {
                var accumulator = [];
                var i;
                if (sizes.length === 0) {
                    if (array.length === 0) {
                        throw new DimensionError(null, null, '!=');
                    }
                    return array.shift();
                }
                for (i = 0; i < sizes[0]; i += 1) {
                    accumulator.push(_reshape(array, sizes.slice(1)));
                }
                return accumulator;
            }
            exports.squeeze = function (array, size) {
                var s = size || exports.size(array);
                while (Array.isArray(array) && array.length === 1) {
                    array = array[0];
                    s.shift();
                }
                var dims = s.length;
                while (s[dims - 1] === 1) {
                    dims--;
                }
                if (dims < s.length) {
                    array = _squeeze(array, dims, 0);
                    s.length = dims;
                }
                return array;
            };
            function _squeeze(array, dims, dim) {
                var i, ii;
                if (dim < dims) {
                    var next = dim + 1;
                    for (i = 0, ii = array.length; i < ii; i++) {
                        array[i] = _squeeze(array[i], dims, next);
                    }
                }
                else {
                    while (Array.isArray(array)) {
                        array = array[0];
                    }
                }
                return array;
            }
            exports.unsqueeze = function (array, dims, outer, size) {
                var s = size || exports.size(array);
                if (outer) {
                    for (var i = 0; i < outer; i++) {
                        array = [array];
                        s.unshift(1);
                    }
                }
                array = _unsqueeze(array, dims, 0);
                while (s.length < dims) {
                    s.push(1);
                }
                return array;
            };
            function _unsqueeze(array, dims, dim) {
                var i, ii;
                if (Array.isArray(array)) {
                    var next = dim + 1;
                    for (i = 0, ii = array.length; i < ii; i++) {
                        array[i] = _unsqueeze(array[i], dims, next);
                    }
                }
                else {
                    for (var d = dim; d < dims; d++) {
                        array = [array];
                    }
                }
                return array;
            }
            exports.flatten = function (array) {
                if (!Array.isArray(array)) {
                    return array;
                }
                var flat = [];
                array.forEach(function callback(value) {
                    if (Array.isArray(value)) {
                        value.forEach(callback);
                    }
                    else {
                        flat.push(value);
                    }
                });
                return flat;
            };
            exports.map = function (array, callback) {
                return Array.prototype.map.call(array, callback);
            };
            exports.forEach = function (array, callback) {
                Array.prototype.forEach.call(array, callback);
            };
            exports.filter = function (array, callback) {
                if (exports.size(array).length !== 1) {
                    throw new Error('Only one dimensional matrices supported');
                }
                return Array.prototype.filter.call(array, callback);
            };
            exports.filterRegExp = function (array, regexp) {
                if (exports.size(array).length !== 1) {
                    throw new Error('Only one dimensional matrices supported');
                }
                return Array.prototype.filter.call(array, function (entry) {
                    return regexp.test(entry);
                });
            };
            exports.join = function (array, separator) {
                return Array.prototype.join.call(array, separator);
            };
            exports.identify = function (a) {
                if (!Array.isArray(a)) {
                    throw new TypeError('Array input expected');
                }
                if (a.length === 0) {
                    return a;
                }
                var b = [];
                var count = 0;
                b[0] = { value: a[0], identifier: 0 };
                for (var i = 1; i < a.length; i++) {
                    if (a[i] === a[i - 1]) {
                        count++;
                    }
                    else {
                        count = 0;
                    }
                    b.push({ value: a[i], identifier: count });
                }
                return b;
            };
            exports.generalize = function (a) {
                if (!Array.isArray(a)) {
                    throw new TypeError('Array input expected');
                }
                if (a.length === 0) {
                    return a;
                }
                var b = [];
                for (var i = 0; i < a.length; i++) {
                    b.push(a[i].value);
                }
                return b;
            };
            exports.isArray = Array.isArray;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            exports.isNumber = function (value) {
                return typeof value === 'number';
            };
            exports.isInteger = function (value) {
                return isFinite(value)
                    ? (value == Math.round(value))
                    : false;
            };
            exports.sign = Math.sign || function (x) {
                if (x > 0) {
                    return 1;
                }
                else if (x < 0) {
                    return -1;
                }
                else {
                    return 0;
                }
            };
            exports.format = function (value, options) {
                if (typeof options === 'function') {
                    return options(value);
                }
                if (value === Infinity) {
                    return 'Infinity';
                }
                else if (value === -Infinity) {
                    return '-Infinity';
                }
                else if (isNaN(value)) {
                    return 'NaN';
                }
                var notation = 'auto';
                var precision = undefined;
                if (options) {
                    if (options.notation) {
                        notation = options.notation;
                    }
                    if (exports.isNumber(options)) {
                        precision = options;
                    }
                    else if (options.precision) {
                        precision = options.precision;
                    }
                }
                switch (notation) {
                    case 'fixed':
                        return exports.toFixed(value, precision);
                    case 'exponential':
                        return exports.toExponential(value, precision);
                    case 'engineering':
                        return exports.toEngineering(value, precision);
                    case 'auto':
                        return exports
                            .toPrecision(value, precision, options && options.exponential)
                            .replace(/((\.\d*?)(0+))($|e)/, function () {
                            var digits = arguments[2];
                            var e = arguments[4];
                            return (digits !== '.') ? digits + e : e;
                        });
                    default:
                        throw new Error('Unknown notation "' + notation + '". ' +
                            'Choose "auto", "exponential", or "fixed".');
                }
            };
            exports.splitNumber = function (value) {
                var match = String(value).toLowerCase().match(/^0*?(-?)(\d+\.?\d*)(e([+-]?\d+))?$/);
                if (!match) {
                    throw new SyntaxError('Invalid number ' + value);
                }
                var sign = match[1];
                var digits = match[2];
                var exponent = parseFloat(match[4] || '0');
                var dot = digits.indexOf('.');
                exponent += (dot !== -1) ? (dot - 1) : (digits.length - 1);
                var coefficients = digits
                    .replace('.', '')
                    .replace(/^0*/, function (zeros) {
                    exponent -= zeros.length;
                    return '';
                })
                    .replace(/0*$/, '')
                    .split('')
                    .map(function (d) {
                    return parseInt(d);
                });
                if (coefficients.length === 0) {
                    coefficients.push(0);
                    exponent++;
                }
                return {
                    sign: sign,
                    coefficients: coefficients,
                    exponent: exponent
                };
            };
            exports.toEngineering = function (value, precision) {
                if (isNaN(value) || !isFinite(value)) {
                    return String(value);
                }
                var rounded = exports.roundDigits(exports.splitNumber(value), precision);
                var e = rounded.exponent;
                var c = rounded.coefficients;
                var newExp = e % 3 === 0 ? e : (e < 0 ? (e - 3) - (e % 3) : e - (e % 3));
                var significandsDiff = e >= 0 ? e : Math.abs(newExp);
                if (c.length - 1 < significandsDiff)
                    c = c.concat(zeros(significandsDiff - (c.length - 1)));
                var expDiff = Math.abs(e - newExp);
                var decimalIdx = 1;
                while (--expDiff >= 0)
                    decimalIdx++;
                var decimals = c.slice(decimalIdx).join('');
                var decimalVal = decimals.match(/[1-9]/) ? ('.' + decimals) : '';
                var str = c.slice(0, decimalIdx).join('') +
                    decimalVal +
                    'e' + (e >= 0 ? '+' : '') + newExp.toString();
                return rounded.sign + str;
            };
            exports.toFixed = function (value, precision) {
                if (isNaN(value) || !isFinite(value)) {
                    return String(value);
                }
                var splitValue = exports.splitNumber(value);
                var rounded = exports.roundDigits(splitValue, splitValue.exponent + 1 + (precision || 0));
                var c = rounded.coefficients;
                var p = rounded.exponent + 1;
                var pp = p + (precision || 0);
                if (c.length < pp) {
                    c = c.concat(zeros(pp - c.length));
                }
                if (p < 0) {
                    c = zeros(-p + 1).concat(c);
                    p = 1;
                }
                if (precision) {
                    c.splice(p, 0, (p === 0) ? '0.' : '.');
                }
                return rounded.sign + c.join('');
            };
            exports.toExponential = function (value, precision) {
                if (isNaN(value) || !isFinite(value)) {
                    return String(value);
                }
                var split = exports.splitNumber(value);
                var rounded = precision ? exports.roundDigits(split, precision) : split;
                var c = rounded.coefficients;
                var e = rounded.exponent;
                if (c.length < precision) {
                    c = c.concat(zeros(precision - c.length));
                }
                var first = c.shift();
                return rounded.sign + first + (c.length > 0 ? ('.' + c.join('')) : '') +
                    'e' + (e >= 0 ? '+' : '') + e;
            };
            exports.toPrecision = function (value, precision, options) {
                if (isNaN(value) || !isFinite(value)) {
                    return String(value);
                }
                var lower = (options && options.lower !== undefined) ? options.lower : 1e-3;
                var upper = (options && options.upper !== undefined) ? options.upper : 1e+5;
                var split = exports.splitNumber(value);
                var abs = Math.abs(Math.pow(10, split.exponent));
                if (abs < lower || abs >= upper) {
                    return exports.toExponential(value, precision);
                }
                else {
                    var rounded = precision ? exports.roundDigits(split, precision) : split;
                    var c = rounded.coefficients;
                    var e = rounded.exponent;
                    if (c.length < precision) {
                        c = c.concat(zeros(precision - c.length));
                    }
                    c = c.concat(zeros(e - c.length + 1 +
                        (c.length < precision ? precision - c.length : 0)));
                    c = zeros(-e).concat(c);
                    var dot = e > 0 ? e : 0;
                    if (dot < c.length - 1) {
                        c.splice(dot + 1, 0, '.');
                    }
                    return rounded.sign + c.join('');
                }
            };
            exports.roundDigits = function (split, precision) {
                var rounded = {
                    sign: split.sign,
                    coefficients: split.coefficients,
                    exponent: split.exponent
                };
                var c = rounded.coefficients;
                while (precision <= 0) {
                    c.unshift(0);
                    rounded.exponent++;
                    precision++;
                }
                if (c.length > precision) {
                    var removed = c.splice(precision, c.length - precision);
                    if (removed[0] >= 5) {
                        var i = precision - 1;
                        c[i]++;
                        while (c[i] === 10) {
                            c.pop();
                            if (i === 0) {
                                c.unshift(0);
                                rounded.exponent++;
                                i++;
                            }
                            i--;
                            c[i]++;
                        }
                    }
                }
                return rounded;
            };
            function zeros(length) {
                var arr = [];
                for (var i = 0; i < length; i++) {
                    arr.push(0);
                }
                return arr;
            }
            exports.digits = function (value) {
                return value
                    .toExponential()
                    .replace(/e.*$/, '')
                    .replace(/^0\.?0*|\./, '')
                    .length;
            };
            exports.DBL_EPSILON = Number.EPSILON || 2.2204460492503130808472633361816E-16;
            exports.nearlyEqual = function (x, y, epsilon) {
                if (epsilon == null) {
                    return x == y;
                }
                if (x == y) {
                    return true;
                }
                if (isNaN(x) || isNaN(y)) {
                    return false;
                }
                if (isFinite(x) && isFinite(y)) {
                    var diff = Math.abs(x - y);
                    if (diff < exports.DBL_EPSILON) {
                        return true;
                    }
                    else {
                        return diff <= Math.max(Math.abs(x), Math.abs(y)) * epsilon;
                    }
                }
                return false;
            };
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            exports.symbols = {
                Alpha: 'A', alpha: '\\alpha',
                Beta: 'B', beta: '\\beta',
                Gamma: '\\Gamma', gamma: '\\gamma',
                Delta: '\\Delta', delta: '\\delta',
                Epsilon: 'E', epsilon: '\\epsilon', varepsilon: '\\varepsilon',
                Zeta: 'Z', zeta: '\\zeta',
                Eta: 'H', eta: '\\eta',
                Theta: '\\Theta', theta: '\\theta', vartheta: '\\vartheta',
                Iota: 'I', iota: '\\iota',
                Kappa: 'K', kappa: '\\kappa', varkappa: '\\varkappa',
                Lambda: '\\Lambda', lambda: '\\lambda',
                Mu: 'M', mu: '\\mu',
                Nu: 'N', nu: '\\nu',
                Xi: '\\Xi', xi: '\\xi',
                Omicron: 'O', omicron: 'o',
                Pi: '\\Pi', pi: '\\pi', varpi: '\\varpi',
                Rho: 'P', rho: '\\rho', varrho: '\\varrho',
                Sigma: '\\Sigma', sigma: '\\sigma', varsigma: '\\varsigma',
                Tau: 'T', tau: '\\tau',
                Upsilon: '\\Upsilon', upsilon: '\\upsilon',
                Phi: '\\Phi', phi: '\\phi', varphi: '\\varphi',
                Chi: 'X', chi: '\\chi',
                Psi: '\\Psi', psi: '\\psi',
                Omega: '\\Omega', omega: '\\omega',
                'true': '\\mathrm{True}',
                'false': '\\mathrm{False}',
                i: 'i',
                inf: '\\infty',
                Inf: '\\infty',
                infinity: '\\infty',
                Infinity: '\\infty',
                oo: '\\infty',
                lim: '\\lim',
                'undefined': '\\mathbf{?}'
            };
            exports.operators = {
                'transpose': '^\\top',
                'factorial': '!',
                'pow': '^',
                'dotPow': '.^\\wedge',
                'unaryPlus': '+',
                'unaryMinus': '-',
                'bitNot': '~',
                'not': '\\neg',
                'multiply': '\\cdot',
                'divide': '\\frac',
                'dotMultiply': '.\\cdot',
                'dotDivide': '.:',
                'mod': '\\mod',
                'add': '+',
                'subtract': '-',
                'to': '\\rightarrow',
                'leftShift': '<<',
                'rightArithShift': '>>',
                'rightLogShift': '>>>',
                'equal': '=',
                'unequal': '\\neq',
                'smaller': '<',
                'larger': '>',
                'smallerEq': '\\leq',
                'largerEq': '\\geq',
                'bitAnd': '\\&',
                'bitXor': '\\underline{|}',
                'bitOr': '|',
                'and': '\\wedge',
                'xor': '\\veebar',
                'or': '\\vee'
            };
            exports.defaultTemplate = '\\mathrm{${name}}\\left(${args}\\right)';
            var units = {
                deg: '^\\circ'
            };
            exports.toSymbol = function (name, isUnit) {
                isUnit = typeof isUnit === 'undefined' ? false : isUnit;
                if (isUnit) {
                    if (units.hasOwnProperty(name)) {
                        return units[name];
                    }
                    return '\\mathrm{' + name + '}';
                }
                if (exports.symbols.hasOwnProperty(name)) {
                    return exports.symbols[name];
                }
                else if (name.indexOf('_') !== -1) {
                    var index = name.indexOf('_');
                    return exports.toSymbol(name.substring(0, index)) + '_{'
                        + exports.toSymbol(name.substring(index + 1)) + '}';
                }
                return name;
            };
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var isBigNumber = __webpack_require__(71);
            exports.clone = function clone(x) {
                var type = typeof x;
                if (type === 'number' || type === 'string' || type === 'boolean' ||
                    x === null || x === undefined) {
                    return x;
                }
                if (typeof x.clone === 'function') {
                    return x.clone();
                }
                if (Array.isArray(x)) {
                    return x.map(function (value) {
                        return clone(value);
                    });
                }
                if (x instanceof Number)
                    return new Number(x.valueOf());
                if (x instanceof String)
                    return new String(x.valueOf());
                if (x instanceof Boolean)
                    return new Boolean(x.valueOf());
                if (x instanceof Date)
                    return new Date(x.valueOf());
                if (isBigNumber(x))
                    return x;
                if (x instanceof RegExp)
                    throw new TypeError('Cannot clone ' + x);
                return exports.map(x, clone);
            };
            exports.map = function (object, callback) {
                var clone = {};
                for (var key in object) {
                    if (exports.hasOwnProperty(object, key)) {
                        clone[key] = callback(object[key]);
                    }
                }
                return clone;
            };
            exports.extend = function (a, b) {
                for (var prop in b) {
                    if (exports.hasOwnProperty(b, prop)) {
                        a[prop] = b[prop];
                    }
                }
                return a;
            };
            exports.deepExtend = function deepExtend(a, b) {
                if (Array.isArray(b)) {
                    throw new TypeError('Arrays are not supported by deepExtend');
                }
                for (var prop in b) {
                    if (exports.hasOwnProperty(b, prop)) {
                        if (b[prop] && b[prop].constructor === Object) {
                            if (a[prop] === undefined) {
                                a[prop] = {};
                            }
                            if (a[prop].constructor === Object) {
                                deepExtend(a[prop], b[prop]);
                            }
                            else {
                                a[prop] = b[prop];
                            }
                        }
                        else if (Array.isArray(b[prop])) {
                            throw new TypeError('Arrays are not supported by deepExtend');
                        }
                        else {
                            a[prop] = b[prop];
                        }
                    }
                }
                return a;
            };
            exports.deepEqual = function deepEqual(a, b) {
                var prop, i, len;
                if (Array.isArray(a)) {
                    if (!Array.isArray(b)) {
                        return false;
                    }
                    if (a.length != b.length) {
                        return false;
                    }
                    for (i = 0, len = a.length; i < len; i++) {
                        if (!exports.deepEqual(a[i], b[i])) {
                            return false;
                        }
                    }
                    return true;
                }
                else if (a instanceof Object) {
                    if (Array.isArray(b) || !(b instanceof Object)) {
                        return false;
                    }
                    for (prop in a) {
                        if (!exports.deepEqual(a[prop], b[prop])) {
                            return false;
                        }
                    }
                    for (prop in b) {
                        if (!exports.deepEqual(a[prop], b[prop])) {
                            return false;
                        }
                    }
                    return true;
                }
                else {
                    return (typeof a === typeof b) && (a == b);
                }
            };
            exports.canDefineProperty = function () {
                try {
                    if (Object.defineProperty) {
                        Object.defineProperty({}, 'x', { get: function () { } });
                        return true;
                    }
                }
                catch (e) { }
                return false;
            };
            exports.lazy = function (object, prop, fn) {
                if (exports.canDefineProperty()) {
                    var _uninitialized = true;
                    var _value;
                    Object.defineProperty(object, prop, {
                        get: function () {
                            if (_uninitialized) {
                                _value = fn();
                                _uninitialized = false;
                            }
                            return _value;
                        },
                        set: function (value) {
                            _value = value;
                            _uninitialized = false;
                        },
                        configurable: true,
                        enumerable: true
                    });
                }
                else {
                    object[prop] = fn();
                }
            };
            exports.traverse = function (object, path) {
                var obj = object;
                if (path) {
                    var names = path.split('.');
                    for (var i = 0; i < names.length; i++) {
                        var name = names[i];
                        if (!(name in obj)) {
                            obj[name] = {};
                        }
                        obj = obj[name];
                    }
                }
                return obj;
            };
            exports.hasOwnProperty = function (object, property) {
                return object && Object.hasOwnProperty.call(object, property);
            };
            exports.isFactory = function (object) {
                return object && typeof object.factory === 'function';
            };
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var clone = __webpack_require__(5).clone;
            function factory(type, config, load, typed) {
                var DenseMatrix = type.DenseMatrix;
                var algorithm14 = function (a, b, callback, inverse) {
                    var adata = a._data;
                    var asize = a._size;
                    var adt = a._datatype;
                    var dt;
                    var cf = callback;
                    if (typeof adt === 'string') {
                        dt = adt;
                        b = typed.convert(b, dt);
                        cf = typed.find(callback, [dt, dt]);
                    }
                    var cdata = asize.length > 0 ? _iterate(cf, 0, asize, asize[0], adata, b, inverse) : [];
                    return new DenseMatrix({
                        data: cdata,
                        size: clone(asize),
                        datatype: dt
                    });
                };
                var _iterate = function (f, level, s, n, av, bv, inverse) {
                    var cv = [];
                    if (level === s.length - 1) {
                        for (var i = 0; i < n; i++) {
                            cv[i] = inverse ? f(bv, av[i]) : f(av[i], bv);
                        }
                    }
                    else {
                        for (var j = 0; j < n; j++) {
                            cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv, inverse);
                        }
                    }
                    return cv;
                };
                return algorithm14;
            }
            exports.name = 'algorithm14';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            var hasOwnProperty = __webpack_require__(5).hasOwnProperty;
            function factory() {
                var compileFunctions = {};
                function register(type, compileFunction) {
                    if (compileFunctions[type] === undefined) {
                        compileFunctions[type] = compileFunction;
                    }
                    else {
                        throw new Error('Cannot register type "' + type + '": already exists');
                    }
                }
                function compile(node, defs, args) {
                    if (hasOwnProperty(compileFunctions, node.type)) {
                        var compileFunction = compileFunctions[node.type];
                        return compileFunction(node, defs, args);
                    }
                    else if (typeof node._compile === 'function' &&
                        !hasOwnProperty(node, '_compile')) {
                        return node._compile(defs, args);
                    }
                    else {
                        throw new Error('Cannot compile node: unknown type "' + node.type + '"');
                    }
                }
                return {
                    register: register,
                    compile: compile
                };
            }
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var util = __webpack_require__(25);
            var DimensionError = __webpack_require__(10);
            var string = util.string, isString = string.isString;
            function factory(type, config, load, typed) {
                var DenseMatrix = type.DenseMatrix;
                var algorithm13 = function (a, b, callback) {
                    var adata = a._data;
                    var asize = a._size;
                    var adt = a._datatype;
                    var bdata = b._data;
                    var bsize = b._size;
                    var bdt = b._datatype;
                    var csize = [];
                    if (asize.length !== bsize.length)
                        throw new DimensionError(asize.length, bsize.length);
                    for (var s = 0; s < asize.length; s++) {
                        if (asize[s] !== bsize[s])
                            throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
                        csize[s] = asize[s];
                    }
                    var dt;
                    var cf = callback;
                    if (typeof adt === 'string' && adt === bdt) {
                        dt = adt;
                        b = typed.convert(b, dt);
                        cf = typed.find(callback, [dt, dt]);
                    }
                    var cdata = csize.length > 0 ? _iterate(cf, 0, csize, csize[0], adata, bdata) : [];
                    return new DenseMatrix({
                        data: cdata,
                        size: csize,
                        datatype: dt
                    });
                };
                var _iterate = function (f, level, s, n, av, bv) {
                    var cv = [];
                    if (level === s.length - 1) {
                        for (var i = 0; i < n; i++) {
                            cv[i] = f(av[i], bv[i]);
                        }
                    }
                    else {
                        for (var j = 0; j < n; j++) {
                            cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv[j]);
                        }
                    }
                    return cv;
                };
                return algorithm13;
            }
            exports.name = 'algorithm13';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var formatNumber = __webpack_require__(3).format;
            var formatBigNumber = __webpack_require__(165).format;
            var isBigNumber = __webpack_require__(71);
            exports.isString = function (value) {
                return typeof value === 'string';
            };
            exports.endsWith = function (text, search) {
                var start = text.length - search.length;
                var end = text.length;
                return (text.substring(start, end) === search);
            };
            exports.format = function (value, options) {
                if (typeof value === 'number') {
                    return formatNumber(value, options);
                }
                if (isBigNumber(value)) {
                    return formatBigNumber(value, options);
                }
                if (looksLikeFraction(value)) {
                    if (!options || options.fraction !== 'decimal') {
                        return (value.s * value.n) + '/' + value.d;
                    }
                    else {
                        return value.toString();
                    }
                }
                if (Array.isArray(value)) {
                    return formatArray(value, options);
                }
                if (exports.isString(value)) {
                    return '"' + value + '"';
                }
                if (typeof value === 'function') {
                    return value.syntax ? String(value.syntax) : 'function';
                }
                if (value && typeof value === 'object') {
                    if (typeof value.format === 'function') {
                        return value.format(options);
                    }
                    else if (value && value.toString() !== {}.toString()) {
                        return value.toString();
                    }
                    else {
                        var entries = [];
                        for (var key in value) {
                            if (value.hasOwnProperty(key)) {
                                entries.push('"' + key + '": ' + exports.format(value[key], options));
                            }
                        }
                        return '{' + entries.join(', ') + '}';
                    }
                }
                return String(value);
            };
            exports.stringify = function (value) {
                var text = String(value);
                var escaped = '';
                var i = 0;
                while (i < text.length) {
                    var c = text.charAt(i);
                    if (c === '\\') {
                        escaped += c;
                        i++;
                        c = text.charAt(i);
                        if (c === '' || '"\\/bfnrtu'.indexOf(c) === -1) {
                            escaped += '\\';
                        }
                        escaped += c;
                    }
                    else if (c === '"') {
                        escaped += '\\"';
                    }
                    else {
                        escaped += c;
                    }
                    i++;
                }
                return '"' + escaped + '"';
            };
            exports.escape = function (value) {
                var text = String(value);
                text = text.replace(/&/g, '&amp;')
                    .replace(/"/g, '&quot;')
                    .replace(/'/g, '&#39;')
                    .replace(/</g, '&lt;')
                    .replace(/>/g, '&gt;');
                return text;
            };
            function formatArray(array, options) {
                if (Array.isArray(array)) {
                    var str = '[';
                    var len = array.length;
                    for (var i = 0; i < len; i++) {
                        if (i != 0) {
                            str += ', ';
                        }
                        str += formatArray(array[i], options);
                    }
                    str += ']';
                    return str;
                }
                else {
                    return exports.format(array, options);
                }
            }
            function looksLikeFraction(value) {
                return (value &&
                    typeof value === 'object' &&
                    typeof value.s === 'number' &&
                    typeof value.n === 'number' &&
                    typeof value.d === 'number') || false;
            }
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function DimensionError(actual, expected, relation) {
                if (!(this instanceof DimensionError)) {
                    throw new SyntaxError('Constructor must be called with the new operator');
                }
                this.actual = actual;
                this.expected = expected;
                this.relation = relation;
                this.message = 'Dimension mismatch (' +
                    (Array.isArray(actual) ? ('[' + actual.join(', ') + ']') : actual) +
                    ' ' + (this.relation || '!=') + ' ' +
                    (Array.isArray(expected) ? ('[' + expected.join(', ') + ']') : expected) +
                    ')';
                this.stack = (new Error()).stack;
            }
            DimensionError.prototype = new RangeError();
            DimensionError.prototype.constructor = RangeError;
            DimensionError.prototype.name = 'DimensionError';
            DimensionError.prototype.isDimensionError = true;
            module.exports = DimensionError;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var nearlyEqual = __webpack_require__(3).nearlyEqual;
            var bigNearlyEqual = __webpack_require__(35);
            function factory(type, config, load, typed) {
                var equalScalar = typed('equalScalar', {
                    'boolean, boolean': function (x, y) {
                        return x === y;
                    },
                    'number, number': function (x, y) {
                        return x === y || nearlyEqual(x, y, config.epsilon);
                    },
                    'BigNumber, BigNumber': function (x, y) {
                        return x.eq(y) || bigNearlyEqual(x, y, config.epsilon);
                    },
                    'Fraction, Fraction': function (x, y) {
                        return x.equals(y);
                    },
                    'Complex, Complex': function (x, y) {
                        return x.equals(y);
                    },
                    'Unit, Unit': function (x, y) {
                        if (!x.equalBase(y)) {
                            throw new Error('Cannot compare units with different base');
                        }
                        return equalScalar(x.value, y.value);
                    },
                    'string, string': function (x, y) {
                        return x === y;
                    }
                });
                return equalScalar;
            }
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var extend = __webpack_require__(5).extend;
            var array = __webpack_require__(2);
            function factory(type, config, load, typed) {
                var latex = __webpack_require__(4);
                var matrix = load(__webpack_require__(0));
                var addScalar = load(__webpack_require__(20));
                var multiplyScalar = load(__webpack_require__(23));
                var equalScalar = load(__webpack_require__(11));
                var algorithm11 = load(__webpack_require__(17));
                var algorithm14 = load(__webpack_require__(6));
                var DenseMatrix = type.DenseMatrix;
                var SparseMatrix = type.SparseMatrix;
                var multiply = typed('multiply', extend({
                    'Array, Array': function (x, y) {
                        _validateMatrixDimensions(array.size(x), array.size(y));
                        var m = multiply(matrix(x), matrix(y));
                        return type.isMatrix(m) ? m.valueOf() : m;
                    },
                    'Matrix, Matrix': function (x, y) {
                        var xsize = x.size();
                        var ysize = y.size();
                        _validateMatrixDimensions(xsize, ysize);
                        if (xsize.length === 1) {
                            if (ysize.length === 1) {
                                return _multiplyVectorVector(x, y, xsize[0]);
                            }
                            return _multiplyVectorMatrix(x, y);
                        }
                        if (ysize.length === 1) {
                            return _multiplyMatrixVector(x, y);
                        }
                        return _multiplyMatrixMatrix(x, y);
                    },
                    'Matrix, Array': function (x, y) {
                        return multiply(x, matrix(y));
                    },
                    'Array, Matrix': function (x, y) {
                        return multiply(matrix(x, y.storage()), y);
                    },
                    'Matrix, any': function (x, y) {
                        var c;
                        switch (x.storage()) {
                            case 'sparse':
                                c = algorithm11(x, y, multiplyScalar, false);
                                break;
                            case 'dense':
                                c = algorithm14(x, y, multiplyScalar, false);
                                break;
                        }
                        return c;
                    },
                    'any, Matrix': function (x, y) {
                        var c;
                        switch (y.storage()) {
                            case 'sparse':
                                c = algorithm11(y, x, multiplyScalar, true);
                                break;
                            case 'dense':
                                c = algorithm14(y, x, multiplyScalar, true);
                                break;
                        }
                        return c;
                    },
                    'Array, any': function (x, y) {
                        return algorithm14(matrix(x), y, multiplyScalar, false).valueOf();
                    },
                    'any, Array': function (x, y) {
                        return algorithm14(matrix(y), x, multiplyScalar, true).valueOf();
                    },
                    'any, any': multiplyScalar,
                    'Array | Matrix | any, Array | Matrix | any, ...any': function (x, y, rest) {
                        var result = multiply(x, y);
                        for (var i = 0; i < rest.length; i++) {
                            result = multiply(result, rest[i]);
                        }
                        return result;
                    }
                }, multiplyScalar.signatures));
                var _validateMatrixDimensions = function (size1, size2) {
                    switch (size1.length) {
                        case 1:
                            switch (size2.length) {
                                case 1:
                                    if (size1[0] !== size2[0]) {
                                        throw new RangeError('Dimension mismatch in multiplication. Vectors must have the same length');
                                    }
                                    break;
                                case 2:
                                    if (size1[0] !== size2[0]) {
                                        throw new RangeError('Dimension mismatch in multiplication. Vector length (' + size1[0] + ') must match Matrix rows (' + size2[0] + ')');
                                    }
                                    break;
                                default:
                                    throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');
                            }
                            break;
                        case 2:
                            switch (size2.length) {
                                case 1:
                                    if (size1[1] !== size2[0]) {
                                        throw new RangeError('Dimension mismatch in multiplication. Matrix columns (' + size1[1] + ') must match Vector length (' + size2[0] + ')');
                                    }
                                    break;
                                case 2:
                                    if (size1[1] !== size2[0]) {
                                        throw new RangeError('Dimension mismatch in multiplication. Matrix A columns (' + size1[1] + ') must match Matrix B rows (' + size2[0] + ')');
                                    }
                                    break;
                                default:
                                    throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');
                            }
                            break;
                        default:
                            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix A has ' + size1.length + ' dimensions)');
                    }
                };
                var _multiplyVectorVector = function (a, b, n) {
                    if (n === 0)
                        throw new Error('Cannot multiply two empty vectors');
                    var adata = a._data;
                    var adt = a._datatype;
                    var bdata = b._data;
                    var bdt = b._datatype;
                    var dt;
                    var af = addScalar;
                    var mf = multiplyScalar;
                    if (adt && bdt && adt === bdt && typeof adt === 'string') {
                        dt = adt;
                        af = typed.find(addScalar, [dt, dt]);
                        mf = typed.find(multiplyScalar, [dt, dt]);
                    }
                    var c = mf(adata[0], bdata[0]);
                    for (var i = 1; i < n; i++) {
                        c = af(c, mf(adata[i], bdata[i]));
                    }
                    return c;
                };
                var _multiplyVectorMatrix = function (a, b) {
                    switch (b.storage()) {
                        case 'dense':
                            return _multiplyVectorDenseMatrix(a, b);
                    }
                    throw new Error('Not implemented');
                };
                var _multiplyVectorDenseMatrix = function (a, b) {
                    var adata = a._data;
                    var asize = a._size;
                    var adt = a._datatype;
                    var bdata = b._data;
                    var bsize = b._size;
                    var bdt = b._datatype;
                    var alength = asize[0];
                    var bcolumns = bsize[1];
                    var dt;
                    var af = addScalar;
                    var mf = multiplyScalar;
                    if (adt && bdt && adt === bdt && typeof adt === 'string') {
                        dt = adt;
                        af = typed.find(addScalar, [dt, dt]);
                        mf = typed.find(multiplyScalar, [dt, dt]);
                    }
                    var c = [];
                    for (var j = 0; j < bcolumns; j++) {
                        var sum = mf(adata[0], bdata[0][j]);
                        for (var i = 1; i < alength; i++) {
                            sum = af(sum, mf(adata[i], bdata[i][j]));
                        }
                        c[j] = sum;
                    }
                    return new DenseMatrix({
                        data: c,
                        size: [bcolumns],
                        datatype: dt
                    });
                };
                var _multiplyMatrixVector = function (a, b) {
                    switch (a.storage()) {
                        case 'dense':
                            return _multiplyDenseMatrixVector(a, b);
                        case 'sparse':
                            return _multiplySparseMatrixVector(a, b);
                    }
                };
                var _multiplyMatrixMatrix = function (a, b) {
                    switch (a.storage()) {
                        case 'dense':
                            switch (b.storage()) {
                                case 'dense':
                                    return _multiplyDenseMatrixDenseMatrix(a, b);
                                case 'sparse':
                                    return _multiplyDenseMatrixSparseMatrix(a, b);
                            }
                            break;
                        case 'sparse':
                            switch (b.storage()) {
                                case 'dense':
                                    return _multiplySparseMatrixDenseMatrix(a, b);
                                case 'sparse':
                                    return _multiplySparseMatrixSparseMatrix(a, b);
                            }
                            break;
                    }
                };
                var _multiplyDenseMatrixVector = function (a, b) {
                    var adata = a._data;
                    var asize = a._size;
                    var adt = a._datatype;
                    var bdata = b._data;
                    var bdt = b._datatype;
                    var arows = asize[0];
                    var acolumns = asize[1];
                    var dt;
                    var af = addScalar;
                    var mf = multiplyScalar;
                    if (adt && bdt && adt === bdt && typeof adt === 'string') {
                        dt = adt;
                        af = typed.find(addScalar, [dt, dt]);
                        mf = typed.find(multiplyScalar, [dt, dt]);
                    }
                    var c = [];
                    for (var i = 0; i < arows; i++) {
                        var row = adata[i];
                        var sum = mf(row[0], bdata[0]);
                        for (var j = 1; j < acolumns; j++) {
                            sum = af(sum, mf(row[j], bdata[j]));
                        }
                        c[i] = sum;
                    }
                    return new DenseMatrix({
                        data: c,
                        size: [arows],
                        datatype: dt
                    });
                };
                var _multiplyDenseMatrixDenseMatrix = function (a, b) {
                    var adata = a._data;
                    var asize = a._size;
                    var adt = a._datatype;
                    var bdata = b._data;
                    var bsize = b._size;
                    var bdt = b._datatype;
                    var arows = asize[0];
                    var acolumns = asize[1];
                    var bcolumns = bsize[1];
                    var dt;
                    var af = addScalar;
                    var mf = multiplyScalar;
                    if (adt && bdt && adt === bdt && typeof adt === 'string') {
                        dt = adt;
                        af = typed.find(addScalar, [dt, dt]);
                        mf = typed.find(multiplyScalar, [dt, dt]);
                    }
                    var c = [];
                    for (var i = 0; i < arows; i++) {
                        var row = adata[i];
                        c[i] = [];
                        for (var j = 0; j < bcolumns; j++) {
                            var sum = mf(row[0], bdata[0][j]);
                            for (var x = 1; x < acolumns; x++) {
                                sum = af(sum, mf(row[x], bdata[x][j]));
                            }
                            c[i][j] = sum;
                        }
                    }
                    return new DenseMatrix({
                        data: c,
                        size: [arows, bcolumns],
                        datatype: dt
                    });
                };
                var _multiplyDenseMatrixSparseMatrix = function (a, b) {
                    var adata = a._data;
                    var asize = a._size;
                    var adt = a._datatype;
                    var bvalues = b._values;
                    var bindex = b._index;
                    var bptr = b._ptr;
                    var bsize = b._size;
                    var bdt = b._datatype;
                    if (!bvalues)
                        throw new Error('Cannot multiply Dense Matrix times Pattern only Matrix');
                    var arows = asize[0];
                    var bcolumns = bsize[1];
                    var dt;
                    var af = addScalar;
                    var mf = multiplyScalar;
                    var eq = equalScalar;
                    var zero = 0;
                    if (adt && bdt && adt === bdt && typeof adt === 'string') {
                        dt = adt;
                        af = typed.find(addScalar, [dt, dt]);
                        mf = typed.find(multiplyScalar, [dt, dt]);
                        eq = typed.find(equalScalar, [dt, dt]);
                        zero = typed.convert(0, dt);
                    }
                    var cvalues = [];
                    var cindex = [];
                    var cptr = [];
                    var c = new SparseMatrix({
                        values: cvalues,
                        index: cindex,
                        ptr: cptr,
                        size: [arows, bcolumns],
                        datatype: dt
                    });
                    for (var jb = 0; jb < bcolumns; jb++) {
                        cptr[jb] = cindex.length;
                        var kb0 = bptr[jb];
                        var kb1 = bptr[jb + 1];
                        if (kb1 > kb0) {
                            var last = 0;
                            for (var i = 0; i < arows; i++) {
                                var mark = i + 1;
                                var cij;
                                for (var kb = kb0; kb < kb1; kb++) {
                                    var ib = bindex[kb];
                                    if (last !== mark) {
                                        cij = mf(adata[i][ib], bvalues[kb]);
                                        last = mark;
                                    }
                                    else {
                                        cij = af(cij, mf(adata[i][ib], bvalues[kb]));
                                    }
                                }
                                if (last === mark && !eq(cij, zero)) {
                                    cindex.push(i);
                                    cvalues.push(cij);
                                }
                            }
                        }
                    }
                    cptr[bcolumns] = cindex.length;
                    return c;
                };
                var _multiplySparseMatrixVector = function (a, b) {
                    var avalues = a._values;
                    var aindex = a._index;
                    var aptr = a._ptr;
                    var adt = a._datatype;
                    if (!avalues)
                        throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');
                    var bdata = b._data;
                    var bdt = b._datatype;
                    var arows = a._size[0];
                    var brows = b._size[0];
                    var cvalues = [];
                    var cindex = [];
                    var cptr = [];
                    var dt;
                    var af = addScalar;
                    var mf = multiplyScalar;
                    var eq = equalScalar;
                    var zero = 0;
                    if (adt && bdt && adt === bdt && typeof adt === 'string') {
                        dt = adt;
                        af = typed.find(addScalar, [dt, dt]);
                        mf = typed.find(multiplyScalar, [dt, dt]);
                        eq = typed.find(equalScalar, [dt, dt]);
                        zero = typed.convert(0, dt);
                    }
                    var x = [];
                    var w = [];
                    cptr[0] = 0;
                    for (var ib = 0; ib < brows; ib++) {
                        var vbi = bdata[ib];
                        if (!eq(vbi, zero)) {
                            for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
                                var ia = aindex[ka];
                                if (!w[ia]) {
                                    w[ia] = true;
                                    cindex.push(ia);
                                    x[ia] = mf(vbi, avalues[ka]);
                                }
                                else {
                                    x[ia] = af(x[ia], mf(vbi, avalues[ka]));
                                }
                            }
                        }
                    }
                    for (var p1 = cindex.length, p = 0; p < p1; p++) {
                        var ic = cindex[p];
                        cvalues[p] = x[ic];
                    }
                    cptr[1] = cindex.length;
                    return new SparseMatrix({
                        values: cvalues,
                        index: cindex,
                        ptr: cptr,
                        size: [arows, 1],
                        datatype: dt
                    });
                };
                var _multiplySparseMatrixDenseMatrix = function (a, b) {
                    var avalues = a._values;
                    var aindex = a._index;
                    var aptr = a._ptr;
                    var adt = a._datatype;
                    if (!avalues)
                        throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');
                    var bdata = b._data;
                    var bdt = b._datatype;
                    var arows = a._size[0];
                    var brows = b._size[0];
                    var bcolumns = b._size[1];
                    var dt;
                    var af = addScalar;
                    var mf = multiplyScalar;
                    var eq = equalScalar;
                    var zero = 0;
                    if (adt && bdt && adt === bdt && typeof adt === 'string') {
                        dt = adt;
                        af = typed.find(addScalar, [dt, dt]);
                        mf = typed.find(multiplyScalar, [dt, dt]);
                        eq = typed.find(equalScalar, [dt, dt]);
                        zero = typed.convert(0, dt);
                    }
                    var cvalues = [];
                    var cindex = [];
                    var cptr = [];
                    var c = new SparseMatrix({
                        values: cvalues,
                        index: cindex,
                        ptr: cptr,
                        size: [arows, bcolumns],
                        datatype: dt
                    });
                    var x = [];
                    var w = [];
                    for (var jb = 0; jb < bcolumns; jb++) {
                        cptr[jb] = cindex.length;
                        var mark = jb + 1;
                        for (var ib = 0; ib < brows; ib++) {
                            var vbij = bdata[ib][jb];
                            if (!eq(vbij, zero)) {
                                for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
                                    var ia = aindex[ka];
                                    if (w[ia] !== mark) {
                                        w[ia] = mark;
                                        cindex.push(ia);
                                        x[ia] = mf(vbij, avalues[ka]);
                                    }
                                    else {
                                        x[ia] = af(x[ia], mf(vbij, avalues[ka]));
                                    }
                                }
                            }
                        }
                        for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {
                            var ic = cindex[p];
                            cvalues[p] = x[ic];
                        }
                    }
                    cptr[bcolumns] = cindex.length;
                    return c;
                };
                var _multiplySparseMatrixSparseMatrix = function (a, b) {
                    var avalues = a._values;
                    var aindex = a._index;
                    var aptr = a._ptr;
                    var adt = a._datatype;
                    var bvalues = b._values;
                    var bindex = b._index;
                    var bptr = b._ptr;
                    var bdt = b._datatype;
                    var arows = a._size[0];
                    var bcolumns = b._size[1];
                    var values = avalues && bvalues;
                    var dt;
                    var af = addScalar;
                    var mf = multiplyScalar;
                    if (adt && bdt && adt === bdt && typeof adt === 'string') {
                        dt = adt;
                        af = typed.find(addScalar, [dt, dt]);
                        mf = typed.find(multiplyScalar, [dt, dt]);
                    }
                    var cvalues = values ? [] : undefined;
                    var cindex = [];
                    var cptr = [];
                    var c = new SparseMatrix({
                        values: cvalues,
                        index: cindex,
                        ptr: cptr,
                        size: [arows, bcolumns],
                        datatype: dt
                    });
                    var x = values ? [] : undefined;
                    var w = [];
                    var ka, ka0, ka1, kb, kb0, kb1, ia, ib;
                    for (var jb = 0; jb < bcolumns; jb++) {
                        cptr[jb] = cindex.length;
                        var mark = jb + 1;
                        for (kb0 = bptr[jb], kb1 = bptr[jb + 1], kb = kb0; kb < kb1; kb++) {
                            ib = bindex[kb];
                            if (values) {
                                for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
                                    ia = aindex[ka];
                                    if (w[ia] !== mark) {
                                        w[ia] = mark;
                                        cindex.push(ia);
                                        x[ia] = mf(bvalues[kb], avalues[ka]);
                                    }
                                    else {
                                        x[ia] = af(x[ia], mf(bvalues[kb], avalues[ka]));
                                    }
                                }
                            }
                            else {
                                for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
                                    ia = aindex[ka];
                                    if (w[ia] !== mark) {
                                        w[ia] = mark;
                                        cindex.push(ia);
                                    }
                                }
                            }
                        }
                        if (values) {
                            for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {
                                var ic = cindex[p];
                                cvalues[p] = x[ic];
                            }
                        }
                    }
                    cptr[bcolumns] = cindex.length;
                    return c;
                };
                multiply.toTex = {
                    2: '\\left(${args[0]}' + latex.operators['multiply'] + '${args[1]}\\right)'
                };
                return multiply;
            }
            exports.name = 'multiply';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var hasOwnProperty = __webpack_require__(5).hasOwnProperty;
            function getSafeProperty(object, prop) {
                if (isPlainObject(object) && isSafeProperty(object, prop)) {
                    return object[prop];
                }
                if (typeof object[prop] === 'function' && isSafeMethod(object, prop)) {
                    throw new Error('Cannot access method "' + prop + '" as a property');
                }
                throw new Error('No access to property "' + prop + '"');
            }
            function setSafeProperty(object, prop, value) {
                if (isPlainObject(object) && isSafeProperty(object, prop)) {
                    return object[prop] = value;
                }
                throw new Error('No access to property "' + prop + '"');
            }
            function isSafeProperty(object, prop) {
                if (!object || typeof object !== 'object') {
                    return false;
                }
                if (hasOwnProperty(safeNativeProperties, prop)) {
                    return true;
                }
                if (prop in Object.prototype) {
                    return false;
                }
                if (prop in Function.prototype) {
                    return false;
                }
                return true;
            }
            function validateSafeMethod(object, method) {
                if (!isSafeMethod(object, method)) {
                    throw new Error('No access to method "' + method + '"');
                }
            }
            function isSafeMethod(object, method) {
                if (!object || typeof object[method] !== 'function') {
                    return false;
                }
                if (hasOwnProperty(object, method) &&
                    (object.__proto__ && (method in object.__proto__))) {
                    return false;
                }
                if (hasOwnProperty(safeNativeMethods, method)) {
                    return true;
                }
                if (method in Object.prototype) {
                    return false;
                }
                if (method in Function.prototype) {
                    return false;
                }
                return true;
            }
            function isPlainObject(object) {
                return typeof object === 'object' && object && object.constructor === Object;
            }
            var safeNativeProperties = {
                length: true,
                name: true
            };
            var safeNativeMethods = {
                toString: true,
                valueOf: true,
                toLocaleString: true
            };
            exports.getSafeProperty = getSafeProperty;
            exports.setSafeProperty = setSafeProperty;
            exports.isSafeProperty = isSafeProperty;
            exports.validateSafeMethod = validateSafeMethod;
            exports.isSafeMethod = isSafeMethod;
            exports.isPlainObject = isPlainObject;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var keywords = __webpack_require__(77);
            var deepEqual = __webpack_require__(5).deepEqual;
            var hasOwnProperty = __webpack_require__(5).hasOwnProperty;
            function factory(type, config, load, typed, math) {
                var compile = load(__webpack_require__(7)).compile;
                function Node() {
                    if (!(this instanceof Node)) {
                        throw new SyntaxError('Constructor must be called with the new operator');
                    }
                }
                Node.prototype.eval = function (scope) {
                    return this.compile().eval(scope);
                };
                Node.prototype.type = 'Node';
                Node.prototype.isNode = true;
                Node.prototype.comment = '';
                Node.prototype.compile = function () {
                    if (arguments.length > 0) {
                        throw new Error('Calling compile(math) is deprecated. Call the function as compile() instead.');
                    }
                    var defs = {
                        math: math.expression.mathWithTransform,
                        args: {},
                        _validateScope: _validateScope
                    };
                    var args = {};
                    var code = compile(this, defs, args);
                    var defsCode = Object.keys(defs).map(function (name) {
                        return '    var ' + name + ' = defs["' + name + '"];';
                    });
                    var factoryCode = defsCode.join(' ') +
                        'return {' +
                        '  "eval": function (scope) {' +
                        '    if (scope) _validateScope(scope);' +
                        '    scope = scope || {};' +
                        '    return ' + code + ';' +
                        '  }' +
                        '};';
                    var factory = new Function('defs', factoryCode);
                    return factory(defs);
                };
                Node.prototype.forEach = function (callback) {
                    throw new Error('Cannot run forEach on a Node interface');
                };
                Node.prototype.map = function (callback) {
                    throw new Error('Cannot run map on a Node interface');
                };
                Node.prototype._ifNode = function (node) {
                    if (!type.isNode(node)) {
                        throw new TypeError('Callback function must return a Node');
                    }
                    return node;
                };
                Node.prototype.traverse = function (callback) {
                    callback(this, null, null);
                    function _traverse(node, callback) {
                        node.forEach(function (child, path, parent) {
                            callback(child, path, parent);
                            _traverse(child, callback);
                        });
                    }
                    _traverse(this, callback);
                };
                Node.prototype.transform = function (callback) {
                    function _transform(node, callback) {
                        return node.map(function (child, path, parent) {
                            var replacement = callback(child, path, parent);
                            return _transform(replacement, callback);
                        });
                    }
                    var replacement = callback(this, null, null);
                    return _transform(replacement, callback);
                };
                Node.prototype.filter = function (callback) {
                    var nodes = [];
                    this.traverse(function (node, path, parent) {
                        if (callback(node, path, parent)) {
                            nodes.push(node);
                        }
                    });
                    return nodes;
                };
                Node.prototype.find = function () {
                    throw new Error('Function Node.find is deprecated. Use Node.filter instead.');
                };
                Node.prototype.match = function () {
                    throw new Error('Function Node.match is deprecated. See functions Node.filter, Node.transform, Node.traverse.');
                };
                Node.prototype.clone = function () {
                    throw new Error('Cannot clone a Node interface');
                };
                Node.prototype.cloneDeep = function () {
                    return this.map(function (node) {
                        return node.cloneDeep();
                    });
                };
                Node.prototype.equals = function (other) {
                    return other
                        ? deepEqual(this, other)
                        : false;
                };
                Node.prototype.toString = function (options) {
                    var customString;
                    if (options && typeof options === 'object') {
                        switch (typeof options.handler) {
                            case 'object':
                            case 'undefined':
                                break;
                            case 'function':
                                customString = options.handler(this, options);
                                break;
                            default:
                                throw new TypeError('Object or function expected as callback');
                        }
                    }
                    if (typeof customString !== 'undefined') {
                        return customString;
                    }
                    return this._toString(options);
                };
                Node.prototype.toHTML = function (options) {
                    var customString;
                    if (options && typeof options === 'object') {
                        switch (typeof options.handler) {
                            case 'object':
                            case 'undefined':
                                break;
                            case 'function':
                                customString = options.handler(this, options);
                                break;
                            default:
                                throw new TypeError('Object or function expected as callback');
                        }
                    }
                    if (typeof customString !== 'undefined') {
                        return customString;
                    }
                    return this.toHTML(options);
                };
                Node.prototype._toString = function () {
                    throw new Error('_toString not implemented for ' + this.type);
                };
                Node.prototype.toTex = function (options) {
                    var customTex;
                    if (options && typeof options == 'object') {
                        switch (typeof options.handler) {
                            case 'object':
                            case 'undefined':
                                break;
                            case 'function':
                                customTex = options.handler(this, options);
                                break;
                            default:
                                throw new TypeError('Object or function expected as callback');
                        }
                    }
                    if (typeof customTex !== 'undefined') {
                        return customTex;
                    }
                    return this._toTex(options);
                };
                Node.prototype._toTex = function (options) {
                    throw new Error('_toTex not implemented for ' + this.type);
                };
                Node.prototype.getIdentifier = function () {
                    return this.type;
                };
                Node.prototype.getContent = function () {
                    return this;
                };
                function _validateScope(scope) {
                    for (var symbol in scope) {
                        if (hasOwnProperty(scope, symbol)) {
                            if (symbol in keywords) {
                                throw new Error('Scope contains an illegal symbol, "' + symbol + '" is a reserved keyword');
                            }
                        }
                    }
                }
                return Node;
            }
            exports.name = 'Node';
            exports.path = 'expression.node';
            exports.math = true;
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var DimensionError = __webpack_require__(10);
            function factory(type, config, load, typed) {
                var DenseMatrix = type.DenseMatrix;
                var algorithm03 = function (denseMatrix, sparseMatrix, callback, inverse) {
                    var adata = denseMatrix._data;
                    var asize = denseMatrix._size;
                    var adt = denseMatrix._datatype;
                    var bvalues = sparseMatrix._values;
                    var bindex = sparseMatrix._index;
                    var bptr = sparseMatrix._ptr;
                    var bsize = sparseMatrix._size;
                    var bdt = sparseMatrix._datatype;
                    if (asize.length !== bsize.length)
                        throw new DimensionError(asize.length, bsize.length);
                    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
                        throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
                    if (!bvalues)
                        throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');
                    var rows = asize[0];
                    var columns = asize[1];
                    var dt;
                    var zero = 0;
                    var cf = callback;
                    if (typeof adt === 'string' && adt === bdt) {
                        dt = adt;
                        zero = typed.convert(0, dt);
                        cf = typed.find(callback, [dt, dt]);
                    }
                    var cdata = [];
                    for (var z = 0; z < rows; z++) {
                        cdata[z] = [];
                    }
                    var x = [];
                    var w = [];
                    for (var j = 0; j < columns; j++) {
                        var mark = j + 1;
                        for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
                            var i = bindex[k];
                            x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);
                            w[i] = mark;
                        }
                        for (var y = 0; y < rows; y++) {
                            if (w[y] === mark) {
                                cdata[y][j] = x[y];
                            }
                            else {
                                cdata[y][j] = inverse ? cf(zero, adata[y][j]) : cf(adata[y][j], zero);
                            }
                        }
                    }
                    return new DenseMatrix({
                        data: cdata,
                        size: [rows, columns],
                        datatype: dt
                    });
                };
                return algorithm03;
            }
            exports.name = 'algorithm03';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load, typed) {
                var DenseMatrix = type.DenseMatrix;
                var algorithm12 = function (s, b, callback, inverse) {
                    var avalues = s._values;
                    var aindex = s._index;
                    var aptr = s._ptr;
                    var asize = s._size;
                    var adt = s._datatype;
                    if (!avalues)
                        throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');
                    var rows = asize[0];
                    var columns = asize[1];
                    var dt;
                    var cf = callback;
                    if (typeof adt === 'string') {
                        dt = adt;
                        b = typed.convert(b, dt);
                        cf = typed.find(callback, [dt, dt]);
                    }
                    var cdata = [];
                    var c = new DenseMatrix({
                        data: cdata,
                        size: [rows, columns],
                        datatype: dt
                    });
                    var x = [];
                    var w = [];
                    for (var j = 0; j < columns; j++) {
                        var mark = j + 1;
                        for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
                            var r = aindex[k];
                            x[r] = avalues[k];
                            w[r] = mark;
                        }
                        for (var i = 0; i < rows; i++) {
                            if (j === 0) {
                                cdata[i] = [];
                            }
                            if (w[i] === mark) {
                                cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);
                            }
                            else {
                                cdata[i][j] = inverse ? cf(b, 0) : cf(0, b);
                            }
                        }
                    }
                    return c;
                };
                return algorithm12;
            }
            exports.name = 'algorithm12';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load, typed) {
                var equalScalar = load(__webpack_require__(11));
                var SparseMatrix = type.SparseMatrix;
                var algorithm11 = function (s, b, callback, inverse) {
                    var avalues = s._values;
                    var aindex = s._index;
                    var aptr = s._ptr;
                    var asize = s._size;
                    var adt = s._datatype;
                    if (!avalues)
                        throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');
                    var rows = asize[0];
                    var columns = asize[1];
                    var dt;
                    var eq = equalScalar;
                    var zero = 0;
                    var cf = callback;
                    if (typeof adt === 'string') {
                        dt = adt;
                        eq = typed.find(equalScalar, [dt, dt]);
                        zero = typed.convert(0, dt);
                        b = typed.convert(b, dt);
                        cf = typed.find(callback, [dt, dt]);
                    }
                    var cvalues = [];
                    var cindex = [];
                    var cptr = [];
                    var c = new SparseMatrix({
                        values: cvalues,
                        index: cindex,
                        ptr: cptr,
                        size: [rows, columns],
                        datatype: dt
                    });
                    for (var j = 0; j < columns; j++) {
                        cptr[j] = cindex.length;
                        for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
                            var i = aindex[k];
                            var v = inverse ? cf(b, avalues[k]) : cf(avalues[k], b);
                            if (!eq(v, zero)) {
                                cindex.push(i);
                                cvalues.push(v);
                            }
                        }
                    }
                    cptr[columns] = cindex.length;
                    return c;
                };
                return algorithm11;
            }
            exports.name = 'algorithm11';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var extend = __webpack_require__(5).extend;
            function factory(type, config, load, typed) {
                var matrix = load(__webpack_require__(0));
                var addScalar = load(__webpack_require__(20));
                var latex = __webpack_require__(4);
                var algorithm01 = load(__webpack_require__(33));
                var algorithm04 = load(__webpack_require__(73));
                var algorithm10 = load(__webpack_require__(36));
                var algorithm13 = load(__webpack_require__(8));
                var algorithm14 = load(__webpack_require__(6));
                var add = typed('add', extend({
                    'Matrix, Matrix': function (x, y) {
                        var c;
                        switch (x.storage()) {
                            case 'sparse':
                                switch (y.storage()) {
                                    case 'sparse':
                                        c = algorithm04(x, y, addScalar);
                                        break;
                                    default:
                                        c = algorithm01(y, x, addScalar, true);
                                        break;
                                }
                                break;
                            default:
                                switch (y.storage()) {
                                    case 'sparse':
                                        c = algorithm01(x, y, addScalar, false);
                                        break;
                                    default:
                                        c = algorithm13(x, y, addScalar);
                                        break;
                                }
                                break;
                        }
                        return c;
                    },
                    'Array, Array': function (x, y) {
                        return add(matrix(x), matrix(y)).valueOf();
                    },
                    'Array, Matrix': function (x, y) {
                        return add(matrix(x), y);
                    },
                    'Matrix, Array': function (x, y) {
                        return add(x, matrix(y));
                    },
                    'Matrix, any': function (x, y) {
                        var c;
                        switch (x.storage()) {
                            case 'sparse':
                                c = algorithm10(x, y, addScalar, false);
                                break;
                            default:
                                c = algorithm14(x, y, addScalar, false);
                                break;
                        }
                        return c;
                    },
                    'any, Matrix': function (x, y) {
                        var c;
                        switch (y.storage()) {
                            case 'sparse':
                                c = algorithm10(y, x, addScalar, true);
                                break;
                            default:
                                c = algorithm14(y, x, addScalar, true);
                                break;
                        }
                        return c;
                    },
                    'Array, any': function (x, y) {
                        return algorithm14(matrix(x), y, addScalar, false).valueOf();
                    },
                    'any, Array': function (x, y) {
                        return algorithm14(matrix(y), x, addScalar, true).valueOf();
                    },
                    'any, any': addScalar,
                    'Array | Matrix | any, Array | Matrix | any, ...any': function (x, y, rest) {
                        var result = add(x, y);
                        for (var i = 0; i < rest.length; i++) {
                            result = add(result, rest[i]);
                        }
                        return result;
                    }
                }, addScalar.signatures));
                add.toTex = {
                    2: '\\left(${args[0]}' + latex.operators['add'] + '${args[1]}\\right)'
                };
                return add;
            }
            exports.name = 'add';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load, typed) {
                var multiplyScalar = load(__webpack_require__(23));
                var divideScalar = typed('divide', {
                    'number, number': function (x, y) {
                        return x / y;
                    },
                    'Complex, Complex': function (x, y) {
                        return x.div(y);
                    },
                    'BigNumber, BigNumber': function (x, y) {
                        return x.div(y);
                    },
                    'Fraction, Fraction': function (x, y) {
                        return x.div(y);
                    },
                    'Unit, number | Fraction | BigNumber': function (x, y) {
                        var res = x.clone();
                        res.value = divideScalar(((res.value === null) ? res._normalize(1) : res.value), y);
                        return res;
                    },
                    'number | Fraction | BigNumber, Unit': function (x, y) {
                        var res = y.pow(-1);
                        res.value = multiplyScalar(((res.value === null) ? res._normalize(1) : res.value), x);
                        return res;
                    },
                    'Unit, Unit': function (x, y) {
                        return x.divide(y);
                    }
                });
                return divideScalar;
            }
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load, typed) {
                var add = typed('add', {
                    'number, number': function (x, y) {
                        return x + y;
                    },
                    'Complex, Complex': function (x, y) {
                        return x.add(y);
                    },
                    'BigNumber, BigNumber': function (x, y) {
                        return x.plus(y);
                    },
                    'Fraction, Fraction': function (x, y) {
                        return x.add(y);
                    },
                    'Unit, Unit': function (x, y) {
                        if (x.value == null)
                            throw new Error('Parameter x contains a unit with undefined value');
                        if (y.value == null)
                            throw new Error('Parameter y contains a unit with undefined value');
                        if (!x.equalBase(y))
                            throw new Error('Units do not match');
                        var res = x.clone();
                        res.value = add(res.value, y.value);
                        res.fixPrefix = false;
                        return res;
                    }
                });
                return add;
            }
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var DimensionError = __webpack_require__(10);
            function factory(type, config, load, typed) {
                var latex = __webpack_require__(4);
                var matrix = load(__webpack_require__(0));
                var addScalar = load(__webpack_require__(20));
                var unaryMinus = load(__webpack_require__(37));
                var algorithm01 = load(__webpack_require__(33));
                var algorithm03 = load(__webpack_require__(15));
                var algorithm05 = load(__webpack_require__(60));
                var algorithm10 = load(__webpack_require__(36));
                var algorithm13 = load(__webpack_require__(8));
                var algorithm14 = load(__webpack_require__(6));
                var subtract = typed('subtract', {
                    'number, number': function (x, y) {
                        return x - y;
                    },
                    'Complex, Complex': function (x, y) {
                        return x.sub(y);
                    },
                    'BigNumber, BigNumber': function (x, y) {
                        return x.minus(y);
                    },
                    'Fraction, Fraction': function (x, y) {
                        return x.sub(y);
                    },
                    'Unit, Unit': function (x, y) {
                        if (x.value == null) {
                            throw new Error('Parameter x contains a unit with undefined value');
                        }
                        if (y.value == null) {
                            throw new Error('Parameter y contains a unit with undefined value');
                        }
                        if (!x.equalBase(y)) {
                            throw new Error('Units do not match');
                        }
                        var res = x.clone();
                        res.value = subtract(res.value, y.value);
                        res.fixPrefix = false;
                        return res;
                    },
                    'Matrix, Matrix': function (x, y) {
                        var xsize = x.size();
                        var ysize = y.size();
                        if (xsize.length !== ysize.length)
                            throw new DimensionError(xsize.length, ysize.length);
                        var c;
                        switch (x.storage()) {
                            case 'sparse':
                                switch (y.storage()) {
                                    case 'sparse':
                                        c = algorithm05(x, y, subtract);
                                        break;
                                    default:
                                        c = algorithm03(y, x, subtract, true);
                                        break;
                                }
                                break;
                            default:
                                switch (y.storage()) {
                                    case 'sparse':
                                        c = algorithm01(x, y, subtract, false);
                                        break;
                                    default:
                                        c = algorithm13(x, y, subtract);
                                        break;
                                }
                                break;
                        }
                        return c;
                    },
                    'Array, Array': function (x, y) {
                        return subtract(matrix(x), matrix(y)).valueOf();
                    },
                    'Array, Matrix': function (x, y) {
                        return subtract(matrix(x), y);
                    },
                    'Matrix, Array': function (x, y) {
                        return subtract(x, matrix(y));
                    },
                    'Matrix, any': function (x, y) {
                        var c;
                        switch (x.storage()) {
                            case 'sparse':
                                c = algorithm10(x, unaryMinus(y), addScalar);
                                break;
                            default:
                                c = algorithm14(x, y, subtract);
                                break;
                        }
                        return c;
                    },
                    'any, Matrix': function (x, y) {
                        var c;
                        switch (y.storage()) {
                            case 'sparse':
                                c = algorithm10(y, x, subtract, true);
                                break;
                            default:
                                c = algorithm14(y, x, subtract, true);
                                break;
                        }
                        return c;
                    },
                    'Array, any': function (x, y) {
                        return algorithm14(matrix(x), y, subtract, false).valueOf();
                    },
                    'any, Array': function (x, y) {
                        return algorithm14(matrix(y), x, subtract, true).valueOf();
                    }
                });
                subtract.toTex = {
                    2: '\\left(${args[0]}' + latex.operators['subtract'] + '${args[1]}\\right)'
                };
                return subtract;
            }
            exports.name = 'subtract';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var clone = __webpack_require__(5).clone;
            var validateIndex = __webpack_require__(2).validateIndex;
            var getSafeProperty = __webpack_require__(13).getSafeProperty;
            var setSafeProperty = __webpack_require__(13).setSafeProperty;
            var DimensionError = __webpack_require__(10);
            function factory(type, config, load, typed) {
                var matrix = load(__webpack_require__(0));
                var subset = typed('subset', {
                    'Array, Index': function (value, index) {
                        var m = matrix(value);
                        var subset = m.subset(index);
                        return index.isScalar()
                            ? subset
                            : subset.valueOf();
                    },
                    'Matrix, Index': function (value, index) {
                        return value.subset(index);
                    },
                    'Object, Index': _getObjectProperty,
                    'string, Index': _getSubstring,
                    'Array, Index, any': function (value, index, replacement) {
                        return matrix(clone(value))
                            .subset(index, replacement, undefined)
                            .valueOf();
                    },
                    'Array, Index, any, any': function (value, index, replacement, defaultValue) {
                        return matrix(clone(value))
                            .subset(index, replacement, defaultValue)
                            .valueOf();
                    },
                    'Matrix, Index, any': function (value, index, replacement) {
                        return value.clone().subset(index, replacement);
                    },
                    'Matrix, Index, any, any': function (value, index, replacement, defaultValue) {
                        return value.clone().subset(index, replacement, defaultValue);
                    },
                    'string, Index, string': _setSubstring,
                    'string, Index, string, string': _setSubstring,
                    'Object, Index, any': _setObjectProperty
                });
                subset.toTex = undefined;
                return subset;
                function _getSubstring(str, index) {
                    if (!type.isIndex(index)) {
                        throw new TypeError('Index expected');
                    }
                    if (index.size().length != 1) {
                        throw new DimensionError(index.size().length, 1);
                    }
                    var strLen = str.length;
                    validateIndex(index.min()[0], strLen);
                    validateIndex(index.max()[0], strLen);
                    var range = index.dimension(0);
                    var substr = '';
                    range.forEach(function (v) {
                        substr += str.charAt(v);
                    });
                    return substr;
                }
                function _setSubstring(str, index, replacement, defaultValue) {
                    if (!index || index.isIndex !== true) {
                        throw new TypeError('Index expected');
                    }
                    if (index.size().length != 1) {
                        throw new DimensionError(index.size().length, 1);
                    }
                    if (defaultValue !== undefined) {
                        if (typeof defaultValue !== 'string' || defaultValue.length !== 1) {
                            throw new TypeError('Single character expected as defaultValue');
                        }
                    }
                    else {
                        defaultValue = ' ';
                    }
                    var range = index.dimension(0);
                    var len = range.size()[0];
                    if (len != replacement.length) {
                        throw new DimensionError(range.size()[0], replacement.length);
                    }
                    var strLen = str.length;
                    validateIndex(index.min()[0]);
                    validateIndex(index.max()[0]);
                    var chars = [];
                    for (var i = 0; i < strLen; i++) {
                        chars[i] = str.charAt(i);
                    }
                    range.forEach(function (v, i) {
                        chars[v] = replacement.charAt(i[0]);
                    });
                    if (chars.length > strLen) {
                        for (i = strLen - 1, len = chars.length; i < len; i++) {
                            if (!chars[i]) {
                                chars[i] = defaultValue;
                            }
                        }
                    }
                    return chars.join('');
                }
            }
            function _getObjectProperty(object, index) {
                if (index.size().length !== 1) {
                    throw new DimensionError(index.size(), 1);
                }
                var key = index.dimension(0);
                if (typeof key !== 'string') {
                    throw new TypeError('String expected as index to retrieve an object property');
                }
                return getSafeProperty(object, key);
            }
            function _setObjectProperty(object, index, replacement) {
                if (index.size().length !== 1) {
                    throw new DimensionError(index.size(), 1);
                }
                var key = index.dimension(0);
                if (typeof key !== 'string') {
                    throw new TypeError('String expected as index to retrieve an object property');
                }
                var updated = clone(object);
                setSafeProperty(updated, key, replacement);
                return updated;
            }
            exports.name = 'subset';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load, typed) {
                var multiplyScalar = typed('multiplyScalar', {
                    'number, number': function (x, y) {
                        return x * y;
                    },
                    'Complex, Complex': function (x, y) {
                        return x.mul(y);
                    },
                    'BigNumber, BigNumber': function (x, y) {
                        return x.times(y);
                    },
                    'Fraction, Fraction': function (x, y) {
                        return x.mul(y);
                    },
                    'number | Fraction | BigNumber | Complex, Unit': function (x, y) {
                        var res = y.clone();
                        res.value = (res.value === null) ? res._normalize(x) : multiplyScalar(res.value, x);
                        return res;
                    },
                    'Unit, number | Fraction | BigNumber | Complex': function (x, y) {
                        var res = x.clone();
                        res.value = (res.value === null) ? res._normalize(y) : multiplyScalar(res.value, y);
                        return res;
                    },
                    'Unit, Unit': function (x, y) {
                        return x.multiply(y);
                    }
                });
                return multiplyScalar;
            }
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var DimensionError = __webpack_require__(10);
            function factory(type, config, load, typed) {
                var equalScalar = load(__webpack_require__(11));
                var SparseMatrix = type.SparseMatrix;
                var algorithm02 = function (denseMatrix, sparseMatrix, callback, inverse) {
                    var adata = denseMatrix._data;
                    var asize = denseMatrix._size;
                    var adt = denseMatrix._datatype;
                    var bvalues = sparseMatrix._values;
                    var bindex = sparseMatrix._index;
                    var bptr = sparseMatrix._ptr;
                    var bsize = sparseMatrix._size;
                    var bdt = sparseMatrix._datatype;
                    if (asize.length !== bsize.length)
                        throw new DimensionError(asize.length, bsize.length);
                    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
                        throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
                    if (!bvalues)
                        throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');
                    var rows = asize[0];
                    var columns = asize[1];
                    var dt;
                    var eq = equalScalar;
                    var zero = 0;
                    var cf = callback;
                    if (typeof adt === 'string' && adt === bdt) {
                        dt = adt;
                        eq = typed.find(equalScalar, [dt, dt]);
                        zero = typed.convert(0, dt);
                        cf = typed.find(callback, [dt, dt]);
                    }
                    var cvalues = [];
                    var cindex = [];
                    var cptr = [];
                    for (var j = 0; j < columns; j++) {
                        cptr[j] = cindex.length;
                        for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
                            var i = bindex[k];
                            var cij = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);
                            if (!eq(cij, zero)) {
                                cindex.push(i);
                                cvalues.push(cij);
                            }
                        }
                    }
                    cptr[columns] = cindex.length;
                    return new SparseMatrix({
                        values: cvalues,
                        index: cindex,
                        ptr: cptr,
                        size: [rows, columns],
                        datatype: dt
                    });
                };
                return algorithm02;
            }
            exports.name = 'algorithm02';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            exports.array = __webpack_require__(2);
            exports['boolean'] = __webpack_require__(174);
            exports['function'] = __webpack_require__(32);
            exports.number = __webpack_require__(3);
            exports.object = __webpack_require__(5);
            exports.string = __webpack_require__(9);
            exports.types = __webpack_require__(59);
            exports.emitter = __webpack_require__(90);
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var DimensionError = __webpack_require__(10);
            function factory(type, config, load, typed) {
                var DenseMatrix = type.DenseMatrix;
                var algorithm07 = function (a, b, callback) {
                    var asize = a._size;
                    var adt = a._datatype;
                    var bsize = b._size;
                    var bdt = b._datatype;
                    if (asize.length !== bsize.length)
                        throw new DimensionError(asize.length, bsize.length);
                    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
                        throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
                    var rows = asize[0];
                    var columns = asize[1];
                    var dt;
                    var zero = 0;
                    var cf = callback;
                    if (typeof adt === 'string' && adt === bdt) {
                        dt = adt;
                        zero = typed.convert(0, dt);
                        cf = typed.find(callback, [dt, dt]);
                    }
                    var i, j;
                    var cdata = [];
                    for (i = 0; i < rows; i++)
                        cdata[i] = [];
                    var c = new DenseMatrix({
                        data: cdata,
                        size: [rows, columns],
                        datatype: dt
                    });
                    var xa = [];
                    var xb = [];
                    var wa = [];
                    var wb = [];
                    for (j = 0; j < columns; j++) {
                        var mark = j + 1;
                        _scatter(a, j, wa, xa, mark);
                        _scatter(b, j, wb, xb, mark);
                        for (i = 0; i < rows; i++) {
                            var va = wa[i] === mark ? xa[i] : zero;
                            var vb = wb[i] === mark ? xb[i] : zero;
                            cdata[i][j] = cf(va, vb);
                        }
                    }
                    return c;
                };
                var _scatter = function (m, j, w, x, mark) {
                    var values = m._values;
                    var index = m._index;
                    var ptr = m._ptr;
                    for (var k = ptr[j], k1 = ptr[j + 1]; k < k1; k++) {
                        var i = index[k];
                        w[i] = mark;
                        x[i] = values[k];
                    }
                };
                return algorithm07;
            }
            exports.name = 'algorithm07';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var clone = __webpack_require__(5).clone;
            var isInteger = __webpack_require__(3).isInteger;
            function factory(type) {
                function Index(ranges) {
                    if (!(this instanceof Index)) {
                        throw new SyntaxError('Constructor must be called with the new operator');
                    }
                    this._dimensions = [];
                    this._isScalar = true;
                    for (var i = 0, ii = arguments.length; i < ii; i++) {
                        var arg = arguments[i];
                        if (type.isRange(arg)) {
                            this._dimensions.push(arg);
                            this._isScalar = false;
                        }
                        else if (Array.isArray(arg) || type.isMatrix(arg)) {
                            var m = _createImmutableMatrix(arg.valueOf());
                            this._dimensions.push(m);
                            var size = m.size();
                            if (size.length !== 1 || size[0] !== 1) {
                                this._isScalar = false;
                            }
                        }
                        else if (typeof arg === 'number') {
                            this._dimensions.push(_createImmutableMatrix([arg]));
                        }
                        else if (typeof arg === 'string') {
                            this._dimensions.push(arg);
                        }
                        else {
                            throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');
                        }
                    }
                }
                Index.prototype.type = 'Index';
                Index.prototype.isIndex = true;
                function _createImmutableMatrix(arg) {
                    for (var i = 0, l = arg.length; i < l; i++) {
                        if (typeof arg[i] !== 'number' || !isInteger(arg[i])) {
                            throw new TypeError('Index parameters must be positive integer numbers');
                        }
                    }
                    return new type.ImmutableDenseMatrix(arg);
                }
                Index.prototype.clone = function () {
                    var index = new Index();
                    index._dimensions = clone(this._dimensions);
                    index._isScalar = this._isScalar;
                    return index;
                };
                Index.create = function (ranges) {
                    var index = new Index();
                    Index.apply(index, ranges);
                    return index;
                };
                Index.prototype.size = function () {
                    var size = [];
                    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
                        var d = this._dimensions[i];
                        size[i] = (typeof d === 'string') ? 1 : d.size()[0];
                    }
                    return size;
                };
                Index.prototype.max = function () {
                    var values = [];
                    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
                        var range = this._dimensions[i];
                        values[i] = (typeof range === 'string') ? range : range.max();
                    }
                    return values;
                };
                Index.prototype.min = function () {
                    var values = [];
                    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
                        var range = this._dimensions[i];
                        values[i] = (typeof range === 'string') ? range : range.min();
                    }
                    return values;
                };
                Index.prototype.forEach = function (callback) {
                    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
                        callback(this._dimensions[i], i, this);
                    }
                };
                Index.prototype.dimension = function (dim) {
                    return this._dimensions[dim] || null;
                };
                Index.prototype.isObjectProperty = function () {
                    return this._dimensions.length === 1 && typeof this._dimensions[0] === 'string';
                };
                Index.prototype.getObjectProperty = function () {
                    return this.isObjectProperty() ? this._dimensions[0] : null;
                };
                Index.prototype.isScalar = function () {
                    return this._isScalar;
                };
                Index.prototype.toArray = function () {
                    var array = [];
                    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
                        var dimension = this._dimensions[i];
                        array.push((typeof dimension === 'string') ? dimension : dimension.toArray());
                    }
                    return array;
                };
                Index.prototype.valueOf = Index.prototype.toArray;
                Index.prototype.toString = function () {
                    var strings = [];
                    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
                        var dimension = this._dimensions[i];
                        if (typeof dimension === 'string') {
                            strings.push(JSON.stringify(dimension));
                        }
                        else {
                            strings.push(dimension.toString());
                        }
                    }
                    return '[' + strings.join(', ') + ']';
                };
                Index.prototype.toJSON = function () {
                    return {
                        mathjs: 'Index',
                        dimensions: this._dimensions
                    };
                };
                Index.fromJSON = function (json) {
                    return Index.create(json.dimensions);
                };
                return Index;
            }
            exports.name = 'Index';
            exports.path = 'type';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var array = __webpack_require__(2);
            function factory(type, config, load, typed) {
                var matrix = load(__webpack_require__(0));
                var size = typed('size', {
                    'Matrix': function (x) {
                        return matrix(x.size());
                    },
                    'Array': array.size,
                    'string': function (x) {
                        return (config.matrix === 'Array') ? [x.length] : matrix([x.length]);
                    },
                    'number | Complex | BigNumber | Unit | boolean | null': function (x) {
                        return (config.matrix === 'Array') ? [] : matrix([]);
                    }
                });
                size.toTex = undefined;
                return size;
            }
            exports.name = 'size';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            function factory(type, config, load, typed) {
                var abs = typed('abs', {
                    'number': Math.abs,
                    'Complex': function (x) {
                        return x.abs();
                    },
                    'BigNumber': function (x) {
                        return x.abs();
                    },
                    'Fraction': function (x) {
                        return x.abs();
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, abs, true);
                    },
                    'Unit': function (x) {
                        return x.abs();
                    }
                });
                abs.toTex = { 1: '\\left|${args[0]}\\right|' };
                return abs;
            }
            exports.name = 'abs';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load, typed) {
                var matrix = load(__webpack_require__(0));
                var equalScalar = load(__webpack_require__(11));
                var algorithm03 = load(__webpack_require__(15));
                var algorithm07 = load(__webpack_require__(26));
                var algorithm12 = load(__webpack_require__(16));
                var algorithm13 = load(__webpack_require__(8));
                var algorithm14 = load(__webpack_require__(6));
                var latex = __webpack_require__(4);
                var equal = typed('equal', {
                    'any, any': function (x, y) {
                        if (x === null) {
                            return y === null;
                        }
                        if (y === null) {
                            return x === null;
                        }
                        if (x === undefined) {
                            return y === undefined;
                        }
                        if (y === undefined) {
                            return x === undefined;
                        }
                        return equalScalar(x, y);
                    },
                    'Matrix, Matrix': function (x, y) {
                        var c;
                        switch (x.storage()) {
                            case 'sparse':
                                switch (y.storage()) {
                                    case 'sparse':
                                        c = algorithm07(x, y, equalScalar);
                                        break;
                                    default:
                                        c = algorithm03(y, x, equalScalar, true);
                                        break;
                                }
                                break;
                            default:
                                switch (y.storage()) {
                                    case 'sparse':
                                        c = algorithm03(x, y, equalScalar, false);
                                        break;
                                    default:
                                        c = algorithm13(x, y, equalScalar);
                                        break;
                                }
                                break;
                        }
                        return c;
                    },
                    'Array, Array': function (x, y) {
                        return equal(matrix(x), matrix(y)).valueOf();
                    },
                    'Array, Matrix': function (x, y) {
                        return equal(matrix(x), y);
                    },
                    'Matrix, Array': function (x, y) {
                        return equal(x, matrix(y));
                    },
                    'Matrix, any': function (x, y) {
                        var c;
                        switch (x.storage()) {
                            case 'sparse':
                                c = algorithm12(x, y, equalScalar, false);
                                break;
                            default:
                                c = algorithm14(x, y, equalScalar, false);
                                break;
                        }
                        return c;
                    },
                    'any, Matrix': function (x, y) {
                        var c;
                        switch (y.storage()) {
                            case 'sparse':
                                c = algorithm12(y, x, equalScalar, true);
                                break;
                            default:
                                c = algorithm14(y, x, equalScalar, true);
                                break;
                        }
                        return c;
                    },
                    'Array, any': function (x, y) {
                        return algorithm14(matrix(x), y, equalScalar, false).valueOf();
                    },
                    'any, Array': function (x, y) {
                        return algorithm14(matrix(y), x, equalScalar, true).valueOf();
                    }
                });
                equal.toTex = {
                    2: '\\left(${args[0]}' + latex.operators['equal'] + '${args[1]}\\right)'
                };
                return equal;
            }
            exports.name = 'equal';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var naturalSort = __webpack_require__(483);
            function factory(type, config, load, typed) {
                var getTypeOf = load(__webpack_require__(76));
                var matrix = load(__webpack_require__(0));
                var compare = load(__webpack_require__(49));
                var compareBooleans = compare.signatures['boolean,boolean'];
                var compareNatural = typed('compareNatural', {
                    'any, any': function (x, y) {
                        var typeX = getTypeOf(x);
                        var typeY = getTypeOf(y);
                        var c;
                        if ((typeX === 'number' || typeX === 'BigNumber' || typeX === 'Fraction') &&
                            (typeY === 'number' || typeY === 'BigNumber' || typeY === 'Fraction')) {
                            c = compare(x, y);
                            if (c.toString() !== '0') {
                                return c > 0 ? 1 : -1;
                            }
                            else {
                                return naturalSort(typeX, typeY);
                            }
                        }
                        if (typeX === 'Array' || typeX === 'Matrix' ||
                            typeY === 'Array' || typeY === 'Matrix') {
                            c = compareMatricesAndArrays(x, y);
                            if (c !== 0) {
                                return c;
                            }
                            else {
                                return naturalSort(typeX, typeY);
                            }
                        }
                        if (typeX !== typeY) {
                            return naturalSort(typeX, typeY);
                        }
                        if (typeX === 'Complex') {
                            return compareComplexNumbers(x, y);
                        }
                        if (typeX === 'Unit') {
                            if (x.equalBase(y)) {
                                return compareNatural(x.value, y.value);
                            }
                            return compareArrays(x.formatUnits(), y.formatUnits());
                        }
                        if (typeX === 'boolean') {
                            return compareBooleans(x, y);
                        }
                        if (typeX === 'string') {
                            return naturalSort(x, y);
                        }
                        if (typeX === 'Object') {
                            return compareObjects(x, y);
                        }
                        if (typeX === 'null') {
                            return 0;
                        }
                        if (typeX === 'undefined') {
                            return 0;
                        }
                        throw new TypeError('Unsupported type of value "' + typeX + '"');
                    }
                });
                compareNatural.toTex = undefined;
                function compareMatricesAndArrays(x, y) {
                    if (type.isSparseMatrix(x) && type.isSparseMatrix(y)) {
                        return compareArrays(x.toJSON().values, y.toJSON().values);
                    }
                    if (type.isSparseMatrix(x)) {
                        return compareMatricesAndArrays(x.toArray(), y);
                    }
                    if (type.isSparseMatrix(y)) {
                        return compareMatricesAndArrays(x, y.toArray());
                    }
                    if (type.isDenseMatrix(x)) {
                        return compareMatricesAndArrays(x.toJSON().data, y);
                    }
                    if (type.isDenseMatrix(y)) {
                        return compareMatricesAndArrays(x, y.toJSON().data);
                    }
                    if (!Array.isArray(x)) {
                        return compareMatricesAndArrays([x], y);
                    }
                    if (!Array.isArray(y)) {
                        return compareMatricesAndArrays(x, [y]);
                    }
                    return compareArrays(x, y);
                }
                function compareArrays(x, y) {
                    for (var i = 0, ii = Math.min(x.length, y.length); i < ii; i++) {
                        var v = compareNatural(x[i], y[i]);
                        if (v !== 0) {
                            return v;
                        }
                    }
                    if (x.length > y.length) {
                        return 1;
                    }
                    if (x.length < y.length) {
                        return -1;
                    }
                    return 0;
                }
                function compareObjects(x, y) {
                    var keysX = Object.keys(x);
                    var keysY = Object.keys(y);
                    keysX.sort(naturalSort);
                    keysY.sort(naturalSort);
                    var c = compareArrays(keysX, keysY);
                    if (c !== 0) {
                        return c;
                    }
                    for (var i = 0; i < keysX.length; i++) {
                        var v = compareNatural(x[keysX[i]], y[keysY[i]]);
                        if (v !== 0) {
                            return v;
                        }
                    }
                    return 0;
                }
                return compareNatural;
            }
            function compareComplexNumbers(x, y) {
                if (x.re > y.re) {
                    return 1;
                }
                if (x.re < y.re) {
                    return -1;
                }
                if (x.im > y.im) {
                    return 1;
                }
                if (x.im < y.im) {
                    return -1;
                }
                return 0;
            }
            exports.name = 'compareNatural';
            exports.factory = factory;
        }),
        (function (module, exports) {
            exports.memoize = function (fn, hasher) {
                return function memoize() {
                    if (typeof memoize.cache !== 'object') {
                        memoize.cache = {};
                    }
                    var args = [];
                    for (var i = 0; i < arguments.length; i++) {
                        args[i] = arguments[i];
                    }
                    var hash = hasher ? hasher(args) : JSON.stringify(args);
                    if (!(hash in memoize.cache)) {
                        return memoize.cache[hash] = fn.apply(fn, args);
                    }
                    return memoize.cache[hash];
                };
            };
            exports.maxArgumentCount = function (fn) {
                return Object.keys(fn.signatures || {})
                    .reduce(function (args, signature) {
                    var count = (signature.match(/,/g) || []).length + 1;
                    return Math.max(args, count);
                }, -1);
            };
            exports.callWithRightArgumentCount = function (fn, args, argCount) {
                return Object.keys(fn.signatures || {})
                    .reduce(function (args, signature) {
                    var count = (signature.match(/,/g) || []).length + 1;
                    return Math.max(args, count);
                }, -1);
            };
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var DimensionError = __webpack_require__(10);
            function factory(type, config, load, typed) {
                var DenseMatrix = type.DenseMatrix;
                var algorithm01 = function (denseMatrix, sparseMatrix, callback, inverse) {
                    var adata = denseMatrix._data;
                    var asize = denseMatrix._size;
                    var adt = denseMatrix._datatype;
                    var bvalues = sparseMatrix._values;
                    var bindex = sparseMatrix._index;
                    var bptr = sparseMatrix._ptr;
                    var bsize = sparseMatrix._size;
                    var bdt = sparseMatrix._datatype;
                    if (asize.length !== bsize.length)
                        throw new DimensionError(asize.length, bsize.length);
                    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
                        throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
                    if (!bvalues)
                        throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');
                    var rows = asize[0];
                    var columns = asize[1];
                    var dt = typeof adt === 'string' && adt === bdt ? adt : undefined;
                    var cf = dt ? typed.find(callback, [dt, dt]) : callback;
                    var i, j;
                    var cdata = [];
                    for (i = 0; i < rows; i++)
                        cdata[i] = [];
                    var x = [];
                    var w = [];
                    for (j = 0; j < columns; j++) {
                        var mark = j + 1;
                        for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
                            i = bindex[k];
                            x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);
                            w[i] = mark;
                        }
                        for (i = 0; i < rows; i++) {
                            if (w[i] === mark) {
                                cdata[i][j] = x[i];
                            }
                            else {
                                cdata[i][j] = adata[i][j];
                            }
                        }
                    }
                    return new DenseMatrix({
                        data: cdata,
                        size: [rows, columns],
                        datatype: dt
                    });
                };
                return algorithm01;
            }
            exports.name = 'algorithm01';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var nearlyEqual = __webpack_require__(3).nearlyEqual;
            var bigNearlyEqual = __webpack_require__(35);
            function factory(type, config, load, typed) {
                var matrix = load(__webpack_require__(0));
                var algorithm03 = load(__webpack_require__(15));
                var algorithm07 = load(__webpack_require__(26));
                var algorithm12 = load(__webpack_require__(16));
                var algorithm13 = load(__webpack_require__(8));
                var algorithm14 = load(__webpack_require__(6));
                var latex = __webpack_require__(4);
                var larger = typed('larger', {
                    'boolean, boolean': function (x, y) {
                        return x > y;
                    },
                    'number, number': function (x, y) {
                        return x > y && !nearlyEqual(x, y, config.epsilon);
                    },
                    'BigNumber, BigNumber': function (x, y) {
                        return x.gt(y) && !bigNearlyEqual(x, y, config.epsilon);
                    },
                    'Fraction, Fraction': function (x, y) {
                        return x.compare(y) === 1;
                    },
                    'Complex, Complex': function () {
                        throw new TypeError('No ordering relation is defined for complex numbers');
                    },
                    'Unit, Unit': function (x, y) {
                        if (!x.equalBase(y)) {
                            throw new Error('Cannot compare units with different base');
                        }
                        return larger(x.value, y.value);
                    },
                    'string, string': function (x, y) {
                        return x > y;
                    },
                    'Matrix, Matrix': function (x, y) {
                        var c;
                        switch (x.storage()) {
                            case 'sparse':
                                switch (y.storage()) {
                                    case 'sparse':
                                        c = algorithm07(x, y, larger);
                                        break;
                                    default:
                                        c = algorithm03(y, x, larger, true);
                                        break;
                                }
                                break;
                            default:
                                switch (y.storage()) {
                                    case 'sparse':
                                        c = algorithm03(x, y, larger, false);
                                        break;
                                    default:
                                        c = algorithm13(x, y, larger);
                                        break;
                                }
                                break;
                        }
                        return c;
                    },
                    'Array, Array': function (x, y) {
                        return larger(matrix(x), matrix(y)).valueOf();
                    },
                    'Array, Matrix': function (x, y) {
                        return larger(matrix(x), y);
                    },
                    'Matrix, Array': function (x, y) {
                        return larger(x, matrix(y));
                    },
                    'Matrix, any': function (x, y) {
                        var c;
                        switch (x.storage()) {
                            case 'sparse':
                                c = algorithm12(x, y, larger, false);
                                break;
                            default:
                                c = algorithm14(x, y, larger, false);
                                break;
                        }
                        return c;
                    },
                    'any, Matrix': function (x, y) {
                        var c;
                        switch (y.storage()) {
                            case 'sparse':
                                c = algorithm12(y, x, larger, true);
                                break;
                            default:
                                c = algorithm14(y, x, larger, true);
                                break;
                        }
                        return c;
                    },
                    'Array, any': function (x, y) {
                        return algorithm14(matrix(x), y, larger, false).valueOf();
                    },
                    'any, Array': function (x, y) {
                        return algorithm14(matrix(y), x, larger, true).valueOf();
                    }
                });
                larger.toTex = {
                    2: '\\left(${args[0]}' + latex.operators['larger'] + '${args[1]}\\right)'
                };
                return larger;
            }
            exports.name = 'larger';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            module.exports = function nearlyEqual(x, y, epsilon) {
                if (epsilon == null) {
                    return x.eq(y);
                }
                if (x.eq(y)) {
                    return true;
                }
                if (x.isNaN() || y.isNaN()) {
                    return false;
                }
                if (x.isFinite() && y.isFinite()) {
                    var diff = x.minus(y).abs();
                    if (diff.isZero()) {
                        return true;
                    }
                    else {
                        var max = x.constructor.max(x.abs(), y.abs());
                        return diff.lte(max.times(epsilon));
                    }
                }
                return false;
            };
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load, typed) {
                var DenseMatrix = type.DenseMatrix;
                var algorithm10 = function (s, b, callback, inverse) {
                    var avalues = s._values;
                    var aindex = s._index;
                    var aptr = s._ptr;
                    var asize = s._size;
                    var adt = s._datatype;
                    if (!avalues)
                        throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');
                    var rows = asize[0];
                    var columns = asize[1];
                    var dt;
                    var cf = callback;
                    if (typeof adt === 'string') {
                        dt = adt;
                        b = typed.convert(b, dt);
                        cf = typed.find(callback, [dt, dt]);
                    }
                    var cdata = [];
                    var c = new DenseMatrix({
                        data: cdata,
                        size: [rows, columns],
                        datatype: dt
                    });
                    var x = [];
                    var w = [];
                    for (var j = 0; j < columns; j++) {
                        var mark = j + 1;
                        for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
                            var r = aindex[k];
                            x[r] = avalues[k];
                            w[r] = mark;
                        }
                        for (var i = 0; i < rows; i++) {
                            if (j === 0) {
                                cdata[i] = [];
                            }
                            if (w[i] === mark) {
                                cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);
                            }
                            else {
                                cdata[i][j] = b;
                            }
                        }
                    }
                    return c;
                };
                return algorithm10;
            }
            exports.name = 'algorithm10';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            function factory(type, config, load, typed) {
                var latex = __webpack_require__(4);
                var unaryMinus = typed('unaryMinus', {
                    'number': function (x) {
                        return -x;
                    },
                    'Complex': function (x) {
                        return x.neg();
                    },
                    'BigNumber': function (x) {
                        return x.neg();
                    },
                    'Fraction': function (x) {
                        return x.neg();
                    },
                    'Unit': function (x) {
                        var res = x.clone();
                        res.value = unaryMinus(x.value);
                        return res;
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, unaryMinus, true);
                    }
                });
                unaryMinus.toTex = {
                    1: latex.operators['unaryMinus'] + '\\left(${args[0]}\\right)'
                };
                return unaryMinus;
            }
            exports.name = 'unaryMinus';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var isInteger = __webpack_require__(3).isInteger;
            var resize = __webpack_require__(2).resize;
            function factory(type, config, load, typed) {
                var matrix = load(__webpack_require__(0));
                var zeros = typed('zeros', {
                    '': function () {
                        return (config.matrix === 'Array')
                            ? _zeros([])
                            : _zeros([], 'default');
                    },
                    '...number | BigNumber | string': function (size) {
                        var last = size[size.length - 1];
                        if (typeof last === 'string') {
                            var format = size.pop();
                            return _zeros(size, format);
                        }
                        else if (config.matrix === 'Array') {
                            return _zeros(size);
                        }
                        else {
                            return _zeros(size, 'default');
                        }
                    },
                    'Array': _zeros,
                    'Matrix': function (size) {
                        var format = size.storage();
                        return _zeros(size.valueOf(), format);
                    },
                    'Array | Matrix, string': function (size, format) {
                        return _zeros(size.valueOf(), format);
                    }
                });
                zeros.toTex = undefined;
                return zeros;
                function _zeros(size, format) {
                    var hasBigNumbers = _normalize(size);
                    var defaultValue = hasBigNumbers ? new type.BigNumber(0) : 0;
                    _validate(size);
                    if (format) {
                        var m = matrix(format);
                        if (size.length > 0) {
                            return m.resize(size, defaultValue);
                        }
                        return m;
                    }
                    else {
                        var arr = [];
                        if (size.length > 0) {
                            return resize(arr, size, defaultValue);
                        }
                        return arr;
                    }
                }
                function _normalize(size) {
                    var hasBigNumbers = false;
                    size.forEach(function (value, index, arr) {
                        if (type.isBigNumber(value)) {
                            hasBigNumbers = true;
                            arr[index] = value.toNumber();
                        }
                    });
                    return hasBigNumbers;
                }
                function _validate(size) {
                    size.forEach(function (value) {
                        if (typeof value !== 'number' || !isInteger(value) || value < 0) {
                            throw new Error('Parameters in function zeros must be positive integers');
                        }
                    });
                }
            }
            exports.name = 'zeros';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var ArgumentsError = __webpack_require__(50);
            var deepMap = __webpack_require__(1);
            function factory(type, config, load, typed) {
                var AccessorNode = load(__webpack_require__(102));
                var ArrayNode = load(__webpack_require__(80));
                var AssignmentNode = load(__webpack_require__(104));
                var BlockNode = load(__webpack_require__(105));
                var ConditionalNode = load(__webpack_require__(106));
                var ConstantNode = load(__webpack_require__(53));
                var FunctionAssignmentNode = load(__webpack_require__(107));
                var IndexNode = load(__webpack_require__(78));
                var ObjectNode = load(__webpack_require__(109));
                var OperatorNode = load(__webpack_require__(62));
                var ParenthesisNode = load(__webpack_require__(63));
                var FunctionNode = load(__webpack_require__(54));
                var RangeNode = load(__webpack_require__(79));
                var SymbolNode = load(__webpack_require__(40));
                function parse(expr, options) {
                    if (arguments.length != 1 && arguments.length != 2) {
                        throw new ArgumentsError('parse', arguments.length, 1, 2);
                    }
                    extra_nodes = (options && options.nodes) ? options.nodes : {};
                    if (typeof expr === 'string') {
                        expression = expr;
                        return parseStart();
                    }
                    else if (Array.isArray(expr) || expr instanceof type.Matrix) {
                        return deepMap(expr, function (elem) {
                            if (typeof elem !== 'string')
                                throw new TypeError('String expected');
                            expression = elem;
                            return parseStart();
                        });
                    }
                    else {
                        throw new TypeError('String or matrix expected');
                    }
                }
                var TOKENTYPE = {
                    NULL: 0,
                    DELIMITER: 1,
                    NUMBER: 2,
                    SYMBOL: 3,
                    UNKNOWN: 4
                };
                var DELIMITERS = {
                    ',': true,
                    '(': true,
                    ')': true,
                    '[': true,
                    ']': true,
                    '{': true,
                    '}': true,
                    '\"': true,
                    ';': true,
                    '+': true,
                    '-': true,
                    '*': true,
                    '.*': true,
                    '/': true,
                    './': true,
                    '%': true,
                    '^': true,
                    '.^': true,
                    '~': true,
                    '!': true,
                    '&': true,
                    '|': true,
                    '^|': true,
                    '\'': true,
                    '=': true,
                    ':': true,
                    '?': true,
                    '==': true,
                    '!=': true,
                    '<': true,
                    '>': true,
                    '<=': true,
                    '>=': true,
                    '<<': true,
                    '>>': true,
                    '>>>': true
                };
                var NAMED_DELIMITERS = {
                    'mod': true,
                    'to': true,
                    'in': true,
                    'and': true,
                    'xor': true,
                    'or': true,
                    'not': true
                };
                var extra_nodes = {};
                var expression = '';
                var comment = '';
                var index = 0;
                var c = '';
                var token = '';
                var token_type = TOKENTYPE.NULL;
                var nesting_level = 0;
                var conditional_level = null;
                function first() {
                    index = 0;
                    c = expression.charAt(0);
                    nesting_level = 0;
                    conditional_level = null;
                }
                function next() {
                    index++;
                    c = expression.charAt(index);
                }
                function prevPreview() {
                    return expression.charAt(index - 1);
                }
                function nextPreview() {
                    return expression.charAt(index + 1);
                }
                function nextNextPreview() {
                    return expression.charAt(index + 2);
                }
                function getToken() {
                    token_type = TOKENTYPE.NULL;
                    token = '';
                    comment = '';
                    while (parse.isWhitespace(c, nesting_level)) {
                        next();
                    }
                    if (c == '#') {
                        while (c != '\n' && c != '') {
                            comment += c;
                            next();
                        }
                    }
                    if (c == '') {
                        token_type = TOKENTYPE.DELIMITER;
                        return;
                    }
                    if (c == '\n' && !nesting_level) {
                        token_type = TOKENTYPE.DELIMITER;
                        token = c;
                        next();
                        return;
                    }
                    var c2 = c + nextPreview();
                    var c3 = c2 + nextNextPreview();
                    if (c3.length == 3 && DELIMITERS[c3]) {
                        token_type = TOKENTYPE.DELIMITER;
                        token = c3;
                        next();
                        next();
                        next();
                        return;
                    }
                    if (c2.length == 2 && DELIMITERS[c2]) {
                        token_type = TOKENTYPE.DELIMITER;
                        token = c2;
                        next();
                        next();
                        return;
                    }
                    if (DELIMITERS[c]) {
                        token_type = TOKENTYPE.DELIMITER;
                        token = c;
                        next();
                        return;
                    }
                    if (parse.isDigitDot(c)) {
                        token_type = TOKENTYPE.NUMBER;
                        if (c == '.') {
                            token += c;
                            next();
                            if (!parse.isDigit(c)) {
                                token_type = TOKENTYPE.DELIMITER;
                            }
                        }
                        else {
                            while (parse.isDigit(c)) {
                                token += c;
                                next();
                            }
                            if (parse.isDecimalMark(c, nextPreview())) {
                                token += c;
                                next();
                            }
                        }
                        while (parse.isDigit(c)) {
                            token += c;
                            next();
                        }
                        c2 = nextPreview();
                        if (c == 'E' || c == 'e') {
                            if (parse.isDigit(c2) || c2 == '-' || c2 == '+') {
                                token += c;
                                next();
                                if (c == '+' || c == '-') {
                                    token += c;
                                    next();
                                }
                                if (!parse.isDigit(c)) {
                                    throw createSyntaxError('Digit expected, got "' + c + '"');
                                }
                                while (parse.isDigit(c)) {
                                    token += c;
                                    next();
                                }
                                if (parse.isDecimalMark(c, nextPreview())) {
                                    throw createSyntaxError('Digit expected, got "' + c + '"');
                                }
                            }
                            else if (c2 == '.') {
                                next();
                                throw createSyntaxError('Digit expected, got "' + c + '"');
                            }
                        }
                        return;
                    }
                    if (parse.isAlpha(c, prevPreview(), nextPreview())) {
                        while (parse.isAlpha(c, prevPreview(), nextPreview()) || parse.isDigit(c)) {
                            token += c;
                            next();
                        }
                        if (NAMED_DELIMITERS.hasOwnProperty(token)) {
                            token_type = TOKENTYPE.DELIMITER;
                        }
                        else {
                            token_type = TOKENTYPE.SYMBOL;
                        }
                        return;
                    }
                    token_type = TOKENTYPE.UNKNOWN;
                    while (c != '') {
                        token += c;
                        next();
                    }
                    throw createSyntaxError('Syntax error in part "' + token + '"');
                }
                function getTokenSkipNewline() {
                    do {
                        getToken();
                    } while (token == '\n');
                }
                function openParams() {
                    nesting_level++;
                }
                function closeParams() {
                    nesting_level--;
                }
                parse.isAlpha = function isAlpha(c, cPrev, cNext) {
                    return parse.isValidLatinOrGreek(c)
                        || parse.isValidMathSymbol(c, cNext)
                        || parse.isValidMathSymbol(cPrev, c);
                };
                parse.isValidLatinOrGreek = function isValidLatinOrGreek(c) {
                    return /^[a-zA-Z_$\u00C0-\u02AF\u0370-\u03FF\u2100-\u214F]$/.test(c);
                };
                parse.isValidMathSymbol = function isValidMathSymbol(high, low) {
                    return /^[\uD835]$/.test(high) &&
                        /^[\uDC00-\uDFFF]$/.test(low) &&
                        /^[^\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]$/.test(low);
                };
                parse.isWhitespace = function isWhitespace(c, nestingLevel) {
                    return c == ' ' || c == '\t' || (c == '\n' && nestingLevel > 0);
                };
                parse.isDecimalMark = function isDecimalMark(c, cNext) {
                    return c == '.' && cNext !== '/' && cNext !== '*' && cNext !== '^';
                };
                parse.isDigitDot = function isDigitDot(c) {
                    return ((c >= '0' && c <= '9') || c == '.');
                };
                parse.isDigit = function isDigit(c) {
                    return (c >= '0' && c <= '9');
                };
                function parseStart() {
                    first();
                    getToken();
                    var node = parseBlock();
                    if (token != '') {
                        if (token_type == TOKENTYPE.DELIMITER) {
                            throw createError('Unexpected operator ' + token);
                        }
                        else {
                            throw createSyntaxError('Unexpected part "' + token + '"');
                        }
                    }
                    return node;
                }
                function parseBlock() {
                    var node;
                    var blocks = [];
                    var visible;
                    if (token != '' && token != '\n' && token != ';') {
                        node = parseAssignment();
                        node.comment = comment;
                    }
                    while (token == '\n' || token == ';') {
                        if (blocks.length == 0 && node) {
                            visible = (token != ';');
                            blocks.push({
                                node: node,
                                visible: visible
                            });
                        }
                        getToken();
                        if (token != '\n' && token != ';' && token != '') {
                            node = parseAssignment();
                            node.comment = comment;
                            visible = (token != ';');
                            blocks.push({
                                node: node,
                                visible: visible
                            });
                        }
                    }
                    if (blocks.length > 0) {
                        return new BlockNode(blocks);
                    }
                    else {
                        if (!node) {
                            node = new ConstantNode('undefined', 'undefined');
                            node.comment = comment;
                        }
                        return node;
                    }
                }
                function parseAssignment() {
                    var name, args, value, valid;
                    var node = parseConditional();
                    if (token == '=') {
                        if (type.isSymbolNode(node)) {
                            name = node.name;
                            getTokenSkipNewline();
                            value = parseAssignment();
                            return new AssignmentNode(new SymbolNode(name), value);
                        }
                        else if (type.isAccessorNode(node)) {
                            getTokenSkipNewline();
                            value = parseAssignment();
                            return new AssignmentNode(node.object, node.index, value);
                        }
                        else if (type.isFunctionNode(node)) {
                            valid = true;
                            args = [];
                            name = node.name;
                            node.args.forEach(function (arg, index) {
                                if (type.isSymbolNode(arg)) {
                                    args[index] = arg.name;
                                }
                                else {
                                    valid = false;
                                }
                            });
                            if (valid) {
                                getTokenSkipNewline();
                                value = parseAssignment();
                                return new FunctionAssignmentNode(name, args, value);
                            }
                        }
                        throw createSyntaxError('Invalid left hand side of assignment operator =');
                    }
                    return node;
                }
                function parseConditional() {
                    var node = parseLogicalOr();
                    while (token == '?') {
                        var prev = conditional_level;
                        conditional_level = nesting_level;
                        getTokenSkipNewline();
                        var condition = node;
                        var trueExpr = parseAssignment();
                        if (token != ':')
                            throw createSyntaxError('False part of conditional expression expected');
                        conditional_level = null;
                        getTokenSkipNewline();
                        var falseExpr = parseAssignment();
                        node = new ConditionalNode(condition, trueExpr, falseExpr);
                        conditional_level = prev;
                    }
                    return node;
                }
                function parseLogicalOr() {
                    var node = parseLogicalXor();
                    while (token == 'or') {
                        getTokenSkipNewline();
                        node = new OperatorNode('or', 'or', [node, parseLogicalXor()]);
                    }
                    return node;
                }
                function parseLogicalXor() {
                    var node = parseLogicalAnd();
                    while (token == 'xor') {
                        getTokenSkipNewline();
                        node = new OperatorNode('xor', 'xor', [node, parseLogicalAnd()]);
                    }
                    return node;
                }
                function parseLogicalAnd() {
                    var node = parseBitwiseOr();
                    while (token == 'and') {
                        getTokenSkipNewline();
                        node = new OperatorNode('and', 'and', [node, parseBitwiseOr()]);
                    }
                    return node;
                }
                function parseBitwiseOr() {
                    var node = parseBitwiseXor();
                    while (token == '|') {
                        getTokenSkipNewline();
                        node = new OperatorNode('|', 'bitOr', [node, parseBitwiseXor()]);
                    }
                    return node;
                }
                function parseBitwiseXor() {
                    var node = parseBitwiseAnd();
                    while (token == '^|') {
                        getTokenSkipNewline();
                        node = new OperatorNode('^|', 'bitXor', [node, parseBitwiseAnd()]);
                    }
                    return node;
                }
                function parseBitwiseAnd() {
                    var node = parseRelational();
                    while (token == '&') {
                        getTokenSkipNewline();
                        node = new OperatorNode('&', 'bitAnd', [node, parseRelational()]);
                    }
                    return node;
                }
                function parseRelational() {
                    var node, operators, name, fn, params;
                    node = parseShift();
                    operators = {
                        '==': 'equal',
                        '!=': 'unequal',
                        '<': 'smaller',
                        '>': 'larger',
                        '<=': 'smallerEq',
                        '>=': 'largerEq'
                    };
                    while (operators.hasOwnProperty(token)) {
                        name = token;
                        fn = operators[name];
                        getTokenSkipNewline();
                        params = [node, parseShift()];
                        node = new OperatorNode(name, fn, params);
                    }
                    return node;
                }
                function parseShift() {
                    var node, operators, name, fn, params;
                    node = parseConversion();
                    operators = {
                        '<<': 'leftShift',
                        '>>': 'rightArithShift',
                        '>>>': 'rightLogShift'
                    };
                    while (operators.hasOwnProperty(token)) {
                        name = token;
                        fn = operators[name];
                        getTokenSkipNewline();
                        params = [node, parseConversion()];
                        node = new OperatorNode(name, fn, params);
                    }
                    return node;
                }
                function parseConversion() {
                    var node, operators, name, fn, params;
                    node = parseRange();
                    operators = {
                        'to': 'to',
                        'in': 'to'
                    };
                    while (operators.hasOwnProperty(token)) {
                        name = token;
                        fn = operators[name];
                        getTokenSkipNewline();
                        if (name === 'in' && token === '') {
                            node = new OperatorNode('*', 'multiply', [node, new SymbolNode('in')], true);
                        }
                        else {
                            params = [node, parseRange()];
                            node = new OperatorNode(name, fn, params);
                        }
                    }
                    return node;
                }
                function parseRange() {
                    var node, params = [];
                    if (token == ':') {
                        node = new ConstantNode('1', 'number');
                    }
                    else {
                        node = parseAddSubtract();
                    }
                    if (token == ':' && (conditional_level !== nesting_level)) {
                        params.push(node);
                        while (token == ':' && params.length < 3) {
                            getTokenSkipNewline();
                            if (token == ')' || token == ']' || token == ',' || token == '') {
                                params.push(new SymbolNode('end'));
                            }
                            else {
                                params.push(parseAddSubtract());
                            }
                        }
                        if (params.length == 3) {
                            node = new RangeNode(params[0], params[2], params[1]);
                        }
                        else {
                            node = new RangeNode(params[0], params[1]);
                        }
                    }
                    return node;
                }
                function parseAddSubtract() {
                    var node, operators, name, fn, params;
                    node = parseMultiplyDivide();
                    operators = {
                        '+': 'add',
                        '-': 'subtract'
                    };
                    while (operators.hasOwnProperty(token)) {
                        name = token;
                        fn = operators[name];
                        getTokenSkipNewline();
                        params = [node, parseMultiplyDivide()];
                        node = new OperatorNode(name, fn, params);
                    }
                    return node;
                }
                function parseMultiplyDivide() {
                    var node, last, operators, name, fn;
                    node = parseUnary();
                    last = node;
                    operators = {
                        '*': 'multiply',
                        '.*': 'dotMultiply',
                        '/': 'divide',
                        './': 'dotDivide',
                        '%': 'mod',
                        'mod': 'mod'
                    };
                    while (true) {
                        if (operators.hasOwnProperty(token)) {
                            name = token;
                            fn = operators[name];
                            getTokenSkipNewline();
                            last = parseUnary();
                            node = new OperatorNode(name, fn, [node, last]);
                        }
                        else if ((token_type === TOKENTYPE.SYMBOL) ||
                            (token === 'in' && type.isConstantNode(node)) ||
                            (token_type === TOKENTYPE.NUMBER &&
                                !type.isConstantNode(last) &&
                                (!type.isOperatorNode(last) || last.op === '!')) ||
                            (token === '(')) {
                            last = parseUnary();
                            node = new OperatorNode('*', 'multiply', [node, last], true);
                        }
                        else {
                            break;
                        }
                    }
                    return node;
                }
                function parseUnary() {
                    var name, params, fn;
                    var operators = {
                        '-': 'unaryMinus',
                        '+': 'unaryPlus',
                        '~': 'bitNot',
                        'not': 'not'
                    };
                    if (operators.hasOwnProperty(token)) {
                        fn = operators[token];
                        name = token;
                        getTokenSkipNewline();
                        params = [parseUnary()];
                        return new OperatorNode(name, fn, params);
                    }
                    return parsePow();
                }
                function parsePow() {
                    var node, name, fn, params;
                    node = parseLeftHandOperators();
                    if (token == '^' || token == '.^') {
                        name = token;
                        fn = (name == '^') ? 'pow' : 'dotPow';
                        getTokenSkipNewline();
                        params = [node, parseUnary()];
                        node = new OperatorNode(name, fn, params);
                    }
                    return node;
                }
                function parseLeftHandOperators() {
                    var node, operators, name, fn, params;
                    node = parseCustomNodes();
                    operators = {
                        '!': 'factorial',
                        '\'': 'transpose'
                    };
                    while (operators.hasOwnProperty(token)) {
                        name = token;
                        fn = operators[name];
                        getToken();
                        params = [node];
                        node = new OperatorNode(name, fn, params);
                        node = parseAccessors(node);
                    }
                    return node;
                }
                function parseCustomNodes() {
                    var params = [];
                    if (token_type == TOKENTYPE.SYMBOL && extra_nodes.hasOwnProperty(token)) {
                        var CustomNode = extra_nodes[token];
                        getToken();
                        if (token == '(') {
                            params = [];
                            openParams();
                            getToken();
                            if (token != ')') {
                                params.push(parseAssignment());
                                while (token == ',') {
                                    getToken();
                                    params.push(parseAssignment());
                                }
                            }
                            if (token != ')') {
                                throw createSyntaxError('Parenthesis ) expected');
                            }
                            closeParams();
                            getToken();
                        }
                        return new CustomNode(params);
                    }
                    return parseSymbol();
                }
                function parseSymbol() {
                    var node, name;
                    if (token_type == TOKENTYPE.SYMBOL ||
                        (token_type == TOKENTYPE.DELIMITER && token in NAMED_DELIMITERS)) {
                        name = token;
                        getToken();
                        node = new SymbolNode(name);
                        node = parseAccessors(node);
                        return node;
                    }
                    return parseString();
                }
                function parseAccessors(node, types) {
                    var params;
                    while ((token === '(' || token === '[' || token === '.') &&
                        (!types || types.indexOf(token) !== -1)) {
                        params = [];
                        if (token === '(') {
                            if (type.isSymbolNode(node) || type.isAccessorNode(node) || type.isFunctionNode(node)) {
                                openParams();
                                getToken();
                                if (token !== ')') {
                                    params.push(parseAssignment());
                                    while (token === ',') {
                                        getToken();
                                        params.push(parseAssignment());
                                    }
                                }
                                if (token !== ')') {
                                    throw createSyntaxError('Parenthesis ) expected');
                                }
                                closeParams();
                                getToken();
                                node = new FunctionNode(node, params);
                            }
                            else {
                                return node;
                            }
                        }
                        else if (token === '[') {
                            openParams();
                            getToken();
                            if (token !== ']') {
                                params.push(parseAssignment());
                                while (token === ',') {
                                    getToken();
                                    params.push(parseAssignment());
                                }
                            }
                            if (token !== ']') {
                                throw createSyntaxError('Parenthesis ] expected');
                            }
                            closeParams();
                            getToken();
                            node = new AccessorNode(node, new IndexNode(params));
                        }
                        else {
                            getToken();
                            if (token_type !== TOKENTYPE.SYMBOL) {
                                throw createSyntaxError('Property name expected after dot');
                            }
                            params.push(new ConstantNode(token));
                            getToken();
                            var dotNotation = true;
                            node = new AccessorNode(node, new IndexNode(params, dotNotation));
                        }
                    }
                    return node;
                }
                function parseString() {
                    var node, str;
                    if (token == '"') {
                        str = parseStringToken();
                        node = new ConstantNode(str, 'string');
                        node = parseAccessors(node);
                        return node;
                    }
                    return parseMatrix();
                }
                function parseStringToken() {
                    var str = '';
                    while (c != '' && c != '\"') {
                        if (c == '\\') {
                            str += c;
                            next();
                        }
                        str += c;
                        next();
                    }
                    getToken();
                    if (token != '"') {
                        throw createSyntaxError('End of string " expected');
                    }
                    getToken();
                    return str;
                }
                function parseMatrix() {
                    var array, params, rows, cols;
                    if (token == '[') {
                        openParams();
                        getToken();
                        if (token != ']') {
                            var row = parseRow();
                            if (token == ';') {
                                rows = 1;
                                params = [row];
                                while (token == ';') {
                                    getToken();
                                    params[rows] = parseRow();
                                    rows++;
                                }
                                if (token != ']') {
                                    throw createSyntaxError('End of matrix ] expected');
                                }
                                closeParams();
                                getToken();
                                cols = params[0].items.length;
                                for (var r = 1; r < rows; r++) {
                                    if (params[r].items.length != cols) {
                                        throw createError('Column dimensions mismatch ' +
                                            '(' + params[r].items.length + ' != ' + cols + ')');
                                    }
                                }
                                array = new ArrayNode(params);
                            }
                            else {
                                if (token != ']') {
                                    throw createSyntaxError('End of matrix ] expected');
                                }
                                closeParams();
                                getToken();
                                array = row;
                            }
                        }
                        else {
                            closeParams();
                            getToken();
                            array = new ArrayNode([]);
                        }
                        return parseAccessors(array);
                    }
                    return parseObject();
                }
                function parseRow() {
                    var params = [parseAssignment()];
                    var len = 1;
                    while (token == ',') {
                        getToken();
                        params[len] = parseAssignment();
                        len++;
                    }
                    return new ArrayNode(params);
                }
                function parseObject() {
                    if (token == '{') {
                        var key;
                        var properties = {};
                        do {
                            getToken();
                            if (token != '}') {
                                if (token == '"') {
                                    key = parseStringToken();
                                }
                                else if (token_type == TOKENTYPE.SYMBOL) {
                                    key = token;
                                    getToken();
                                }
                                else {
                                    throw createSyntaxError('Symbol or string expected as object key');
                                }
                                if (token != ':') {
                                    throw createSyntaxError('Colon : expected after object key');
                                }
                                getToken();
                                properties[key] = parseAssignment();
                            }
                        } while (token == ',');
                        if (token != '}') {
                            throw createSyntaxError('Comma , or bracket } expected after object value');
                        }
                        getToken();
                        var node = new ObjectNode(properties);
                        node = parseAccessors(node);
                        return node;
                    }
                    return parseNumber();
                }
                function parseNumber() {
                    var number;
                    if (token_type == TOKENTYPE.NUMBER) {
                        number = token;
                        getToken();
                        return new ConstantNode(number, 'number');
                    }
                    return parseParentheses();
                }
                function parseParentheses() {
                    var node;
                    if (token == '(') {
                        openParams();
                        getToken();
                        node = parseAssignment();
                        if (token != ')') {
                            throw createSyntaxError('Parenthesis ) expected');
                        }
                        closeParams();
                        getToken();
                        node = new ParenthesisNode(node);
                        node = parseAccessors(node);
                        return node;
                    }
                    return parseEnd();
                }
                function parseEnd() {
                    if (token == '') {
                        throw createSyntaxError('Unexpected end of expression');
                    }
                    else if (token === "'") {
                        throw createSyntaxError('Value expected. Note: strings must be enclosed by double quotes');
                    }
                    else {
                        throw createSyntaxError('Value expected');
                    }
                }
                function col() {
                    return index - token.length + 1;
                }
                function createSyntaxError(message) {
                    var c = col();
                    var error = new SyntaxError(message + ' (char ' + c + ')');
                    error['char'] = c;
                    return error;
                }
                function createError(message) {
                    var c = col();
                    var error = new SyntaxError(message + ' (char ' + c + ')');
                    error['char'] = c;
                    return error;
                }
                return parse;
            }
            exports.name = 'parse';
            exports.path = 'expression';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var latex = __webpack_require__(4);
            var stringify = __webpack_require__(9).stringify;
            var escape = __webpack_require__(9).escape;
            var hasOwnProperty = __webpack_require__(5).hasOwnProperty;
            var getSafeProperty = __webpack_require__(13).getSafeProperty;
            function factory(type, config, load, typed, math) {
                var register = load(__webpack_require__(7)).register;
                var compile = load(__webpack_require__(7)).compile;
                var Node = load(__webpack_require__(14));
                function isValuelessUnit(name) {
                    return type.Unit ? type.Unit.isValuelessUnit(name) : false;
                }
                function SymbolNode(name) {
                    if (!(this instanceof SymbolNode)) {
                        throw new SyntaxError('Constructor must be called with the new operator');
                    }
                    if (typeof name !== 'string')
                        throw new TypeError('String expected for parameter "name"');
                    this.name = name;
                }
                SymbolNode.prototype = new Node();
                SymbolNode.prototype.type = 'SymbolNode';
                SymbolNode.prototype.isSymbolNode = true;
                function compileSymbolNode(node, defs, args) {
                    if (!(node instanceof SymbolNode)) {
                        throw new TypeError('No valid SymbolNode');
                    }
                    defs['undef'] = undef;
                    defs['Unit'] = type.Unit;
                    defs.getSafeProperty = getSafeProperty;
                    defs.hasOwnProperty = hasOwnProperty;
                    var jsName = stringify(node.name);
                    if (hasOwnProperty(args, node.name)) {
                        return args[node.name];
                    }
                    else if (node.name in defs.math) {
                        return '(' + jsName + ' in scope ' +
                            '? getSafeProperty(scope, ' + jsName + ') ' +
                            ': getSafeProperty(math, ' + jsName + '))';
                    }
                    else {
                        return '(' +
                            jsName + ' in scope ' +
                            '? getSafeProperty(scope, ' + jsName + ') ' +
                            ': ' + (isValuelessUnit(node.name)
                            ? 'new Unit(null, ' + jsName + ')'
                            : 'undef(' + jsName + ')') +
                            ')';
                    }
                }
                register(SymbolNode.prototype.type, compileSymbolNode);
                SymbolNode.prototype.forEach = function (callback) {
                };
                SymbolNode.prototype.map = function (callback) {
                    return this.clone();
                };
                function undef(name) {
                    throw new Error('Undefined symbol ' + name);
                }
                SymbolNode.prototype.clone = function () {
                    return new SymbolNode(this.name);
                };
                SymbolNode.prototype._toString = function (options) {
                    return this.name;
                };
                SymbolNode.prototype.toHTML = function (options) {
                    var name = escape(this.name);
                    if (name == "true" || name == "false") {
                        return '<span class="math-symbol math-boolean">' + name + '</span>';
                    }
                    else if (name == "i") {
                        return '<span class="math-symbol math-imaginary-symbol">' + name + '</span>';
                    }
                    else if (name == "Infinity") {
                        return '<span class="math-symbol math-infinity-symbol">' + name + '</span>';
                    }
                    else if (name == "NaN") {
                        return '<span class="math-symbol math-nan-symbol">' + name + '</span>';
                    }
                    else if (name == "null") {
                        return '<span class="math-symbol math-null-symbol">' + name + '</span>';
                    }
                    else if (name == "uninitialized") {
                        return '<span class="math-symbol math-uninitialized-symbol">' + name + '</span>';
                    }
                    return '<span class="math-symbol">' + name + '</span>';
                };
                SymbolNode.prototype._toTex = function (options) {
                    var isUnit = false;
                    if ((typeof math[this.name] === 'undefined') && isValuelessUnit(this.name)) {
                        isUnit = true;
                    }
                    var symbol = latex.toSymbol(this.name, isUnit);
                    if (symbol[0] === '\\') {
                        return symbol;
                    }
                    return ' ' + symbol;
                };
                return SymbolNode;
            }
            exports.name = 'SymbolNode';
            exports.path = 'expression.node';
            exports.math = true;
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            var IndexError = __webpack_require__(51);
            exports.transform = function (err) {
                if (err && err.isIndexError) {
                    return new IndexError(err.index + 1, err.min + 1, err.max !== undefined ? err.max + 1 : undefined);
                }
                return err;
            };
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var isMatrix = __webpack_require__(58);
            module.exports = function deepForEach(array, callback) {
                if (isMatrix(array)) {
                    array = array.valueOf();
                }
                for (var i = 0, ii = array.length; i < ii; i++) {
                    var value = array[i];
                    if (Array.isArray(value)) {
                        deepForEach(value, callback);
                    }
                    else {
                        callback(value);
                    }
                }
            };
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var util = __webpack_require__(25);
            var DimensionError = __webpack_require__(10);
            var getSafeProperty = __webpack_require__(13).getSafeProperty;
            var setSafeProperty = __webpack_require__(13).setSafeProperty;
            var string = util.string;
            var array = util.array;
            var object = util.object;
            var number = util.number;
            var isArray = Array.isArray;
            var isNumber = number.isNumber;
            var isInteger = number.isInteger;
            var isString = string.isString;
            var validateIndex = array.validateIndex;
            function factory(type, config, load, typed) {
                var Matrix = load(__webpack_require__(72));
                function DenseMatrix(data, datatype) {
                    if (!(this instanceof DenseMatrix))
                        throw new SyntaxError('Constructor must be called with the new operator');
                    if (datatype && !isString(datatype))
                        throw new Error('Invalid datatype: ' + datatype);
                    if (type.isMatrix(data)) {
                        if (data.type === 'DenseMatrix') {
                            this._data = object.clone(data._data);
                            this._size = object.clone(data._size);
                            this._datatype = datatype || data._datatype;
                        }
                        else {
                            this._data = data.toArray();
                            this._size = data.size();
                            this._datatype = datatype || data._datatype;
                        }
                    }
                    else if (data && isArray(data.data) && isArray(data.size)) {
                        this._data = data.data;
                        this._size = data.size;
                        this._datatype = datatype || data.datatype;
                    }
                    else if (isArray(data)) {
                        this._data = preprocess(data);
                        this._size = array.size(this._data);
                        array.validate(this._data, this._size);
                        this._datatype = datatype;
                    }
                    else if (data) {
                        throw new TypeError('Unsupported type of data (' + util.types.type(data) + ')');
                    }
                    else {
                        this._data = [];
                        this._size = [0];
                        this._datatype = datatype;
                    }
                }
                DenseMatrix.prototype = new Matrix();
                DenseMatrix.prototype.type = 'DenseMatrix';
                DenseMatrix.prototype.isDenseMatrix = true;
                DenseMatrix.prototype.storage = function () {
                    return 'dense';
                };
                DenseMatrix.prototype.datatype = function () {
                    return this._datatype;
                };
                DenseMatrix.prototype.create = function (data, datatype) {
                    return new DenseMatrix(data, datatype);
                };
                DenseMatrix.prototype.subset = function (index, replacement, defaultValue) {
                    switch (arguments.length) {
                        case 1:
                            return _get(this, index);
                        case 2:
                        case 3:
                            return _set(this, index, replacement, defaultValue);
                        default:
                            throw new SyntaxError('Wrong number of arguments');
                    }
                };
                DenseMatrix.prototype.get = function (index) {
                    if (!isArray(index))
                        throw new TypeError('Array expected');
                    if (index.length != this._size.length)
                        throw new DimensionError(index.length, this._size.length);
                    for (var x = 0; x < index.length; x++)
                        validateIndex(index[x], this._size[x]);
                    var data = this._data;
                    for (var i = 0, ii = index.length; i < ii; i++) {
                        var index_i = index[i];
                        validateIndex(index_i, data.length);
                        data = data[index_i];
                    }
                    return data;
                };
                DenseMatrix.prototype.set = function (index, value, defaultValue) {
                    if (!isArray(index))
                        throw new TypeError('Array expected');
                    if (index.length < this._size.length)
                        throw new DimensionError(index.length, this._size.length, '<');
                    var i, ii, index_i;
                    var size = index.map(function (i) {
                        return i + 1;
                    });
                    _fit(this, size, defaultValue);
                    var data = this._data;
                    for (i = 0, ii = index.length - 1; i < ii; i++) {
                        index_i = index[i];
                        validateIndex(index_i, data.length);
                        data = data[index_i];
                    }
                    index_i = index[index.length - 1];
                    validateIndex(index_i, data.length);
                    data[index_i] = value;
                    return this;
                };
                function _get(matrix, index) {
                    if (!type.isIndex(index)) {
                        throw new TypeError('Invalid index');
                    }
                    var isScalar = index.isScalar();
                    if (isScalar) {
                        return matrix.get(index.min());
                    }
                    else {
                        var size = index.size();
                        if (size.length != matrix._size.length) {
                            throw new DimensionError(size.length, matrix._size.length);
                        }
                        var min = index.min();
                        var max = index.max();
                        for (var i = 0, ii = matrix._size.length; i < ii; i++) {
                            validateIndex(min[i], matrix._size[i]);
                            validateIndex(max[i], matrix._size[i]);
                        }
                        return new DenseMatrix(_getSubmatrix(matrix._data, index, size.length, 0), matrix._datatype);
                    }
                }
                function _getSubmatrix(data, index, dims, dim) {
                    var last = (dim === dims - 1);
                    var range = index.dimension(dim);
                    if (last) {
                        return range.map(function (i) {
                            validateIndex(i, data.length);
                            return data[i];
                        }).valueOf();
                    }
                    else {
                        return range.map(function (i) {
                            validateIndex(i, data.length);
                            var child = data[i];
                            return _getSubmatrix(child, index, dims, dim + 1);
                        }).valueOf();
                    }
                }
                function _set(matrix, index, submatrix, defaultValue) {
                    if (!index || index.isIndex !== true) {
                        throw new TypeError('Invalid index');
                    }
                    var iSize = index.size(), isScalar = index.isScalar();
                    var sSize;
                    if (type.isMatrix(submatrix)) {
                        sSize = submatrix.size();
                        submatrix = submatrix.valueOf();
                    }
                    else {
                        sSize = array.size(submatrix);
                    }
                    if (isScalar) {
                        if (sSize.length !== 0) {
                            throw new TypeError('Scalar expected');
                        }
                        matrix.set(index.min(), submatrix, defaultValue);
                    }
                    else {
                        if (iSize.length < matrix._size.length) {
                            throw new DimensionError(iSize.length, matrix._size.length, '<');
                        }
                        if (sSize.length < iSize.length) {
                            var i = 0;
                            var outer = 0;
                            while (iSize[i] === 1 && sSize[i] === 1) {
                                i++;
                            }
                            while (iSize[i] === 1) {
                                outer++;
                                i++;
                            }
                            submatrix = array.unsqueeze(submatrix, iSize.length, outer, sSize);
                        }
                        if (!object.deepEqual(iSize, sSize)) {
                            throw new DimensionError(iSize, sSize, '>');
                        }
                        var size = index.max().map(function (i) {
                            return i + 1;
                        });
                        _fit(matrix, size, defaultValue);
                        var dims = iSize.length, dim = 0;
                        _setSubmatrix(matrix._data, index, submatrix, dims, dim);
                    }
                    return matrix;
                }
                function _setSubmatrix(data, index, submatrix, dims, dim) {
                    var last = (dim === dims - 1), range = index.dimension(dim);
                    if (last) {
                        range.forEach(function (dataIndex, subIndex) {
                            validateIndex(dataIndex);
                            data[dataIndex] = submatrix[subIndex[0]];
                        });
                    }
                    else {
                        range.forEach(function (dataIndex, subIndex) {
                            validateIndex(dataIndex);
                            _setSubmatrix(data[dataIndex], index, submatrix[subIndex[0]], dims, dim + 1);
                        });
                    }
                }
                DenseMatrix.prototype.resize = function (size, defaultValue, copy) {
                    if (!isArray(size))
                        throw new TypeError('Array expected');
                    var m = copy ? this.clone() : this;
                    return _resize(m, size, defaultValue);
                };
                var _resize = function (matrix, size, defaultValue) {
                    if (size.length === 0) {
                        var v = matrix._data;
                        while (isArray(v)) {
                            v = v[0];
                        }
                        return v;
                    }
                    matrix._size = size.slice(0);
                    matrix._data = array.resize(matrix._data, matrix._size, defaultValue);
                    return matrix;
                };
                DenseMatrix.prototype.reshape = function (size, copy) {
                    var m = copy ? this.clone() : this;
                    m._data = array.reshape(m._data, size);
                    m._size = size.slice(0);
                    return m;
                };
                function _fit(matrix, size, defaultValue) {
                    var newSize = matrix._size.slice(0), changed = false;
                    while (newSize.length < size.length) {
                        newSize.push(0);
                        changed = true;
                    }
                    for (var i = 0, ii = size.length; i < ii; i++) {
                        if (size[i] > newSize[i]) {
                            newSize[i] = size[i];
                            changed = true;
                        }
                    }
                    if (changed) {
                        _resize(matrix, newSize, defaultValue);
                    }
                }
                DenseMatrix.prototype.clone = function () {
                    var m = new DenseMatrix({
                        data: object.clone(this._data),
                        size: object.clone(this._size),
                        datatype: this._datatype
                    });
                    return m;
                };
                DenseMatrix.prototype.size = function () {
                    return this._size.slice(0);
                };
                DenseMatrix.prototype.map = function (callback) {
                    var me = this;
                    var recurse = function (value, index) {
                        if (isArray(value)) {
                            return value.map(function (child, i) {
                                return recurse(child, index.concat(i));
                            });
                        }
                        else {
                            return callback(value, index, me);
                        }
                    };
                    return new DenseMatrix({
                        data: recurse(this._data, []),
                        size: object.clone(this._size),
                        datatype: this._datatype
                    });
                };
                DenseMatrix.prototype.forEach = function (callback) {
                    var me = this;
                    var recurse = function (value, index) {
                        if (isArray(value)) {
                            value.forEach(function (child, i) {
                                recurse(child, index.concat(i));
                            });
                        }
                        else {
                            callback(value, index, me);
                        }
                    };
                    recurse(this._data, []);
                };
                DenseMatrix.prototype.toArray = function () {
                    return object.clone(this._data);
                };
                DenseMatrix.prototype.valueOf = function () {
                    return this._data;
                };
                DenseMatrix.prototype.format = function (options) {
                    return string.format(this._data, options);
                };
                DenseMatrix.prototype.toString = function () {
                    return string.format(this._data);
                };
                DenseMatrix.prototype.toJSON = function () {
                    return {
                        mathjs: 'DenseMatrix',
                        data: this._data,
                        size: this._size,
                        datatype: this._datatype
                    };
                };
                DenseMatrix.prototype.diagonal = function (k) {
                    if (k) {
                        if (type.isBigNumber(k))
                            k = k.toNumber();
                        if (!isNumber(k) || !isInteger(k)) {
                            throw new TypeError('The parameter k must be an integer number');
                        }
                    }
                    else {
                        k = 0;
                    }
                    var kSuper = k > 0 ? k : 0;
                    var kSub = k < 0 ? -k : 0;
                    var rows = this._size[0];
                    var columns = this._size[1];
                    var n = Math.min(rows - kSub, columns - kSuper);
                    var data = [];
                    for (var i = 0; i < n; i++) {
                        data[i] = this._data[i + kSub][i + kSuper];
                    }
                    return new DenseMatrix({
                        data: data,
                        size: [n],
                        datatype: this._datatype
                    });
                };
                DenseMatrix.diagonal = function (size, value, k, defaultValue, datatype) {
                    if (!isArray(size))
                        throw new TypeError('Array expected, size parameter');
                    if (size.length !== 2)
                        throw new Error('Only two dimensions matrix are supported');
                    size = size.map(function (s) {
                        if (type.isBigNumber(s)) {
                            s = s.toNumber();
                        }
                        if (!isNumber(s) || !isInteger(s) || s < 1) {
                            throw new Error('Size values must be positive integers');
                        }
                        return s;
                    });
                    if (k) {
                        if (type.isBigNumber(k))
                            k = k.toNumber();
                        if (!isNumber(k) || !isInteger(k)) {
                            throw new TypeError('The parameter k must be an integer number');
                        }
                    }
                    else {
                        k = 0;
                    }
                    if (defaultValue && isString(datatype)) {
                        defaultValue = typed.convert(defaultValue, datatype);
                    }
                    var kSuper = k > 0 ? k : 0;
                    var kSub = k < 0 ? -k : 0;
                    var rows = size[0];
                    var columns = size[1];
                    var n = Math.min(rows - kSub, columns - kSuper);
                    var _value;
                    if (isArray(value)) {
                        if (value.length !== n) {
                            throw new Error('Invalid value array length');
                        }
                        _value = function (i) {
                            return value[i];
                        };
                    }
                    else if (type.isMatrix(value)) {
                        var ms = value.size();
                        if (ms.length !== 1 || ms[0] !== n) {
                            throw new Error('Invalid matrix length');
                        }
                        _value = function (i) {
                            return value.get([i]);
                        };
                    }
                    else {
                        _value = function () {
                            return value;
                        };
                    }
                    if (!defaultValue) {
                        defaultValue = type.isBigNumber(_value(0)) ? new type.BigNumber(0) : 0;
                    }
                    var data = [];
                    if (size.length > 0) {
                        data = array.resize(data, size, defaultValue);
                        for (var d = 0; d < n; d++) {
                            data[d + kSub][d + kSuper] = _value(d);
                        }
                    }
                    return new DenseMatrix({
                        data: data,
                        size: [rows, columns]
                    });
                };
                DenseMatrix.fromJSON = function (json) {
                    return new DenseMatrix(json);
                };
                DenseMatrix.prototype.swapRows = function (i, j) {
                    if (!isNumber(i) || !isInteger(i) || !isNumber(j) || !isInteger(j)) {
                        throw new Error('Row index must be positive integers');
                    }
                    if (this._size.length !== 2) {
                        throw new Error('Only two dimensional matrix is supported');
                    }
                    validateIndex(i, this._size[0]);
                    validateIndex(j, this._size[0]);
                    DenseMatrix._swapRows(i, j, this._data);
                    return this;
                };
                DenseMatrix._swapRows = function (i, j, data) {
                    var vi = data[i];
                    data[i] = data[j];
                    data[j] = vi;
                };
                function preprocess(data) {
                    for (var i = 0, ii = data.length; i < ii; i++) {
                        var elem = data[i];
                        if (isArray(elem)) {
                            data[i] = preprocess(elem);
                        }
                        else if (elem && elem.isMatrix === true) {
                            data[i] = preprocess(elem.valueOf());
                        }
                    }
                    return data;
                }
                type.Matrix._storage.dense = DenseMatrix;
                type.Matrix._storage['default'] = DenseMatrix;
                return DenseMatrix;
            }
            exports.name = 'DenseMatrix';
            exports.path = 'type';
            exports.factory = factory;
            exports.lazy = false;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var nearlyEqual = __webpack_require__(3).nearlyEqual;
            var bigNearlyEqual = __webpack_require__(35);
            function factory(type, config, load, typed) {
                var matrix = load(__webpack_require__(0));
                var algorithm03 = load(__webpack_require__(15));
                var algorithm07 = load(__webpack_require__(26));
                var algorithm12 = load(__webpack_require__(16));
                var algorithm13 = load(__webpack_require__(8));
                var algorithm14 = load(__webpack_require__(6));
                var latex = __webpack_require__(4);
                var smaller = typed('smaller', {
                    'boolean, boolean': function (x, y) {
                        return x < y;
                    },
                    'number, number': function (x, y) {
                        return x < y && !nearlyEqual(x, y, config.epsilon);
                    },
                    'BigNumber, BigNumber': function (x, y) {
                        return x.lt(y) && !bigNearlyEqual(x, y, config.epsilon);
                    },
                    'Fraction, Fraction': function (x, y) {
                        return x.compare(y) === -1;
                    },
                    'Complex, Complex': function (x, y) {
                        throw new TypeError('No ordering relation is defined for complex numbers');
                    },
                    'Unit, Unit': function (x, y) {
                        if (!x.equalBase(y)) {
                            throw new Error('Cannot compare units with different base');
                        }
                        return smaller(x.value, y.value);
                    },
                    'string, string': function (x, y) {
                        return x < y;
                    },
                    'Matrix, Matrix': function (x, y) {
                        var c;
                        switch (x.storage()) {
                            case 'sparse':
                                switch (y.storage()) {
                                    case 'sparse':
                                        c = algorithm07(x, y, smaller);
                                        break;
                                    default:
                                        c = algorithm03(y, x, smaller, true);
                                        break;
                                }
                                break;
                            default:
                                switch (y.storage()) {
                                    case 'sparse':
                                        c = algorithm03(x, y, smaller, false);
                                        break;
                                    default:
                                        c = algorithm13(x, y, smaller);
                                        break;
                                }
                                break;
                        }
                        return c;
                    },
                    'Array, Array': function (x, y) {
                        return smaller(matrix(x), matrix(y)).valueOf();
                    },
                    'Array, Matrix': function (x, y) {
                        return smaller(matrix(x), y);
                    },
                    'Matrix, Array': function (x, y) {
                        return smaller(x, matrix(y));
                    },
                    'Matrix, any': function (x, y) {
                        var c;
                        switch (x.storage()) {
                            case 'sparse':
                                c = algorithm12(x, y, smaller, false);
                                break;
                            default:
                                c = algorithm14(x, y, smaller, false);
                                break;
                        }
                        return c;
                    },
                    'any, Matrix': function (x, y) {
                        var c;
                        switch (y.storage()) {
                            case 'sparse':
                                c = algorithm12(y, x, smaller, true);
                                break;
                            default:
                                c = algorithm14(y, x, smaller, true);
                                break;
                        }
                        return c;
                    },
                    'Array, any': function (x, y) {
                        return algorithm14(matrix(x), y, smaller, false).valueOf();
                    },
                    'any, Array': function (x, y) {
                        return algorithm14(matrix(y), x, smaller, true).valueOf();
                    }
                });
                smaller.toTex = {
                    2: '\\left(${args[0]}' + latex.operators['smaller'] + '${args[1]}\\right)'
                };
                return smaller;
            }
            exports.name = 'smaller';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var isInteger = __webpack_require__(3).isInteger;
            var size = __webpack_require__(2).size;
            function factory(type, config, load, typed) {
                var latex = __webpack_require__(4);
                var eye = load(__webpack_require__(61));
                var multiply = load(__webpack_require__(12));
                var matrix = load(__webpack_require__(0));
                var fraction = load(__webpack_require__(92));
                var number = load(__webpack_require__(74));
                var pow = typed('pow', {
                    'number, number': _pow,
                    'Complex, Complex': function (x, y) {
                        return x.pow(y);
                    },
                    'BigNumber, BigNumber': function (x, y) {
                        if (y.isInteger() || x >= 0 || config.predictable) {
                            return x.pow(y);
                        }
                        else {
                            return new type.Complex(x.toNumber(), 0).pow(y.toNumber(), 0);
                        }
                    },
                    'Fraction, Fraction': function (x, y) {
                        if (y.d !== 1) {
                            if (config.predictable) {
                                throw new Error('Function pow does not support non-integer exponents for fractions.');
                            }
                            else {
                                return _pow(x.valueOf(), y.valueOf());
                            }
                        }
                        else {
                            return x.pow(y);
                        }
                    },
                    'Array, number': _powArray,
                    'Array, BigNumber': function (x, y) {
                        return _powArray(x, y.toNumber());
                    },
                    'Matrix, number': _powMatrix,
                    'Matrix, BigNumber': function (x, y) {
                        return _powMatrix(x, y.toNumber());
                    },
                    'Unit, number': function (x, y) {
                        return x.pow(y);
                    }
                });
                function _pow(x, y) {
                    if (config.predictable && !isInteger(y) && x < 0) {
                        try {
                            var yFrac = fraction(y);
                            var yNum = number(yFrac);
                            if (y === yNum || Math.abs((y - yNum) / y) < 1e-14) {
                                if (yFrac.d % 2 === 1) {
                                    return (yFrac.n % 2 === 0 ? 1 : -1) * Math.pow(-x, y);
                                }
                            }
                        }
                        catch (ex) {
                        }
                    }
                    if ((x * x < 1 && y === Infinity) ||
                        (x * x > 1 && y === -Infinity)) {
                        return 0;
                    }
                    if (config.predictable &&
                        ((x < -1 && y === Infinity) ||
                            (x > -1 && x < 0 && y === -Infinity))) {
                        return NaN;
                    }
                    if (isInteger(y) || x >= 0 || config.predictable) {
                        return Math.pow(x, y);
                    }
                    else {
                        return new type.Complex(x, 0).pow(y, 0);
                    }
                }
                function _powArray(x, y) {
                    if (!isInteger(y) || y < 0) {
                        throw new TypeError('For A^b, b must be a positive integer (value is ' + y + ')');
                    }
                    var s = size(x);
                    if (s.length != 2) {
                        throw new Error('For A^b, A must be 2 dimensional (A has ' + s.length + ' dimensions)');
                    }
                    if (s[0] != s[1]) {
                        throw new Error('For A^b, A must be square (size is ' + s[0] + 'x' + s[1] + ')');
                    }
                    var res = eye(s[0]).valueOf();
                    var px = x;
                    while (y >= 1) {
                        if ((y & 1) == 1) {
                            res = multiply(px, res);
                        }
                        y >>= 1;
                        px = multiply(px, px);
                    }
                    return res;
                }
                function _powMatrix(x, y) {
                    return matrix(_powArray(x.valueOf(), y));
                }
                pow.toTex = {
                    2: '\\left(${args[0]}\\right)' + latex.operators['pow'] + '{${args[1]}}'
                };
                return pow;
            }
            exports.name = 'pow';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var isMatrix = __webpack_require__(58);
            module.exports = function isCollection(x) {
                return Array.isArray(x) || isMatrix(x);
            };
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var extend = __webpack_require__(5).extend;
            function factory(type, config, load, typed) {
                var divideScalar = load(__webpack_require__(19));
                var multiply = load(__webpack_require__(12));
                var inv = load(__webpack_require__(114));
                var matrix = load(__webpack_require__(0));
                var algorithm11 = load(__webpack_require__(17));
                var algorithm14 = load(__webpack_require__(6));
                var divide = typed('divide', extend({
                    'Array | Matrix, Array | Matrix': function (x, y) {
                        return multiply(x, inv(y));
                    },
                    'Matrix, any': function (x, y) {
                        var c;
                        switch (x.storage()) {
                            case 'sparse':
                                c = algorithm11(x, y, divideScalar, false);
                                break;
                            case 'dense':
                                c = algorithm14(x, y, divideScalar, false);
                                break;
                        }
                        return c;
                    },
                    'Array, any': function (x, y) {
                        return algorithm14(matrix(x), y, divideScalar, false).valueOf();
                    },
                    'any, Array | Matrix': function (x, y) {
                        return multiply(x, inv(y));
                    }
                }, divideScalar.signatures));
                divide.toTex = { 2: '\\frac{${args[0]}}{${args[1]}}' };
                return divide;
            }
            exports.name = 'divide';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            var number = __webpack_require__(3);
            function factory(type, config, load, typed) {
                var isInteger = typed('isInteger', {
                    'number': number.isInteger,
                    'BigNumber': function (x) {
                        return x.isInt();
                    },
                    'Fraction': function (x) {
                        return x.d === 1 && isFinite(x.n);
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, isInteger);
                    }
                });
                return isInteger;
            }
            exports.name = 'isInteger';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var nearlyEqual = __webpack_require__(3).nearlyEqual;
            var bigNearlyEqual = __webpack_require__(35);
            function factory(type, config, load, typed) {
                var matrix = load(__webpack_require__(0));
                var algorithm03 = load(__webpack_require__(15));
                var algorithm05 = load(__webpack_require__(60));
                var algorithm12 = load(__webpack_require__(16));
                var algorithm13 = load(__webpack_require__(8));
                var algorithm14 = load(__webpack_require__(6));
                var compare = typed('compare', {
                    'boolean, boolean': function (x, y) {
                        return x === y ? 0 : (x > y ? 1 : -1);
                    },
                    'number, number': function (x, y) {
                        return (x === y || nearlyEqual(x, y, config.epsilon))
                            ? 0
                            : (x > y ? 1 : -1);
                    },
                    'BigNumber, BigNumber': function (x, y) {
                        return (x.eq(y) || bigNearlyEqual(x, y, config.epsilon))
                            ? new type.BigNumber(0)
                            : new type.BigNumber(x.cmp(y));
                    },
                    'Fraction, Fraction': function (x, y) {
                        return new type.Fraction(x.compare(y));
                    },
                    'Complex, Complex': function () {
                        throw new TypeError('No ordering relation is defined for complex numbers');
                    },
                    'Unit, Unit': function (x, y) {
                        if (!x.equalBase(y)) {
                            throw new Error('Cannot compare units with different base');
                        }
                        return compare(x.value, y.value);
                    },
                    'string, string': function (x, y) {
                        return x === y ? 0 : (x > y ? 1 : -1);
                    },
                    'Matrix, Matrix': function (x, y) {
                        var c;
                        switch (x.storage()) {
                            case 'sparse':
                                switch (y.storage()) {
                                    case 'sparse':
                                        c = algorithm05(x, y, compare);
                                        break;
                                    default:
                                        c = algorithm03(y, x, compare, true);
                                        break;
                                }
                                break;
                            default:
                                switch (y.storage()) {
                                    case 'sparse':
                                        c = algorithm03(x, y, compare, false);
                                        break;
                                    default:
                                        c = algorithm13(x, y, compare);
                                        break;
                                }
                                break;
                        }
                        return c;
                    },
                    'Array, Array': function (x, y) {
                        return compare(matrix(x), matrix(y)).valueOf();
                    },
                    'Array, Matrix': function (x, y) {
                        return compare(matrix(x), y);
                    },
                    'Matrix, Array': function (x, y) {
                        return compare(x, matrix(y));
                    },
                    'Matrix, any': function (x, y) {
                        var c;
                        switch (x.storage()) {
                            case 'sparse':
                                c = algorithm12(x, y, compare, false);
                                break;
                            default:
                                c = algorithm14(x, y, compare, false);
                                break;
                        }
                        return c;
                    },
                    'any, Matrix': function (x, y) {
                        var c;
                        switch (y.storage()) {
                            case 'sparse':
                                c = algorithm12(y, x, compare, true);
                                break;
                            default:
                                c = algorithm14(y, x, compare, true);
                                break;
                        }
                        return c;
                    },
                    'Array, any': function (x, y) {
                        return algorithm14(matrix(x), y, compare, false).valueOf();
                    },
                    'any, Array': function (x, y) {
                        return algorithm14(matrix(y), x, compare, true).valueOf();
                    }
                });
                compare.toTex = undefined;
                return compare;
            }
            exports.name = 'compare';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function ArgumentsError(fn, count, min, max) {
                if (!(this instanceof ArgumentsError)) {
                    throw new SyntaxError('Constructor must be called with the new operator');
                }
                this.fn = fn;
                this.count = count;
                this.min = min;
                this.max = max;
                this.message = 'Wrong number of arguments in function ' + fn +
                    ' (' + count + ' provided, ' +
                    min + ((max != undefined) ? ('-' + max) : '') + ' expected)';
                this.stack = (new Error()).stack;
            }
            ArgumentsError.prototype = new Error();
            ArgumentsError.prototype.constructor = Error;
            ArgumentsError.prototype.name = 'ArgumentsError';
            ArgumentsError.prototype.isArgumentsError = true;
            module.exports = ArgumentsError;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function IndexError(index, min, max) {
                if (!(this instanceof IndexError)) {
                    throw new SyntaxError('Constructor must be called with the new operator');
                }
                this.index = index;
                if (arguments.length < 3) {
                    this.min = 0;
                    this.max = min;
                }
                else {
                    this.min = min;
                    this.max = max;
                }
                if (this.min !== undefined && this.index < this.min) {
                    this.message = 'Index out of range (' + this.index + ' < ' + this.min + ')';
                }
                else if (this.max !== undefined && this.index >= this.max) {
                    this.message = 'Index out of range (' + this.index + ' > ' + (this.max - 1) + ')';
                }
                else {
                    this.message = 'Index out of range (' + this.index + ')';
                }
                this.stack = (new Error()).stack;
            }
            IndexError.prototype = new RangeError();
            IndexError.prototype.constructor = RangeError;
            IndexError.prototype.name = 'IndexError';
            IndexError.prototype.isIndexError = true;
            module.exports = IndexError;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var properties = [
                {
                    'AssignmentNode': {},
                    'FunctionAssignmentNode': {}
                },
                {
                    'ConditionalNode': {
                        latexLeftParens: false,
                        latexRightParens: false,
                        latexParens: false
                    }
                },
                {
                    'OperatorNode:or': {
                        associativity: 'left',
                        associativeWith: []
                    }
                },
                {
                    'OperatorNode:xor': {
                        associativity: 'left',
                        associativeWith: []
                    }
                },
                {
                    'OperatorNode:and': {
                        associativity: 'left',
                        associativeWith: []
                    }
                },
                {
                    'OperatorNode:bitOr': {
                        associativity: 'left',
                        associativeWith: []
                    }
                },
                {
                    'OperatorNode:bitXor': {
                        associativity: 'left',
                        associativeWith: []
                    }
                },
                {
                    'OperatorNode:bitAnd': {
                        associativity: 'left',
                        associativeWith: []
                    }
                },
                {
                    'OperatorNode:equal': {
                        associativity: 'left',
                        associativeWith: []
                    },
                    'OperatorNode:unequal': {
                        associativity: 'left',
                        associativeWith: []
                    },
                    'OperatorNode:smaller': {
                        associativity: 'left',
                        associativeWith: []
                    },
                    'OperatorNode:larger': {
                        associativity: 'left',
                        associativeWith: []
                    },
                    'OperatorNode:smallerEq': {
                        associativity: 'left',
                        associativeWith: []
                    },
                    'OperatorNode:largerEq': {
                        associativity: 'left',
                        associativeWith: []
                    }
                },
                {
                    'OperatorNode:leftShift': {
                        associativity: 'left',
                        associativeWith: []
                    },
                    'OperatorNode:rightArithShift': {
                        associativity: 'left',
                        associativeWith: []
                    },
                    'OperatorNode:rightLogShift': {
                        associativity: 'left',
                        associativeWith: []
                    }
                },
                {
                    'OperatorNode:to': {
                        associativity: 'left',
                        associativeWith: []
                    }
                },
                {
                    'RangeNode': {}
                },
                {
                    'OperatorNode:add': {
                        associativity: 'left',
                        associativeWith: ['OperatorNode:add', 'OperatorNode:subtract']
                    },
                    'OperatorNode:subtract': {
                        associativity: 'left',
                        associativeWith: []
                    }
                },
                {
                    'OperatorNode:multiply': {
                        associativity: 'left',
                        associativeWith: [
                            'OperatorNode:multiply',
                            'OperatorNode:divide',
                            'Operator:dotMultiply',
                            'Operator:dotDivide'
                        ]
                    },
                    'OperatorNode:divide': {
                        associativity: 'left',
                        associativeWith: [],
                        latexLeftParens: false,
                        latexRightParens: false,
                        latexParens: false
                    },
                    'OperatorNode:dotMultiply': {
                        associativity: 'left',
                        associativeWith: [
                            'OperatorNode:multiply',
                            'OperatorNode:divide',
                            'OperatorNode:dotMultiply',
                            'OperatorNode:doDivide'
                        ]
                    },
                    'OperatorNode:dotDivide': {
                        associativity: 'left',
                        associativeWith: []
                    },
                    'OperatorNode:mod': {
                        associativity: 'left',
                        associativeWith: []
                    }
                },
                {
                    'OperatorNode:unaryPlus': {
                        associativity: 'right'
                    },
                    'OperatorNode:unaryMinus': {
                        associativity: 'right'
                    },
                    'OperatorNode:bitNot': {
                        associativity: 'right'
                    },
                    'OperatorNode:not': {
                        associativity: 'right'
                    }
                },
                {
                    'OperatorNode:pow': {
                        associativity: 'right',
                        associativeWith: [],
                        latexRightParens: false
                    },
                    'OperatorNode:dotPow': {
                        associativity: 'right',
                        associativeWith: []
                    }
                },
                {
                    'OperatorNode:factorial': {
                        associativity: 'left'
                    }
                },
                {
                    'OperatorNode:transpose': {
                        associativity: 'left'
                    }
                }
            ];
            function getPrecedence(_node, parenthesis) {
                var node = _node;
                if (parenthesis !== 'keep') {
                    node = _node.getContent();
                }
                var identifier = node.getIdentifier();
                for (var i = 0; i < properties.length; i++) {
                    if (identifier in properties[i]) {
                        return i;
                    }
                }
                return null;
            }
            function getAssociativity(_node, parenthesis) {
                var node = _node;
                if (parenthesis !== 'keep') {
                    node = _node.getContent();
                }
                var identifier = node.getIdentifier();
                var index = getPrecedence(node, parenthesis);
                if (index === null) {
                    return null;
                }
                var property = properties[index][identifier];
                if (property.hasOwnProperty('associativity')) {
                    if (property.associativity === 'left') {
                        return 'left';
                    }
                    if (property.associativity === 'right') {
                        return 'right';
                    }
                    throw Error('\'' + identifier + '\' has the invalid associativity \''
                        + property.associativity + '\'.');
                }
                return null;
            }
            function isAssociativeWith(nodeA, nodeB, parenthesis) {
                var a = nodeA;
                var b = nodeB;
                if (parenthesis !== 'keep') {
                    var a = nodeA.getContent();
                    var b = nodeB.getContent();
                }
                var identifierA = a.getIdentifier();
                var identifierB = b.getIdentifier();
                var index = getPrecedence(a, parenthesis);
                if (index === null) {
                    return null;
                }
                var property = properties[index][identifierA];
                if (property.hasOwnProperty('associativeWith')
                    && (property.associativeWith instanceof Array)) {
                    for (var i = 0; i < property.associativeWith.length; i++) {
                        if (property.associativeWith[i] === identifierB) {
                            return true;
                        }
                    }
                    return false;
                }
                return null;
            }
            module.exports.properties = properties;
            module.exports.getPrecedence = getPrecedence;
            module.exports.getAssociativity = getAssociativity;
            module.exports.isAssociativeWith = isAssociativeWith;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var getType = __webpack_require__(59).type;
            var stringify = __webpack_require__(9).stringify;
            var escape = __webpack_require__(9).escape;
            function factory(type, config, load, typed) {
                var register = load(__webpack_require__(7)).register;
                var compile = load(__webpack_require__(7)).compile;
                var Node = load(__webpack_require__(14));
                function ConstantNode(value, valueType) {
                    if (!(this instanceof ConstantNode)) {
                        throw new SyntaxError('Constructor must be called with the new operator');
                    }
                    if (valueType) {
                        if (typeof valueType !== 'string') {
                            throw new TypeError('String expected for parameter "valueType"');
                        }
                        if (typeof value !== 'string') {
                            throw new TypeError('String expected for parameter "value"');
                        }
                        this.value = value;
                        this.valueType = valueType;
                    }
                    else {
                        this.value = value + '';
                        this.valueType = getType(value);
                    }
                    if (!SUPPORTED_TYPES[this.valueType]) {
                        throw new TypeError('Unsupported type of value "' + this.valueType + '"');
                    }
                }
                var SUPPORTED_TYPES = {
                    'number': true,
                    'string': true,
                    'boolean': true,
                    'undefined': true,
                    'null': true
                };
                ConstantNode.prototype = new Node();
                ConstantNode.prototype.type = 'ConstantNode';
                ConstantNode.prototype.isConstantNode = true;
                function compileConstantNode(node, defs, args) {
                    if (!(node instanceof ConstantNode)) {
                        throw new TypeError('No valid ConstantNode');
                    }
                    switch (node.valueType) {
                        case 'number':
                            if (config.number === 'BigNumber') {
                                return 'math.bignumber(' + stringify(node.value) + ')';
                            }
                            else if (config.number === 'Fraction') {
                                return 'math.fraction(' + stringify(node.value) + ')';
                            }
                            else {
                                validateNumericValue(node.value);
                                return node.value.replace(/^(0*)[0-9]/, function (match, zeros) {
                                    return match.substring(zeros.length);
                                });
                            }
                        case 'string':
                            return stringify(node.value);
                        case 'boolean':
                            return String(node.value) === 'true' ? 'true' : 'false';
                        case 'undefined':
                            return 'undefined';
                        case 'null':
                            return 'null';
                        default:
                            throw new TypeError('Unsupported type of constant "' + node.valueType + '"');
                    }
                }
                function validateNumericValue(value) {
                    if (typeof value !== 'string' ||
                        !/^[\-+]?((\d+\.?\d*)|(\d*\.?\d+))([eE][+\-]?\d+)?$/.test(value)) {
                        throw new Error('Invalid numeric value "' + value + '"');
                    }
                }
                register(ConstantNode.prototype.type, compileConstantNode);
                ConstantNode.prototype.forEach = function (callback) {
                };
                ConstantNode.prototype.map = function (callback) {
                    return this.clone();
                };
                ConstantNode.prototype.clone = function () {
                    return new ConstantNode(this.value, this.valueType);
                };
                ConstantNode.prototype._toString = function (options) {
                    switch (this.valueType) {
                        case 'string':
                            return stringify(this.value);
                        default:
                            return this.value;
                    }
                };
                ConstantNode.prototype.toHTML = function (options) {
                    var value = escape(this.value);
                    switch (this.valueType) {
                        case 'number':
                            return '<span class="math-number">' + value + '</span>';
                        case 'string':
                            return '<span class="math-string">' + value + '</span>';
                        case 'boolean':
                            return '<span class="math-boolean">' + value + '</span>';
                        case 'null':
                            return '<span class="math-null-symbol">' + value + '</span>';
                        case 'undefined':
                            return '<span class="math-undefined">' + value + '</span>';
                        default:
                            return '<span class="math-symbol">' + value + '</span>';
                    }
                };
                ConstantNode.prototype._toTex = function (options) {
                    var value = this.value, index;
                    switch (this.valueType) {
                        case 'string':
                            return '\\mathtt{' + stringify(value) + '}';
                        case 'number':
                            index = value.toLowerCase().indexOf('e');
                            if (index !== -1) {
                                return value.substring(0, index) + '\\cdot10^{' +
                                    value.substring(index + 1) + '}';
                            }
                            return value;
                        default:
                            return value;
                    }
                };
                return ConstantNode;
            }
            exports.name = 'ConstantNode';
            exports.path = 'expression.node';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var latex = __webpack_require__(4);
            var stringify = __webpack_require__(9).stringify;
            var escape = __webpack_require__(9).escape;
            var extend = __webpack_require__(5).extend;
            var hasOwnProperty = __webpack_require__(5).hasOwnProperty;
            var map = __webpack_require__(2).map;
            var join = __webpack_require__(2).join;
            var validateSafeMethod = __webpack_require__(13).validateSafeMethod;
            var getUniqueArgumentName = __webpack_require__(108);
            function factory(type, config, load, typed, math) {
                var register = load(__webpack_require__(7)).register;
                var compile = load(__webpack_require__(7)).compile;
                var Node = load(__webpack_require__(14));
                var SymbolNode = load(__webpack_require__(40));
                function FunctionNode(fn, args) {
                    if (!(this instanceof FunctionNode)) {
                        throw new SyntaxError('Constructor must be called with the new operator');
                    }
                    if (typeof fn === 'string') {
                        fn = new SymbolNode(fn);
                    }
                    if (!type.isNode(fn))
                        throw new TypeError('Node expected as parameter "fn"');
                    if (!Array.isArray(args) || !args.every(type.isNode)) {
                        throw new TypeError('Array containing Nodes expected for parameter "args"');
                    }
                    this.fn = fn;
                    this.args = args || [];
                    Object.defineProperty(this, 'name', {
                        get: function () {
                            return this.fn.name || '';
                        }.bind(this),
                        set: function () {
                            throw new Error('Cannot assign a new name, name is read-only');
                        }
                    });
                    var deprecated = function () {
                        throw new Error('Property `FunctionNode.object` is deprecated, use `FunctionNode.fn` instead');
                    };
                    Object.defineProperty(this, 'object', { get: deprecated, set: deprecated });
                }
                FunctionNode.prototype = new Node();
                FunctionNode.prototype.type = 'FunctionNode';
                FunctionNode.prototype.isFunctionNode = true;
                function compileFunctionNode(node, defs, args) {
                    if (!(node instanceof FunctionNode)) {
                        throw new TypeError('No valid FunctionNode');
                    }
                    var jsFn = compile(node.fn, defs, args);
                    var jsArgs = map(node.args, function (arg) {
                        return compile(arg, defs, args);
                    });
                    var jsScope = compileScope(defs, args);
                    var argsName;
                    if (type.isSymbolNode(node.fn)) {
                        var name = node.fn.name;
                        var fn = hasOwnProperty(defs.math, name) ? defs.math[name] : undefined;
                        var isRaw = (typeof fn === 'function') && (fn.rawArgs == true);
                        if (isRaw) {
                            argsName = getUniqueArgumentName(defs);
                            defs[argsName] = node.args;
                            return jsFn + '(' + argsName + ', math, ' + jsScope + ')';
                        }
                        else {
                            return jsFn + '(' + join(jsArgs, ', ') + ')';
                        }
                    }
                    else if (type.isAccessorNode(node.fn) &&
                        type.isIndexNode(node.fn.index) && node.fn.index.isObjectProperty()) {
                        argsName = getUniqueArgumentName(defs);
                        defs[argsName] = node.args;
                        defs.validateSafeMethod = validateSafeMethod;
                        var jsObject = compile(node.fn.object, defs, args);
                        var jsProp = stringify(node.fn.index.getObjectProperty());
                        return '(function () {' +
                            'var object = ' + jsObject + ';' +
                            'validateSafeMethod(object, ' + jsProp + ');' +
                            'return (object[' + jsProp + '] && object[' + jsProp + '].rawArgs) ' +
                            ' ? object[' + jsProp + '](' + argsName + ', math, ' + jsScope + ')' +
                            ' : object[' + jsProp + '](' + join(jsArgs, ', ') + ')' +
                            '})()';
                    }
                    else {
                        argsName = getUniqueArgumentName(defs);
                        defs[argsName] = node.args;
                        return '(function () {' +
                            'var fn = ' + jsFn + ';' +
                            'return (fn && fn.rawArgs) ' +
                            ' ? fn(' + argsName + ', math, ' + jsScope + ')' +
                            ' : fn(' + join(jsArgs, ', ') + ')' +
                            '})()';
                    }
                }
                register(FunctionNode.prototype.type, compileFunctionNode);
                function compileScope(defs, args) {
                    var names = Object.keys(args);
                    if (names.length === 0) {
                        return 'scope';
                    }
                    else {
                        defs.extend = extend;
                        var jsArgs = map(names, function (name) {
                            return stringify(name) + ': ' + args[name];
                        });
                        return 'extend(extend({}, scope), {' + join(jsArgs, ', ') + '})';
                    }
                }
                FunctionNode.prototype.forEach = function (callback) {
                    for (var i = 0; i < this.args.length; i++) {
                        callback(this.args[i], 'args[' + i + ']', this);
                    }
                };
                FunctionNode.prototype.map = function (callback) {
                    var fn = this.fn.map(callback);
                    var args = [];
                    for (var i = 0; i < this.args.length; i++) {
                        args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));
                    }
                    return new FunctionNode(fn, args);
                };
                FunctionNode.prototype.clone = function () {
                    return new FunctionNode(this.fn, this.args.slice(0));
                };
                var nodeToString = FunctionNode.prototype.toString;
                FunctionNode.prototype.toString = function (options) {
                    var customString;
                    var name = this.fn.toString(options);
                    if (options && (typeof options.handler === 'object') && hasOwnProperty(options.handler, name)) {
                        customString = options.handler[name](this, options);
                    }
                    if (typeof customString !== 'undefined') {
                        return customString;
                    }
                    return nodeToString.call(this, options);
                };
                FunctionNode.prototype._toString = function (options) {
                    var args = this.args.map(function (arg) {
                        return arg.toString(options);
                    });
                    var fn = type.isFunctionAssignmentNode(this.fn)
                        ? ('(' + this.fn.toString(options) + ')')
                        : this.fn.toString(options);
                    return fn + '(' + args.join(', ') + ')';
                };
                FunctionNode.prototype.toHTML = function (options) {
                    var args = this.args.map(function (arg) {
                        return arg.toHTML(options);
                    });
                    return '<span class="math-function">' + escape(this.fn) + '</span><span class="math-paranthesis math-round-parenthesis">(</span>' + args.join('<span class="math-separator">,</span>') + '<span class="math-paranthesis math-round-parenthesis">)</span>';
                };
                function expandTemplate(template, node, options) {
                    var latex = '';
                    var regex = new RegExp('\\$(?:\\{([a-z_][a-z_0-9]*)(?:\\[([0-9]+)\\])?\\}|\\$)', 'ig');
                    var inputPos = 0;
                    var match;
                    while ((match = regex.exec(template)) !== null) {
                        latex += template.substring(inputPos, match.index);
                        inputPos = match.index;
                        if (match[0] === '$$') {
                            latex += '$';
                            inputPos++;
                        }
                        else {
                            inputPos += match[0].length;
                            var property = node[match[1]];
                            if (!property) {
                                throw new ReferenceError('Template: Property ' + match[1] + ' does not exist.');
                            }
                            if (match[2] === undefined) {
                                switch (typeof property) {
                                    case 'string':
                                        latex += property;
                                        break;
                                    case 'object':
                                        if (type.isNode(property)) {
                                            latex += property.toTex(options);
                                        }
                                        else if (Array.isArray(property)) {
                                            latex += property.map(function (arg, index) {
                                                if (type.isNode(arg)) {
                                                    return arg.toTex(options);
                                                }
                                                throw new TypeError('Template: ' + match[1] + '[' + index + '] is not a Node.');
                                            }).join(',');
                                        }
                                        else {
                                            throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');
                                        }
                                        break;
                                    default:
                                        throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');
                                }
                            }
                            else {
                                if (type.isNode(property[match[2]] && property[match[2]])) {
                                    latex += property[match[2]].toTex(options);
                                }
                                else {
                                    throw new TypeError('Template: ' + match[1] + '[' + match[2] + '] is not a Node.');
                                }
                            }
                        }
                    }
                    latex += template.slice(inputPos);
                    return latex;
                }
                var nodeToTex = FunctionNode.prototype.toTex;
                FunctionNode.prototype.toTex = function (options) {
                    var customTex;
                    if (options && (typeof options.handler === 'object') && hasOwnProperty(options.handler, this.name)) {
                        customTex = options.handler[this.name](this, options);
                    }
                    if (typeof customTex !== 'undefined') {
                        return customTex;
                    }
                    return nodeToTex.call(this, options);
                };
                FunctionNode.prototype._toTex = function (options) {
                    var args = this.args.map(function (arg) {
                        return arg.toTex(options);
                    });
                    var latexConverter;
                    if (math[this.name] && ((typeof math[this.name].toTex === 'function') || (typeof math[this.name].toTex === 'object') || (typeof math[this.name].toTex === 'string'))) {
                        latexConverter = math[this.name].toTex;
                    }
                    var customToTex;
                    switch (typeof latexConverter) {
                        case 'function':
                            customToTex = latexConverter(this, options);
                            break;
                        case 'string':
                            customToTex = expandTemplate(latexConverter, this, options);
                            break;
                        case 'object':
                            switch (typeof latexConverter[args.length]) {
                                case 'function':
                                    customToTex = latexConverter[args.length](this, options);
                                    break;
                                case 'string':
                                    customToTex = expandTemplate(latexConverter[args.length], this, options);
                                    break;
                            }
                    }
                    if (typeof customToTex !== 'undefined') {
                        return customToTex;
                    }
                    return expandTemplate(latex.defaultTemplate, this, options);
                };
                FunctionNode.prototype.getIdentifier = function () {
                    return this.type + ':' + this.name;
                };
                return FunctionNode;
            }
            exports.name = 'FunctionNode';
            exports.path = 'expression.node';
            exports.math = true;
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            var number = __webpack_require__(3);
            function factory(type, config, load, typed) {
                var isPositive = typed('isPositive', {
                    'number': function (x) {
                        return x > 0;
                    },
                    'BigNumber': function (x) {
                        return !x.isNeg() && !x.isZero() && !x.isNaN();
                    },
                    'Fraction': function (x) {
                        return x.s > 0 && x.n > 0;
                    },
                    'Unit': function (x) {
                        return isPositive(x.value);
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, isPositive);
                    }
                });
                return isPositive;
            }
            exports.name = 'isPositive';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            function factory(type, config, load, typed) {
                var sqrt = typed('sqrt', {
                    'number': _sqrtNumber,
                    'Complex': function (x) {
                        return x.sqrt();
                    },
                    'BigNumber': function (x) {
                        if (!x.isNegative() || config.predictable) {
                            return x.sqrt();
                        }
                        else {
                            return _sqrtNumber(x.toNumber());
                        }
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, sqrt, true);
                    },
                    'Unit': function (x) {
                        return x.pow(0.5);
                    }
                });
                function _sqrtNumber(x) {
                    if (x >= 0 || config.predictable) {
                        return Math.sqrt(x);
                    }
                    else {
                        return new type.Complex(x, 0).sqrt();
                    }
                }
                sqrt.toTex = { 1: '\\sqrt{${args[0]}}' };
                return sqrt;
            }
            exports.name = 'sqrt';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            var number = __webpack_require__(3);
            function factory(type, config, load, typed) {
                var isNegative = typed('isNegative', {
                    'number': function (x) {
                        return x < 0;
                    },
                    'BigNumber': function (x) {
                        return x.isNeg() && !x.isZero() && !x.isNaN();
                    },
                    'Fraction': function (x) {
                        return x.s < 0;
                    },
                    'Unit': function (x) {
                        return isNegative(x.value);
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, isNegative);
                    }
                });
                return isNegative;
            }
            exports.name = 'isNegative';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            module.exports = function isMatrix(x) {
                return x && x.constructor.prototype.isMatrix || false;
            };
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            exports.type = function (x) {
                var type = typeof x;
                if (type === 'object') {
                    if (x === null)
                        return 'null';
                    if (Array.isArray(x))
                        return 'Array';
                    if (x instanceof Date)
                        return 'Date';
                    if (x instanceof RegExp)
                        return 'RegExp';
                    if (x instanceof Boolean)
                        return 'boolean';
                    if (x instanceof Number)
                        return 'number';
                    if (x instanceof String)
                        return 'string';
                    return 'Object';
                }
                if (type === 'function')
                    return 'Function';
                return type;
            };
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var DimensionError = __webpack_require__(10);
            function factory(type, config, load, typed) {
                var equalScalar = load(__webpack_require__(11));
                var SparseMatrix = type.SparseMatrix;
                var algorithm05 = function (a, b, callback) {
                    var avalues = a._values;
                    var aindex = a._index;
                    var aptr = a._ptr;
                    var asize = a._size;
                    var adt = a._datatype;
                    var bvalues = b._values;
                    var bindex = b._index;
                    var bptr = b._ptr;
                    var bsize = b._size;
                    var bdt = b._datatype;
                    if (asize.length !== bsize.length)
                        throw new DimensionError(asize.length, bsize.length);
                    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
                        throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
                    var rows = asize[0];
                    var columns = asize[1];
                    var dt;
                    var eq = equalScalar;
                    var zero = 0;
                    var cf = callback;
                    if (typeof adt === 'string' && adt === bdt) {
                        dt = adt;
                        eq = typed.find(equalScalar, [dt, dt]);
                        zero = typed.convert(0, dt);
                        cf = typed.find(callback, [dt, dt]);
                    }
                    var cvalues = avalues && bvalues ? [] : undefined;
                    var cindex = [];
                    var cptr = [];
                    var c = new SparseMatrix({
                        values: cvalues,
                        index: cindex,
                        ptr: cptr,
                        size: [rows, columns],
                        datatype: dt
                    });
                    var xa = cvalues ? [] : undefined;
                    var xb = cvalues ? [] : undefined;
                    var wa = [];
                    var wb = [];
                    var i, j, k, k1;
                    for (j = 0; j < columns; j++) {
                        cptr[j] = cindex.length;
                        var mark = j + 1;
                        for (k = aptr[j], k1 = aptr[j + 1]; k < k1; k++) {
                            i = aindex[k];
                            cindex.push(i);
                            wa[i] = mark;
                            if (xa)
                                xa[i] = avalues[k];
                        }
                        for (k = bptr[j], k1 = bptr[j + 1]; k < k1; k++) {
                            i = bindex[k];
                            if (wa[i] !== mark) {
                                cindex.push(i);
                            }
                            wb[i] = mark;
                            if (xb)
                                xb[i] = bvalues[k];
                        }
                        if (cvalues) {
                            k = cptr[j];
                            while (k < cindex.length) {
                                i = cindex[k];
                                var wai = wa[i];
                                var wbi = wb[i];
                                if (wai === mark || wbi === mark) {
                                    var va = wai === mark ? xa[i] : zero;
                                    var vb = wbi === mark ? xb[i] : zero;
                                    var vc = cf(va, vb);
                                    if (!eq(vc, zero)) {
                                        cvalues.push(vc);
                                        k++;
                                    }
                                    else {
                                        cindex.splice(k, 1);
                                    }
                                }
                            }
                        }
                    }
                    cptr[columns] = cindex.length;
                    return c;
                };
                return algorithm05;
            }
            exports.name = 'algorithm05';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var array = __webpack_require__(2);
            var isInteger = __webpack_require__(3).isInteger;
            function factory(type, config, load, typed) {
                var matrix = load(__webpack_require__(0));
                var eye = typed('eye', {
                    '': function () {
                        return (config.matrix === 'Matrix') ? matrix([]) : [];
                    },
                    'string': function (format) {
                        return matrix(format);
                    },
                    'number | BigNumber': function (rows) {
                        return _eye(rows, rows, config.matrix === 'Matrix' ? 'default' : undefined);
                    },
                    'number | BigNumber, string': function (rows, format) {
                        return _eye(rows, rows, format);
                    },
                    'number | BigNumber, number | BigNumber': function (rows, cols) {
                        return _eye(rows, cols, config.matrix === 'Matrix' ? 'default' : undefined);
                    },
                    'number | BigNumber, number | BigNumber, string': function (rows, cols, format) {
                        return _eye(rows, cols, format);
                    },
                    'Array': function (size) {
                        return _eyeVector(size);
                    },
                    'Array, string': function (size, format) {
                        return _eyeVector(size, format);
                    },
                    'Matrix': function (size) {
                        return _eyeVector(size.valueOf(), size.storage());
                    },
                    'Matrix, string': function (size, format) {
                        return _eyeVector(size.valueOf(), format);
                    }
                });
                eye.toTex = undefined;
                return eye;
                function _eyeVector(size, format) {
                    switch (size.length) {
                        case 0: return format ? matrix(format) : [];
                        case 1: return _eye(size[0], size[0], format);
                        case 2: return _eye(size[0], size[1], format);
                        default: throw new Error('Vector containing two values expected');
                    }
                }
                function _eye(rows, cols, format) {
                    var Big = (type.isBigNumber(rows) || type.isBigNumber(cols))
                        ? type.BigNumber
                        : null;
                    if (type.isBigNumber(rows))
                        rows = rows.toNumber();
                    if (type.isBigNumber(cols))
                        cols = cols.toNumber();
                    if (!isInteger(rows) || rows < 1) {
                        throw new Error('Parameters in function eye must be positive integers');
                    }
                    if (!isInteger(cols) || cols < 1) {
                        throw new Error('Parameters in function eye must be positive integers');
                    }
                    var one = Big ? new type.BigNumber(1) : 1;
                    var defaultValue = Big ? new Big(0) : 0;
                    var size = [rows, cols];
                    if (format) {
                        var F = type.Matrix.storage(format);
                        return F.diagonal(size, one, 0, defaultValue);
                    }
                    var res = array.resize([], size, defaultValue);
                    var minimum = rows < cols ? rows : cols;
                    for (var d = 0; d < minimum; d++) {
                        res[d][d] = one;
                    }
                    return res;
                }
            }
            exports.name = 'eye';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var latex = __webpack_require__(4);
            var map = __webpack_require__(2).map;
            var join = __webpack_require__(2).join;
            var stringify = __webpack_require__(9).stringify;
            var escape = __webpack_require__(9).escape;
            var isSafeMethod = __webpack_require__(13).isSafeMethod;
            var operators = __webpack_require__(52);
            function factory(type, config, load, typed) {
                var register = load(__webpack_require__(7)).register;
                var compile = load(__webpack_require__(7)).compile;
                var Node = load(__webpack_require__(14));
                var ConstantNode = load(__webpack_require__(53));
                var SymbolNode = load(__webpack_require__(40));
                var FunctionNode = load(__webpack_require__(54));
                function OperatorNode(op, fn, args, implicit) {
                    if (!(this instanceof OperatorNode)) {
                        throw new SyntaxError('Constructor must be called with the new operator');
                    }
                    if (typeof op !== 'string') {
                        throw new TypeError('string expected for parameter "op"');
                    }
                    if (typeof fn !== 'string') {
                        throw new TypeError('string expected for parameter "fn"');
                    }
                    if (!Array.isArray(args) || !args.every(type.isNode)) {
                        throw new TypeError('Array containing Nodes expected for parameter "args"');
                    }
                    this.implicit = (implicit === true);
                    this.op = op;
                    this.fn = fn;
                    this.args = args || [];
                }
                OperatorNode.prototype = new Node();
                OperatorNode.prototype.type = 'OperatorNode';
                OperatorNode.prototype.isOperatorNode = true;
                function compileOperatorNode(node, defs, args) {
                    if (!(node instanceof OperatorNode)) {
                        throw new TypeError('No valid OperatorNode');
                    }
                    if (typeof node.fn !== 'string' || !isSafeMethod(defs.math, node.fn)) {
                        if (!defs.math[node.fn]) {
                            throw new Error('Function ' + node.fn + ' missing in provided namespace "math"');
                        }
                        else {
                            throw new Error('No access to function "' + node.fn + '"');
                        }
                    }
                    var jsArgs = map(node.args, function (arg) {
                        return compile(arg, defs, args);
                    });
                    return 'math[' + stringify(node.fn) + '](' + join(jsArgs, ', ') + ')';
                }
                register(OperatorNode.prototype.type, compileOperatorNode);
                OperatorNode.prototype.forEach = function (callback) {
                    for (var i = 0; i < this.args.length; i++) {
                        callback(this.args[i], 'args[' + i + ']', this);
                    }
                };
                OperatorNode.prototype.map = function (callback) {
                    var args = [];
                    for (var i = 0; i < this.args.length; i++) {
                        args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));
                    }
                    return new OperatorNode(this.op, this.fn, args);
                };
                OperatorNode.prototype.clone = function () {
                    return new OperatorNode(this.op, this.fn, this.args.slice(0), this.implicit);
                };
                function calculateNecessaryParentheses(root, parenthesis, implicit, args, latex) {
                    var precedence = operators.getPrecedence(root, parenthesis);
                    var associativity = operators.getAssociativity(root, parenthesis);
                    if ((parenthesis === 'all') || ((args.length > 2) && (root.getIdentifier() !== 'OperatorNode:add') && (root.getIdentifier() !== 'OperatorNode:multiply'))) {
                        var parens = args.map(function (arg) {
                            switch (arg.getContent().type) {
                                case 'ArrayNode':
                                case 'ConstantNode':
                                case 'SymbolNode':
                                case 'ParenthesisNode':
                                    return false;
                                    break;
                                default:
                                    return true;
                            }
                        });
                        return parens;
                    }
                    var result = undefined;
                    switch (args.length) {
                        case 0:
                            result = [];
                            break;
                        case 1:
                            var operandPrecedence = operators.getPrecedence(args[0], parenthesis);
                            if (latex && (operandPrecedence !== null)) {
                                var operandIdentifier;
                                var rootIdentifier;
                                if (parenthesis === 'keep') {
                                    operandIdentifier = args[0].getIdentifier();
                                    rootIdentifier = root.getIdentifier();
                                }
                                else {
                                    operandIdentifier = args[0].getContent().getIdentifier();
                                    rootIdentifier = root.getContent().getIdentifier();
                                }
                                if (operators.properties[precedence][rootIdentifier].latexLeftParens === false) {
                                    result = [false];
                                    break;
                                }
                                if (operators.properties[operandPrecedence][operandIdentifier].latexParens === false) {
                                    result = [false];
                                    break;
                                }
                            }
                            if (operandPrecedence === null) {
                                result = [false];
                                break;
                            }
                            if (operandPrecedence <= precedence) {
                                result = [true];
                                break;
                            }
                            result = [false];
                            break;
                        case 2:
                            var lhsParens;
                            var lhsPrecedence = operators.getPrecedence(args[0], parenthesis);
                            var assocWithLhs = operators.isAssociativeWith(root, args[0], parenthesis);
                            if (lhsPrecedence === null) {
                                lhsParens = false;
                            }
                            else if ((lhsPrecedence === precedence) && (associativity === 'right') && !assocWithLhs) {
                                lhsParens = true;
                            }
                            else if (lhsPrecedence < precedence) {
                                lhsParens = true;
                            }
                            else {
                                lhsParens = false;
                            }
                            var rhsParens;
                            var rhsPrecedence = operators.getPrecedence(args[1], parenthesis);
                            var assocWithRhs = operators.isAssociativeWith(root, args[1], parenthesis);
                            if (rhsPrecedence === null) {
                                rhsParens = false;
                            }
                            else if ((rhsPrecedence === precedence) && (associativity === 'left') && !assocWithRhs) {
                                rhsParens = true;
                            }
                            else if (rhsPrecedence < precedence) {
                                rhsParens = true;
                            }
                            else {
                                rhsParens = false;
                            }
                            if (latex) {
                                var rootIdentifier;
                                var lhsIdentifier;
                                var rhsIdentifier;
                                if (parenthesis === 'keep') {
                                    rootIdentifier = root.getIdentifier();
                                    lhsIdentifier = root.args[0].getIdentifier();
                                    rhsIdentifier = root.args[1].getIdentifier();
                                }
                                else {
                                    rootIdentifier = root.getContent().getIdentifier();
                                    lhsIdentifier = root.args[0].getContent().getIdentifier();
                                    rhsIdentifier = root.args[1].getContent().getIdentifier();
                                }
                                if (lhsPrecedence !== null) {
                                    if (operators.properties[precedence][rootIdentifier].latexLeftParens === false) {
                                        lhsParens = false;
                                    }
                                    if (operators.properties[lhsPrecedence][lhsIdentifier].latexParens === false) {
                                        lhsParens = false;
                                    }
                                }
                                if (rhsPrecedence !== null) {
                                    if (operators.properties[precedence][rootIdentifier].latexRightParens === false) {
                                        rhsParens = false;
                                    }
                                    if (operators.properties[rhsPrecedence][rhsIdentifier].latexParens === false) {
                                        rhsParens = false;
                                    }
                                }
                            }
                            result = [lhsParens, rhsParens];
                            break;
                        default:
                            if ((root.getIdentifier() === 'OperatorNode:add') || (root.getIdentifier() === 'OperatorNode:multiply')) {
                                var result = args.map(function (arg) {
                                    var argPrecedence = operators.getPrecedence(arg, parenthesis);
                                    var assocWithArg = operators.isAssociativeWith(root, arg, parenthesis);
                                    var argAssociativity = operators.getAssociativity(arg, parenthesis);
                                    if (argPrecedence === null) {
                                        return false;
                                    }
                                    else if ((precedence === argPrecedence) && (associativity === argAssociativity) && !assocWithArg) {
                                        return true;
                                    }
                                    else if (argPrecedence < precedence) {
                                        return true;
                                    }
                                    return false;
                                });
                            }
                            break;
                    }
                    if ((args.length >= 2) && (root.getIdentifier() === 'OperatorNode:multiply') && root.implicit && (parenthesis === 'auto') && (implicit === 'hide')) {
                        result = args.map(function (arg, index) {
                            var isParenthesisNode = (arg.getIdentifier() === 'ParenthesisNode');
                            if (result[index] || isParenthesisNode) {
                                return true;
                            }
                            return false;
                        });
                    }
                    return result;
                }
                OperatorNode.prototype._toString = function (options) {
                    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';
                    var implicit = (options && options.implicit) ? options.implicit : 'hide';
                    var args = this.args;
                    var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, false);
                    if (args.length === 1) {
                        var assoc = operators.getAssociativity(this, parenthesis);
                        var operand = args[0].toString(options);
                        if (parens[0]) {
                            operand = '(' + operand + ')';
                        }
                        if (assoc === 'right') {
                            return this.op + operand;
                        }
                        else if (assoc === 'left') {
                            return operand + this.op;
                        }
                        return operand + this.op;
                    }
                    else if (args.length == 2) {
                        var lhs = args[0].toString(options);
                        var rhs = args[1].toString(options);
                        if (parens[0]) {
                            lhs = '(' + lhs + ')';
                        }
                        if (parens[1]) {
                            rhs = '(' + rhs + ')';
                        }
                        if (this.implicit && (this.getIdentifier() === 'OperatorNode:multiply') && (implicit == 'hide')) {
                            return lhs + ' ' + rhs;
                        }
                        return lhs + ' ' + this.op + ' ' + rhs;
                    }
                    else if ((args.length > 2) && ((this.getIdentifier() === 'OperatorNode:add') || (this.getIdentifier() === 'OperatorNode:multiply'))) {
                        var stringifiedArgs = args.map(function (arg, index) {
                            arg = arg.toString(options);
                            if (parens[index]) {
                                arg = '(' + arg + ')';
                            }
                            return arg;
                        });
                        if (this.implicit && (this.getIdentifier() === 'OperatorNode:multiply') && (implicit === 'hide')) {
                            return stringifiedArgs.join(' ');
                        }
                        return stringifiedArgs.join(' ' + this.op + ' ');
                    }
                    else {
                        return this.fn + '(' + this.args.join(', ') + ')';
                    }
                };
                OperatorNode.prototype.toHTML = function (options) {
                    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';
                    var implicit = (options && options.implicit) ? options.implicit : 'hide';
                    var args = this.args;
                    var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, false);
                    if (args.length === 1) {
                        var assoc = operators.getAssociativity(this, parenthesis);
                        var operand = args[0].toHTML(options);
                        if (parens[0]) {
                            operand = '<span class="math-parenthesis math-round-parenthesis">(</span>' + operand + '<span class="math-parenthesis math-round-parenthesis">)</span>';
                        }
                        if (assoc === 'right') {
                            return '<span class="math-operator math-unary-operator math-lefthand-unary-operator">' + escape(this.op) + '</span>' + operand;
                        }
                        else if (assoc === 'left') {
                            return '<span class="math-operator math-unary-operator math-righthand-unary-operator">' + escape(this.op) + '</span>' + operand;
                        }
                        return '<span class="math-operator math-unary-operator math-righthand-unary-operator">' + escape(this.op) + '</span>' + operand;
                    }
                    else if (args.length == 2) {
                        var lhs = args[0].toHTML(options);
                        var rhs = args[1].toHTML(options);
                        if (parens[0]) {
                            lhs = '<span class="math-parenthesis math-round-parenthesis">(</span>' + lhs + '<span class="math-parenthesis math-round-parenthesis">)</span>';
                        }
                        if (parens[1]) {
                            rhs = '<span class="math-parenthesis math-round-parenthesis">(</span>' + rhs + '<span class="math-parenthesis math-round-parenthesis">)</span>';
                        }
                        if (this.implicit && (this.getIdentifier() === 'OperatorNode:multiply') && (implicit == 'hide')) {
                            return lhs + '<span class="math-operator math-binary-operator math-implicit-binary-operator"></span>' + rhs;
                        }
                        return lhs + '<span class="math-operator math-binary-operator math-explicit-binary-operator">' + escape(this.op) + '</span>' + rhs;
                    }
                    else if ((args.length > 2) && ((this.getIdentifier() === 'OperatorNode:add') || (this.getIdentifier() === 'OperatorNode:multiply'))) {
                        var stringifiedArgs = args.map(function (arg, index) {
                            arg = arg.toHTML(options);
                            if (parens[index]) {
                                arg = '<span class="math-parenthesis math-round-parenthesis">(</span>' + arg + '<span class="math-parenthesis math-round-parenthesis">)</span>';
                            }
                            return arg;
                        });
                        if (this.implicit && (this.getIdentifier() === 'OperatorNode:multiply') && (implicit === 'hide')) {
                            return stringifiedArgs.join('<span class="math-operator math-binary-operator math-implicit-binary-operator"></span>');
                        }
                        return stringifiedArgs.join('<span class="math-operator math-binary-operator math-explicit-binary-operator">' + escape(this.op) + '</span>');
                    }
                    else {
                        return '<span class="math-function">' + escape(this.fn) + '</span><span class="math-paranthesis math-round-parenthesis">(</span>' + stringifiedArgs.join('<span class="math-separator">,</span>') + '<span class="math-paranthesis math-round-parenthesis">)</span>';
                    }
                };
                OperatorNode.prototype._toTex = function (options) {
                    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';
                    var implicit = (options && options.implicit) ? options.implicit : 'hide';
                    var args = this.args;
                    var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, true);
                    var op = latex.operators[this.fn];
                    op = typeof op === 'undefined' ? this.op : op;
                    if (args.length === 1) {
                        var assoc = operators.getAssociativity(this, parenthesis);
                        var operand = args[0].toTex(options);
                        if (parens[0]) {
                            operand = '\\left(' + operand + '\\right)';
                        }
                        if (assoc === 'right') {
                            return op + operand;
                        }
                        else if (assoc === 'left') {
                            return operand + op;
                        }
                        return operand + op;
                    }
                    else if (args.length === 2) {
                        var lhs = args[0];
                        var lhsTex = lhs.toTex(options);
                        if (parens[0]) {
                            lhsTex = '\\left(' + lhsTex + '\\right)';
                        }
                        var rhs = args[1];
                        var rhsTex = rhs.toTex(options);
                        if (parens[1]) {
                            rhsTex = '\\left(' + rhsTex + '\\right)';
                        }
                        var lhsIdentifier;
                        if (parenthesis === 'keep') {
                            lhsIdentifier = lhs.getIdentifier();
                        }
                        else {
                            lhsIdentifier = lhs.getContent().getIdentifier();
                        }
                        switch (this.getIdentifier()) {
                            case 'OperatorNode:divide':
                                return op + '{' + lhsTex + '}' + '{' + rhsTex + '}';
                            case 'OperatorNode:pow':
                                lhsTex = '{' + lhsTex + '}';
                                rhsTex = '{' + rhsTex + '}';
                                switch (lhsIdentifier) {
                                    case 'ConditionalNode':
                                    case 'OperatorNode:divide':
                                        lhsTex = '\\left(' + lhsTex + '\\right)';
                                }
                            case 'OperatorNode:multiply':
                                if (this.implicit && (implicit === 'hide')) {
                                    return lhsTex + '~' + rhsTex;
                                }
                        }
                        return lhsTex + op + rhsTex;
                    }
                    else if ((args.length > 2) && ((this.getIdentifier() === 'OperatorNode:add') || (this.getIdentifier() === 'OperatorNode:multiply'))) {
                        var texifiedArgs = args.map(function (arg, index) {
                            arg = arg.toTex(options);
                            if (parens[index]) {
                                arg = '\\left(' + arg + '\\right)';
                            }
                            return arg;
                        });
                        if ((this.getIdentifier() === 'OperatorNode:multiply') && this.implicit) {
                            return texifiedArgs.join('~');
                        }
                        return texifiedArgs.join(op);
                    }
                    else {
                        return '\\mathrm{' + this.fn + '}\\left('
                            + args.map(function (arg) {
                                return arg.toTex(options);
                            }).join(',') + '\\right)';
                    }
                };
                OperatorNode.prototype.getIdentifier = function () {
                    return this.type + ':' + this.fn;
                };
                return OperatorNode;
            }
            exports.name = 'OperatorNode';
            exports.path = 'expression.node';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load, typed) {
                var register = load(__webpack_require__(7)).register;
                var compile = load(__webpack_require__(7)).compile;
                var Node = load(__webpack_require__(14));
                function ParenthesisNode(content) {
                    if (!(this instanceof ParenthesisNode)) {
                        throw new SyntaxError('Constructor must be called with the new operator');
                    }
                    if (!type.isNode(content)) {
                        throw new TypeError('Node expected for parameter "content"');
                    }
                    this.content = content;
                }
                ParenthesisNode.prototype = new Node();
                ParenthesisNode.prototype.type = 'ParenthesisNode';
                ParenthesisNode.prototype.isParenthesisNode = true;
                function compileParenthesisNode(node, defs, args) {
                    if (!(node instanceof ParenthesisNode)) {
                        throw new TypeError('No valid ParenthesisNode');
                    }
                    return compile(node.content, defs, args);
                }
                register(ParenthesisNode.prototype.type, compileParenthesisNode);
                ParenthesisNode.prototype.getContent = function () {
                    return this.content.getContent();
                };
                ParenthesisNode.prototype.forEach = function (callback) {
                    callback(this.content, 'content', this);
                };
                ParenthesisNode.prototype.map = function (callback) {
                    var content = callback(this.content, 'content', this);
                    return new ParenthesisNode(content);
                };
                ParenthesisNode.prototype.clone = function () {
                    return new ParenthesisNode(this.content);
                };
                ParenthesisNode.prototype._toString = function (options) {
                    if ((!options) || (options && !options.parenthesis) || (options && options.parenthesis === 'keep')) {
                        return '(' + this.content.toString(options) + ')';
                    }
                    return this.content.toString(options);
                };
                ParenthesisNode.prototype.toHTML = function (options) {
                    if ((!options) || (options && !options.parenthesis) || (options && options.parenthesis === 'keep')) {
                        return '<span class="math-parenthesis math-round-parenthesis">(</span>' + this.content.toHTML(options) + '<span class="math-parenthesis math-round-parenthesis">)</span>';
                    }
                    return this.content.toHTML(options);
                };
                ParenthesisNode.prototype._toTex = function (options) {
                    if ((!options) || (options && !options.parenthesis) || (options && options.parenthesis === 'keep')) {
                        return '\\left(' + this.content.toTex(options) + '\\right)';
                    }
                    return this.content.toTex(options);
                };
                return ParenthesisNode;
            }
            exports.name = 'ParenthesisNode';
            exports.path = 'expression.node';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var clone = __webpack_require__(5).clone;
            var isInteger = __webpack_require__(3).isInteger;
            var array = __webpack_require__(2);
            var IndexError = __webpack_require__(51);
            var DimensionError = __webpack_require__(10);
            function factory(type, config, load, typed) {
                var matrix = load(__webpack_require__(0));
                var concat = typed('concat', {
                    '...Array | Matrix | number | BigNumber': function (args) {
                        var i;
                        var len = args.length;
                        var dim = -1;
                        var prevDim;
                        var asMatrix = false;
                        var matrices = [];
                        for (i = 0; i < len; i++) {
                            var arg = args[i];
                            if (type.isMatrix(arg)) {
                                asMatrix = true;
                            }
                            if (type.isNumber(arg) || type.isBigNumber(arg)) {
                                if (i !== len - 1) {
                                    throw new Error('Dimension must be specified as last argument');
                                }
                                prevDim = dim;
                                dim = arg.valueOf();
                                if (!isInteger(dim)) {
                                    throw new TypeError('Integer number expected for dimension');
                                }
                                if (dim < 0 || (i > 0 && dim > prevDim)) {
                                    throw new IndexError(dim, prevDim + 1);
                                }
                            }
                            else {
                                var m = clone(arg).valueOf();
                                var size = array.size(m);
                                matrices[i] = m;
                                prevDim = dim;
                                dim = size.length - 1;
                                if (i > 0 && dim != prevDim) {
                                    throw new DimensionError(prevDim + 1, dim + 1);
                                }
                            }
                        }
                        if (matrices.length == 0) {
                            throw new SyntaxError('At least one matrix expected');
                        }
                        var res = matrices.shift();
                        while (matrices.length) {
                            res = _concat(res, matrices.shift(), dim, 0);
                        }
                        return asMatrix ? matrix(res) : res;
                    },
                    '...string': function (args) {
                        return args.join('');
                    }
                });
                concat.toTex = undefined;
                return concat;
            }
            function _concat(a, b, concatDim, dim) {
                if (dim < concatDim) {
                    if (a.length != b.length) {
                        throw new DimensionError(a.length, b.length);
                    }
                    var c = [];
                    for (var i = 0; i < a.length; i++) {
                        c[i] = _concat(a[i], b[i], concatDim, dim + 1);
                    }
                    return c;
                }
                else {
                    return a.concat(b);
                }
            }
            exports.name = 'concat';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var arraySize = __webpack_require__(2).size;
            var isMatrix = __webpack_require__(58);
            var IndexError = __webpack_require__(51);
            module.exports = function (mat, dim, callback) {
                var size = Array.isArray(mat) ? arraySize(mat) : mat.size();
                if (dim < 0 || (dim >= size.length)) {
                    throw new IndexError(dim, size.length);
                }
                if (isMatrix(mat)) {
                    return mat.create(_reduce(mat.valueOf(), dim, callback));
                }
                else {
                    return _reduce(mat, dim, callback);
                }
            };
            function _reduce(mat, dim, callback) {
                var i, ret, val, tran;
                if (dim <= 0) {
                    if (!Array.isArray(mat[0])) {
                        val = mat[0];
                        for (i = 1; i < mat.length; i++) {
                            val = callback(val, mat[i]);
                        }
                        return val;
                    }
                    else {
                        tran = _switch(mat);
                        ret = [];
                        for (i = 0; i < tran.length; i++) {
                            ret[i] = _reduce(tran[i], dim - 1, callback);
                        }
                        return ret;
                    }
                }
                else {
                    ret = [];
                    for (i = 0; i < mat.length; i++) {
                        ret[i] = _reduce(mat[i], dim - 1, callback);
                    }
                    return ret;
                }
            }
            function _switch(mat) {
                var I = mat.length;
                var J = mat[0].length;
                var i, j;
                var ret = [];
                for (j = 0; j < J; j++) {
                    var tmp = [];
                    for (i = 0; i < I; i++) {
                        tmp.push(mat[i][j]);
                    }
                    ret.push(tmp);
                }
                return ret;
            }
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var isCollection = __webpack_require__(46);
            module.exports = function containsCollections(array) {
                for (var i = 0; i < array.length; i++) {
                    if (isCollection(array[i])) {
                        return true;
                    }
                }
                return false;
            };
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var clone = __webpack_require__(5).clone;
            var format = __webpack_require__(9).format;
            function factory(type, config, load, typed) {
                var latex = __webpack_require__(4);
                var matrix = load(__webpack_require__(0));
                var DenseMatrix = type.DenseMatrix, SparseMatrix = type.SparseMatrix;
                var transpose = typed('transpose', {
                    'Array': function (x) {
                        return transpose(matrix(x)).valueOf();
                    },
                    'Matrix': function (x) {
                        var size = x.size();
                        var c;
                        switch (size.length) {
                            case 1:
                                c = x.clone();
                                break;
                            case 2:
                                var rows = size[0];
                                var columns = size[1];
                                if (columns === 0) {
                                    throw new RangeError('Cannot transpose a 2D matrix with no columns (size: ' + format(size) + ')');
                                }
                                switch (x.storage()) {
                                    case 'dense':
                                        c = _denseTranspose(x, rows, columns);
                                        break;
                                    case 'sparse':
                                        c = _sparseTranspose(x, rows, columns);
                                        break;
                                }
                                break;
                            default:
                                throw new RangeError('Matrix must be a vector or two dimensional (size: ' + format(this._size) + ')');
                        }
                        return c;
                    },
                    'any': function (x) {
                        return clone(x);
                    }
                });
                var _denseTranspose = function (m, rows, columns) {
                    var data = m._data;
                    var transposed = [];
                    var transposedRow;
                    for (var j = 0; j < columns; j++) {
                        transposedRow = transposed[j] = [];
                        for (var i = 0; i < rows; i++) {
                            transposedRow[i] = clone(data[i][j]);
                        }
                    }
                    return new DenseMatrix({
                        data: transposed,
                        size: [columns, rows],
                        datatype: m._datatype
                    });
                };
                var _sparseTranspose = function (m, rows, columns) {
                    var values = m._values;
                    var index = m._index;
                    var ptr = m._ptr;
                    var cvalues = values ? [] : undefined;
                    var cindex = [];
                    var cptr = [];
                    var w = [];
                    for (var x = 0; x < rows; x++)
                        w[x] = 0;
                    var p, l, j;
                    for (p = 0, l = index.length; p < l; p++) {
                        w[index[p]]++;
                    }
                    var sum = 0;
                    for (var i = 0; i < rows; i++) {
                        cptr.push(sum);
                        sum += w[i];
                        w[i] = cptr[i];
                    }
                    cptr.push(sum);
                    for (j = 0; j < columns; j++) {
                        for (var k0 = ptr[j], k1 = ptr[j + 1], k = k0; k < k1; k++) {
                            var q = w[index[k]]++;
                            cindex[q] = j;
                            if (values)
                                cvalues[q] = clone(values[k]);
                        }
                    }
                    return new SparseMatrix({
                        values: cvalues,
                        index: cindex,
                        ptr: cptr,
                        size: [columns, rows],
                        datatype: m._datatype
                    });
                };
                transpose.toTex = { 1: '\\left(${args[0]}\\right)' + latex.operators['transpose'] };
                return transpose;
            }
            exports.name = 'transpose';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var scatter = __webpack_require__(436);
            var DimensionError = __webpack_require__(10);
            function factory(type, config, load, typed) {
                var equalScalar = load(__webpack_require__(11));
                var SparseMatrix = type.SparseMatrix;
                var algorithm06 = function (a, b, callback) {
                    var avalues = a._values;
                    var asize = a._size;
                    var adt = a._datatype;
                    var bvalues = b._values;
                    var bsize = b._size;
                    var bdt = b._datatype;
                    if (asize.length !== bsize.length)
                        throw new DimensionError(asize.length, bsize.length);
                    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
                        throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
                    var rows = asize[0];
                    var columns = asize[1];
                    var dt;
                    var eq = equalScalar;
                    var zero = 0;
                    var cf = callback;
                    if (typeof adt === 'string' && adt === bdt) {
                        dt = adt;
                        eq = typed.find(equalScalar, [dt, dt]);
                        zero = typed.convert(0, dt);
                        cf = typed.find(callback, [dt, dt]);
                    }
                    var cvalues = avalues && bvalues ? [] : undefined;
                    var cindex = [];
                    var cptr = [];
                    var c = new SparseMatrix({
                        values: cvalues,
                        index: cindex,
                        ptr: cptr,
                        size: [rows, columns],
                        datatype: dt
                    });
                    var x = cvalues ? [] : undefined;
                    var w = [];
                    var u = [];
                    for (var j = 0; j < columns; j++) {
                        cptr[j] = cindex.length;
                        var mark = j + 1;
                        scatter(a, j, w, x, u, mark, c, cf);
                        scatter(b, j, w, x, u, mark, c, cf);
                        if (x) {
                            var k = cptr[j];
                            while (k < cindex.length) {
                                var i = cindex[k];
                                if (u[i] === mark) {
                                    var v = x[i];
                                    if (!eq(v, zero)) {
                                        cvalues.push(v);
                                        k++;
                                    }
                                    else {
                                        cindex.splice(k, 1);
                                    }
                                }
                                else {
                                    cindex.splice(k, 1);
                                }
                            }
                        }
                        else {
                            var p = cptr[j];
                            while (p < cindex.length) {
                                var r = cindex[p];
                                if (u[r] !== mark) {
                                    cindex.splice(p, 1);
                                }
                                else {
                                    p++;
                                }
                            }
                        }
                    }
                    cptr[columns] = cindex.length;
                    return c;
                };
                return algorithm06;
            }
            exports.name = 'algorithm06';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            function factory(type, config, load, typed) {
                var gamma = load(__webpack_require__(137));
                var latex = __webpack_require__(4);
                var factorial = typed('factorial', {
                    'number': function (n) {
                        if (n < 0) {
                            throw new Error('Value must be non-negative');
                        }
                        return gamma(n + 1);
                    },
                    'BigNumber': function (n) {
                        if (n.isNegative()) {
                            throw new Error('Value must be non-negative');
                        }
                        return gamma(n.plus(1));
                    },
                    'Array | Matrix': function (n) {
                        return deepMap(n, factorial);
                    }
                });
                factorial.toTex = {
                    1: '\\left(${args[0]}\\right)' + latex.operators['factorial']
                };
                return factorial;
            }
            exports.name = 'factorial';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var isInteger = __webpack_require__(3).isInteger;
            function factory(type, config, load, typed) {
                var combinations = typed('combinations', {
                    'number, number': function (n, k) {
                        var max, result, i;
                        if (!isInteger(n) || n < 0) {
                            throw new TypeError('Positive integer value expected in function combinations');
                        }
                        if (!isInteger(k) || k < 0) {
                            throw new TypeError('Positive integer value expected in function combinations');
                        }
                        if (k > n) {
                            throw new TypeError('k must be less than or equal to n');
                        }
                        max = Math.max(k, n - k);
                        result = 1;
                        for (i = 1; i <= n - max; i++) {
                            result = result * (max + i) / i;
                        }
                        return result;
                    },
                    'BigNumber, BigNumber': function (n, k) {
                        var max, result, i, ii;
                        var one = new type.BigNumber(1);
                        if (!isPositiveInteger(n) || !isPositiveInteger(k)) {
                            throw new TypeError('Positive integer value expected in function combinations');
                        }
                        if (k.gt(n)) {
                            throw new TypeError('k must be less than n in function combinations');
                        }
                        max = n.minus(k);
                        if (k.lt(max))
                            max = k;
                        result = one;
                        for (i = one, ii = n.minus(max); i.lte(ii); i = i.plus(1)) {
                            result = result.times(max.plus(i)).dividedBy(i);
                        }
                        return result;
                    }
                });
                combinations.toTex = { 2: '\\binom{${args[0]}}{${args[1]}}' };
                return combinations;
            }
            function isPositiveInteger(n) {
                return n.isInteger() && n.gte(0);
            }
            exports.name = 'combinations';
            exports.factory = factory;
        }),
        (function (module, exports) {
            module.exports = function isBigNumber(x) {
                return x && x.constructor.prototype.isBigNumber || false;
            };
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var util = __webpack_require__(25);
            var string = util.string;
            var isString = string.isString;
            function factory(type, config, load, typed) {
                function Matrix() {
                    if (!(this instanceof Matrix)) {
                        throw new SyntaxError('Constructor must be called with the new operator');
                    }
                }
                Matrix.prototype.type = 'Matrix';
                Matrix.prototype.isMatrix = true;
                Matrix.storage = function (format) {
                    if (!isString(format)) {
                        throw new TypeError('format must be a string value');
                    }
                    var constructor = Matrix._storage[format];
                    if (!constructor) {
                        throw new SyntaxError('Unsupported matrix storage format: ' + format);
                    }
                    return constructor;
                };
                Matrix._storage = {};
                Matrix.prototype.storage = function () {
                    throw new Error('Cannot invoke storage on a Matrix interface');
                };
                Matrix.prototype.datatype = function () {
                    throw new Error('Cannot invoke datatype on a Matrix interface');
                };
                Matrix.prototype.create = function (data, datatype) {
                    throw new Error('Cannot invoke create on a Matrix interface');
                };
                Matrix.prototype.subset = function (index, replacement, defaultValue) {
                    throw new Error('Cannot invoke subset on a Matrix interface');
                };
                Matrix.prototype.get = function (index) {
                    throw new Error('Cannot invoke get on a Matrix interface');
                };
                Matrix.prototype.set = function (index, value, defaultValue) {
                    throw new Error('Cannot invoke set on a Matrix interface');
                };
                Matrix.prototype.resize = function (size, defaultValue) {
                    throw new Error('Cannot invoke resize on a Matrix interface');
                };
                Matrix.prototype.reshape = function (size, defaultValue) {
                    throw new Error('Cannot invoke reshape on a Matrix interface');
                };
                Matrix.prototype.clone = function () {
                    throw new Error('Cannot invoke clone on a Matrix interface');
                };
                Matrix.prototype.size = function () {
                    throw new Error('Cannot invoke size on a Matrix interface');
                };
                Matrix.prototype.map = function (callback, skipZeros) {
                    throw new Error('Cannot invoke map on a Matrix interface');
                };
                Matrix.prototype.forEach = function (callback) {
                    throw new Error('Cannot invoke forEach on a Matrix interface');
                };
                Matrix.prototype.toArray = function () {
                    throw new Error('Cannot invoke toArray on a Matrix interface');
                };
                Matrix.prototype.valueOf = function () {
                    throw new Error('Cannot invoke valueOf on a Matrix interface');
                };
                Matrix.prototype.format = function (options) {
                    throw new Error('Cannot invoke format on a Matrix interface');
                };
                Matrix.prototype.toString = function () {
                    throw new Error('Cannot invoke toString on a Matrix interface');
                };
                return Matrix;
            }
            exports.name = 'Matrix';
            exports.path = 'type';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var DimensionError = __webpack_require__(10);
            function factory(type, config, load, typed) {
                var equalScalar = load(__webpack_require__(11));
                var SparseMatrix = type.SparseMatrix;
                var algorithm04 = function (a, b, callback) {
                    var avalues = a._values;
                    var aindex = a._index;
                    var aptr = a._ptr;
                    var asize = a._size;
                    var adt = a._datatype;
                    var bvalues = b._values;
                    var bindex = b._index;
                    var bptr = b._ptr;
                    var bsize = b._size;
                    var bdt = b._datatype;
                    if (asize.length !== bsize.length)
                        throw new DimensionError(asize.length, bsize.length);
                    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
                        throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
                    var rows = asize[0];
                    var columns = asize[1];
                    var dt;
                    var eq = equalScalar;
                    var zero = 0;
                    var cf = callback;
                    if (typeof adt === 'string' && adt === bdt) {
                        dt = adt;
                        eq = typed.find(equalScalar, [dt, dt]);
                        zero = typed.convert(0, dt);
                        cf = typed.find(callback, [dt, dt]);
                    }
                    var cvalues = avalues && bvalues ? [] : undefined;
                    var cindex = [];
                    var cptr = [];
                    var c = new SparseMatrix({
                        values: cvalues,
                        index: cindex,
                        ptr: cptr,
                        size: [rows, columns],
                        datatype: dt
                    });
                    var xa = avalues && bvalues ? [] : undefined;
                    var xb = avalues && bvalues ? [] : undefined;
                    var wa = [];
                    var wb = [];
                    var i, j, k, k0, k1;
                    for (j = 0; j < columns; j++) {
                        cptr[j] = cindex.length;
                        var mark = j + 1;
                        for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
                            i = aindex[k];
                            cindex.push(i);
                            wa[i] = mark;
                            if (xa)
                                xa[i] = avalues[k];
                        }
                        for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
                            i = bindex[k];
                            if (wa[i] === mark) {
                                if (xa) {
                                    var v = cf(xa[i], bvalues[k]);
                                    if (!eq(v, zero)) {
                                        xa[i] = v;
                                    }
                                    else {
                                        wa[i] = null;
                                    }
                                }
                            }
                            else {
                                cindex.push(i);
                                wb[i] = mark;
                                if (xb)
                                    xb[i] = bvalues[k];
                            }
                        }
                        if (xa && xb) {
                            k = cptr[j];
                            while (k < cindex.length) {
                                i = cindex[k];
                                if (wa[i] === mark) {
                                    cvalues[k] = xa[i];
                                    k++;
                                }
                                else if (wb[i] === mark) {
                                    cvalues[k] = xb[i];
                                    k++;
                                }
                                else {
                                    cindex.splice(k, 1);
                                }
                            }
                        }
                    }
                    cptr[columns] = cindex.length;
                    return c;
                };
                return algorithm04;
            }
            exports.name = 'algorithm04';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            function factory(type, config, load, typed) {
                var number = typed('number', {
                    '': function () {
                        return 0;
                    },
                    'number': function (x) {
                        return x;
                    },
                    'string': function (x) {
                        var num = Number(x);
                        if (isNaN(num)) {
                            throw new SyntaxError('String "' + x + '" is no valid number');
                        }
                        return num;
                    },
                    'BigNumber': function (x) {
                        return x.toNumber();
                    },
                    'Fraction': function (x) {
                        return x.valueOf();
                    },
                    'Unit': function (x) {
                        throw new Error('Second argument with valueless unit expected');
                    },
                    'Unit, string | Unit': function (unit, valuelessUnit) {
                        return unit.toNumber(valuelessUnit);
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, number);
                    }
                });
                number.toTex = {
                    0: '0',
                    1: '\\left(${args[0]}\\right)',
                    2: '\\left(\\left(${args[0]}\\right)${args[1]}\\right)'
                };
                return number;
            }
            exports.name = 'number';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            var number = __webpack_require__(3);
            function factory(type, config, load, typed) {
                var isNumeric = typed('isNumeric', {
                    'number | BigNumber | Fraction | boolean': function () {
                        return true;
                    },
                    'Complex | Unit | string': function () {
                        return false;
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, isNumeric);
                    }
                });
                return isNumeric;
            }
            exports.name = 'isNumeric';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var types = __webpack_require__(59);
            function factory(type, config, load, typed) {
                var _typeof = typed('_typeof', {
                    'any': function (x) {
                        var t = types.type(x);
                        if (t === 'Object') {
                            if (type.isBigNumber(x))
                                return 'BigNumber';
                            if (type.isComplex(x))
                                return 'Complex';
                            if (type.isFraction(x))
                                return 'Fraction';
                            if (type.isMatrix(x))
                                return 'Matrix';
                            if (type.isUnit(x))
                                return 'Unit';
                            if (type.isIndex(x))
                                return 'Index';
                            if (type.isRange(x))
                                return 'Range';
                            if (type.isChain(x))
                                return 'Chain';
                            if (type.isHelp(x))
                                return 'Help';
                        }
                        return t;
                    }
                });
                _typeof.toTex = undefined;
                return _typeof;
            }
            exports.name = 'typeof';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            module.exports = {
                end: true
            };
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var map = __webpack_require__(2).map;
            var join = __webpack_require__(2).join;
            var escape = __webpack_require__(9).escape;
            function factory(type, config, load, typed) {
                var register = load(__webpack_require__(7)).register;
                var compile = load(__webpack_require__(7)).compile;
                var Node = load(__webpack_require__(14));
                var RangeNode = load(__webpack_require__(79));
                var SymbolNode = load(__webpack_require__(40));
                var Range = load(__webpack_require__(93));
                var isArray = Array.isArray;
                function IndexNode(dimensions, dotNotation) {
                    if (!(this instanceof IndexNode)) {
                        throw new SyntaxError('Constructor must be called with the new operator');
                    }
                    this.dimensions = dimensions;
                    this.dotNotation = dotNotation || false;
                    if (!isArray(dimensions) || !dimensions.every(type.isNode)) {
                        throw new TypeError('Array containing Nodes expected for parameter "dimensions"');
                    }
                    if (this.dotNotation && !this.isObjectProperty()) {
                        throw new Error('dotNotation only applicable for object properties');
                    }
                    var deprecated = function () {
                        throw new Error('Property `IndexNode.object` is deprecated, use `IndexNode.fn` instead');
                    };
                    Object.defineProperty(this, 'object', { get: deprecated, set: deprecated });
                }
                IndexNode.prototype = new Node();
                IndexNode.prototype.type = 'IndexNode';
                IndexNode.prototype.isIndexNode = true;
                function compileIndexNode(node, defs, args) {
                    if (!(node instanceof IndexNode)) {
                        throw new TypeError('No valid IndexNode');
                    }
                    var childArgs = Object.create(args);
                    defs.range = function (start, end, step) {
                        return new Range(type.isBigNumber(start) ? start.toNumber() : start, type.isBigNumber(end) ? end.toNumber() : end, type.isBigNumber(step) ? step.toNumber() : step);
                    };
                    var dimensions = map(node.dimensions, function (range, i) {
                        if (type.isRangeNode(range)) {
                            if (range.needsEnd()) {
                                childArgs.end = 'end';
                                return '(function () {' +
                                    'var end = size[' + i + ']; ' +
                                    'return range(' +
                                    compile(range.start, defs, childArgs) + ', ' +
                                    compile(range.end, defs, childArgs) + ', ' +
                                    (range.step ? compile(range.step, defs, childArgs) : '1') +
                                    '); ' +
                                    '})()';
                            }
                            else {
                                return 'range(' +
                                    compile(range.start, defs, childArgs) + ', ' +
                                    compile(range.end, defs, childArgs) + ', ' +
                                    (range.step ? compile(range.step, defs, childArgs) : '1') +
                                    ')';
                            }
                        }
                        if (type.isSymbolNode(range) && range.name === 'end') {
                            childArgs.end = 'end';
                            return '(function () {' +
                                'var end = size[' + i + ']; ' +
                                'return ' + compile(range, defs, childArgs) + '; ' +
                                '})()';
                        }
                        else {
                            return compile(range, defs, childArgs);
                        }
                    });
                    return 'math.index(' + join(dimensions, ', ') + ')';
                }
                register(IndexNode.prototype.type, compileIndexNode);
                IndexNode.prototype.forEach = function (callback) {
                    for (var i = 0; i < this.dimensions.length; i++) {
                        callback(this.dimensions[i], 'dimensions[' + i + ']', this);
                    }
                };
                IndexNode.prototype.map = function (callback) {
                    var dimensions = [];
                    for (var i = 0; i < this.dimensions.length; i++) {
                        dimensions[i] = this._ifNode(callback(this.dimensions[i], 'dimensions[' + i + ']', this));
                    }
                    return new IndexNode(dimensions);
                };
                IndexNode.prototype.clone = function () {
                    return new IndexNode(this.dimensions.slice(0));
                };
                IndexNode.prototype.isObjectProperty = function () {
                    return this.dimensions.length === 1 &&
                        type.isConstantNode(this.dimensions[0]) &&
                        this.dimensions[0].valueType === 'string';
                };
                IndexNode.prototype.getObjectProperty = function () {
                    return this.isObjectProperty() ? this.dimensions[0].value : null;
                };
                IndexNode.prototype._toString = function (options) {
                    return this.dotNotation
                        ? ('.' + this.getObjectProperty())
                        : ('[' + this.dimensions.join(', ') + ']');
                };
                IndexNode.prototype.toHTML = function (options) {
                    var dimensions = [];
                    for (var i = 0; i < this.dimensions.length; i++) {
                        dimensions[i] = this.dimensions[i].toHTML();
                    }
                    if (this.dotNotation) {
                        return '<span class="math-operator math-accessor-operator">.</span>' + '<span class="math-symbol math-property">' + escape(this.getObjectProperty()) + '</span>';
                    }
                    else {
                        return '<span class="math-parenthesis math-square-parenthesis">[</span>' + dimensions.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-square-parenthesis">]</span>';
                    }
                };
                IndexNode.prototype._toTex = function (options) {
                    var dimensions = this.dimensions.map(function (range) {
                        return range.toTex(options);
                    });
                    return this.dotNotation
                        ? ('.' + this.getObjectProperty() + '')
                        : ('_{' + dimensions.join(',') + '}');
                };
                IndexNode.prototype.needsSize = function () {
                    return this.dimensions.some(function (range) {
                        return (type.isRangeNode(range) && range.needsEnd()) ||
                            (type.isSymbolNode(range) && range.name === 'end');
                    });
                };
                return IndexNode;
            }
            exports.name = 'IndexNode';
            exports.path = 'expression.node';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var operators = __webpack_require__(52);
            function factory(type, config, load, typed) {
                var register = load(__webpack_require__(7)).register;
                var compile = load(__webpack_require__(7)).compile;
                var Node = load(__webpack_require__(14));
                function RangeNode(start, end, step) {
                    if (!(this instanceof RangeNode)) {
                        throw new SyntaxError('Constructor must be called with the new operator');
                    }
                    if (!type.isNode(start))
                        throw new TypeError('Node expected');
                    if (!type.isNode(end))
                        throw new TypeError('Node expected');
                    if (step && !type.isNode(step))
                        throw new TypeError('Node expected');
                    if (arguments.length > 3)
                        throw new Error('Too many arguments');
                    this.start = start;
                    this.end = end;
                    this.step = step || null;
                }
                RangeNode.prototype = new Node();
                RangeNode.prototype.type = 'RangeNode';
                RangeNode.prototype.isRangeNode = true;
                RangeNode.prototype.needsEnd = function () {
                    var endSymbols = this.filter(function (node) {
                        return type.isSymbolNode(node) && (node.name === 'end');
                    });
                    return endSymbols.length > 0;
                };
                function compileRangeNode(node, defs, args) {
                    if (!(node instanceof RangeNode)) {
                        throw new TypeError('No valid RangeNode');
                    }
                    return 'math.range(' +
                        compile(node.start, defs, args) + ', ' +
                        compile(node.end, defs, args) +
                        (node.step ? (', ' + compile(node.step, defs, args)) : '') +
                        ')';
                }
                register(RangeNode.prototype.type, compileRangeNode);
                RangeNode.prototype.forEach = function (callback) {
                    callback(this.start, 'start', this);
                    callback(this.end, 'end', this);
                    if (this.step) {
                        callback(this.step, 'step', this);
                    }
                };
                RangeNode.prototype.map = function (callback) {
                    return new RangeNode(this._ifNode(callback(this.start, 'start', this)), this._ifNode(callback(this.end, 'end', this)), this.step && this._ifNode(callback(this.step, 'step', this)));
                };
                RangeNode.prototype.clone = function () {
                    return new RangeNode(this.start, this.end, this.step && this.step);
                };
                function calculateNecessaryParentheses(node, parenthesis) {
                    var precedence = operators.getPrecedence(node, parenthesis);
                    var parens = {};
                    var startPrecedence = operators.getPrecedence(node.start, parenthesis);
                    parens.start = ((startPrecedence !== null) && (startPrecedence <= precedence))
                        || (parenthesis === 'all');
                    if (node.step) {
                        var stepPrecedence = operators.getPrecedence(node.step, parenthesis);
                        parens.step = ((stepPrecedence !== null) && (stepPrecedence <= precedence))
                            || (parenthesis === 'all');
                    }
                    var endPrecedence = operators.getPrecedence(node.end, parenthesis);
                    parens.end = ((endPrecedence !== null) && (endPrecedence <= precedence))
                        || (parenthesis === 'all');
                    return parens;
                }
                RangeNode.prototype._toString = function (options) {
                    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';
                    var parens = calculateNecessaryParentheses(this, parenthesis);
                    var str;
                    var start = this.start.toString(options);
                    if (parens.start) {
                        start = '(' + start + ')';
                    }
                    str = start;
                    if (this.step) {
                        var step = this.step.toString(options);
                        if (parens.step) {
                            step = '(' + step + ')';
                        }
                        str += ':' + step;
                    }
                    var end = this.end.toString(options);
                    if (parens.end) {
                        end = '(' + end + ')';
                    }
                    str += ':' + end;
                    return str;
                };
                RangeNode.prototype.toHTML = function (options) {
                    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';
                    var parens = calculateNecessaryParentheses(this, parenthesis);
                    var str;
                    var start = this.start.toHTML(options);
                    if (parens.start) {
                        start = '<span class="math-parenthesis math-round-parenthesis">(</span>' + start + '<span class="math-parenthesis math-round-parenthesis">)</span>';
                    }
                    str = start;
                    if (this.step) {
                        var step = this.step.toHTML(options);
                        if (parens.step) {
                            step = '<span class="math-parenthesis math-round-parenthesis">(</span>' + step + '<span class="math-parenthesis math-round-parenthesis">)</span>';
                        }
                        str += '<span class="math-operator math-range-operator">:</span>' + step;
                    }
                    var end = this.end.toHTML(options);
                    if (parens.end) {
                        end = '<span class="math-parenthesis math-round-parenthesis">(</span>' + end + '<span class="math-parenthesis math-round-parenthesis">)</span>';
                    }
                    str += '<span class="math-operator math-range-operator">:</span>' + end;
                    return str;
                };
                RangeNode.prototype._toTex = function (options) {
                    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';
                    var parens = calculateNecessaryParentheses(this, parenthesis);
                    var str = this.start.toTex(options);
                    if (parens.start) {
                        str = '\\left(' + str + '\\right)';
                    }
                    if (this.step) {
                        var step = this.step.toTex(options);
                        if (parens.step) {
                            step = '\\left(' + step + '\\right)';
                        }
                        str += ':' + step;
                    }
                    var end = this.end.toTex(options);
                    if (parens.end) {
                        end = '\\left(' + end + '\\right)';
                    }
                    str += ':' + end;
                    return str;
                };
                return RangeNode;
            }
            exports.name = 'RangeNode';
            exports.path = 'expression.node';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var map = __webpack_require__(2).map;
            var join = __webpack_require__(2).join;
            function factory(type, config, load, typed) {
                var register = load(__webpack_require__(7)).register;
                var compile = load(__webpack_require__(7)).compile;
                var Node = load(__webpack_require__(14));
                function ArrayNode(items) {
                    if (!(this instanceof ArrayNode)) {
                        throw new SyntaxError('Constructor must be called with the new operator');
                    }
                    this.items = items || [];
                    if (!Array.isArray(this.items) || !this.items.every(type.isNode)) {
                        throw new TypeError('Array containing Nodes expected');
                    }
                    var deprecated = function () {
                        throw new Error('Property `ArrayNode.nodes` is deprecated, use `ArrayNode.items` instead');
                    };
                    Object.defineProperty(this, 'nodes', { get: deprecated, set: deprecated });
                }
                ArrayNode.prototype = new Node();
                ArrayNode.prototype.type = 'ArrayNode';
                ArrayNode.prototype.isArrayNode = true;
                function compileArrayNode(node, defs, args) {
                    if (!(node instanceof ArrayNode)) {
                        throw new TypeError('No valid ArrayNode');
                    }
                    var asMatrix = (defs.math.config().matrix !== 'Array');
                    var items = map(node.items, function (item) {
                        return compile(item, defs, args);
                    });
                    return (asMatrix ? 'math.matrix([' : '[') +
                        join(items, ',') +
                        (asMatrix ? '])' : ']');
                }
                register(ArrayNode.prototype.type, compileArrayNode);
                ArrayNode.prototype.forEach = function (callback) {
                    for (var i = 0; i < this.items.length; i++) {
                        var node = this.items[i];
                        callback(node, 'items[' + i + ']', this);
                    }
                };
                ArrayNode.prototype.map = function (callback) {
                    var items = [];
                    for (var i = 0; i < this.items.length; i++) {
                        items[i] = this._ifNode(callback(this.items[i], 'items[' + i + ']', this));
                    }
                    return new ArrayNode(items);
                };
                ArrayNode.prototype.clone = function () {
                    return new ArrayNode(this.items.slice(0));
                };
                ArrayNode.prototype._toString = function (options) {
                    var items = this.items.map(function (node) {
                        return node.toString(options);
                    });
                    return '[' + items.join(', ') + ']';
                };
                ArrayNode.prototype.toHTML = function (options) {
                    var items = this.items.map(function (node) {
                        return node.toHTML(options);
                    });
                    return '<span class="math-parenthesis math-square-parenthesis">[</span>' + items.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-square-parenthesis">]</span>';
                };
                ArrayNode.prototype._toTex = function (options) {
                    var s = '\\begin{bmatrix}';
                    this.items.forEach(function (node) {
                        if (node.items) {
                            s += node.items.map(function (childNode) {
                                return childNode.toTex(options);
                            }).join('&');
                        }
                        else {
                            s += node.toTex(options);
                        }
                        s += '\\\\';
                    });
                    s += '\\end{bmatrix}';
                    return s;
                };
                return ArrayNode;
            }
            exports.name = 'ArrayNode';
            exports.path = 'expression.node';
            exports.factory = factory;
        }),
        (function (module, exports) {
            function factory(type, config, load, typed) {
                return function compileInlineExpression(expression, math, scope) {
                    var symbol = expression.filter(function (node) {
                        return type.isSymbolNode(node) &&
                            !(node.name in math) &&
                            !(node.name in scope);
                    })[0];
                    if (!symbol) {
                        throw new Error('No undefined variable found in inline expression "' + expression + '"');
                    }
                    var name = symbol.name;
                    var subScope = Object.create(scope);
                    var eq = expression.compile();
                    return function inlineExpression(x) {
                        subScope[name] = x;
                        return eq.eval(subScope);
                    };
                };
            }
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            var number = __webpack_require__(3);
            function factory(type, config, load, typed) {
                var isZero = typed('isZero', {
                    'number': function (x) {
                        return x === 0;
                    },
                    'BigNumber': function (x) {
                        return x.isZero();
                    },
                    'Complex': function (x) {
                        return x.re === 0 && x.im === 0;
                    },
                    'Fraction': function (x) {
                        return x.d === 1 && x.n === 0;
                    },
                    'Unit': function (x) {
                        return isZero(x.value);
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, isZero);
                    }
                });
                return isZero;
            }
            exports.name = 'isZero';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory() {
                var cs_flip = function (i) {
                    return -i - 2;
                };
                return cs_flip;
            }
            exports.name = 'cs_flip';
            exports.path = 'sparse';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var util = __webpack_require__(25);
            var string = util.string;
            var array = util.array;
            var isArray = Array.isArray;
            function factory(type) {
                var DenseMatrix = type.DenseMatrix;
                var solveValidation = function (m, b, copy) {
                    var size = m.size();
                    if (size.length !== 2)
                        throw new RangeError('Matrix must be two dimensional (size: ' + string.format(size) + ')');
                    var rows = size[0];
                    var columns = size[1];
                    if (rows !== columns)
                        throw new RangeError('Matrix must be square (size: ' + string.format(size) + ')');
                    var data, i, bdata;
                    if (type.isMatrix(b)) {
                        var msize = b.size();
                        if (msize.length === 1) {
                            if (msize[0] !== rows)
                                throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
                            data = [];
                            bdata = b._data;
                            for (i = 0; i < rows; i++) {
                                data[i] = [bdata[i]];
                            }
                            return new DenseMatrix({
                                data: data,
                                size: [rows, 1],
                                datatype: b._datatype
                            });
                        }
                        if (msize.length === 2) {
                            if (msize[0] !== rows || msize[1] !== 1)
                                throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
                            if (type.isDenseMatrix(b)) {
                                if (copy) {
                                    data = [];
                                    bdata = b._data;
                                    for (i = 0; i < rows; i++) {
                                        data[i] = [bdata[i][0]];
                                    }
                                    return new DenseMatrix({
                                        data: data,
                                        size: [rows, 1],
                                        datatype: b._datatype
                                    });
                                }
                                return b;
                            }
                            data = [];
                            for (i = 0; i < rows; i++)
                                data[i] = [0];
                            var values = b._values;
                            var index = b._index;
                            var ptr = b._ptr;
                            for (var k1 = ptr[1], k = ptr[0]; k < k1; k++) {
                                i = index[k];
                                data[i][0] = values[k];
                            }
                            return new DenseMatrix({
                                data: data,
                                size: [rows, 1],
                                datatype: b._datatype
                            });
                        }
                        throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
                    }
                    if (isArray(b)) {
                        var asize = array.size(b);
                        if (asize.length === 1) {
                            if (asize[0] !== rows)
                                throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
                            data = [];
                            for (i = 0; i < rows; i++) {
                                data[i] = [b[i]];
                            }
                            return new DenseMatrix({
                                data: data,
                                size: [rows, 1]
                            });
                        }
                        if (asize.length === 2) {
                            if (asize[0] !== rows || asize[1] !== 1)
                                throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
                            data = [];
                            for (i = 0; i < rows; i++) {
                                data[i] = [b[i][0]];
                            }
                            return new DenseMatrix({
                                data: data,
                                size: [rows, 1]
                            });
                        }
                        throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
                    }
                };
                return solveValidation;
            }
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            var bitNot = __webpack_require__(86);
            module.exports = function bitwise(x, y, func) {
                var BigNumber = x.constructor;
                var xBits, yBits;
                var xSign = +(x.s < 0);
                var ySign = +(y.s < 0);
                if (xSign) {
                    xBits = decCoefficientToBinaryString(bitNot(x));
                    for (var i = 0; i < xBits.length; ++i) {
                        xBits[i] ^= 1;
                    }
                }
                else {
                    xBits = decCoefficientToBinaryString(x);
                }
                if (ySign) {
                    yBits = decCoefficientToBinaryString(bitNot(y));
                    for (var i = 0; i < yBits.length; ++i) {
                        yBits[i] ^= 1;
                    }
                }
                else {
                    yBits = decCoefficientToBinaryString(y);
                }
                var minBits, maxBits, minSign;
                if (xBits.length <= yBits.length) {
                    minBits = xBits;
                    maxBits = yBits;
                    minSign = xSign;
                }
                else {
                    minBits = yBits;
                    maxBits = xBits;
                    minSign = ySign;
                }
                var shortLen = minBits.length;
                var longLen = maxBits.length;
                var expFuncVal = func(xSign, ySign) ^ 1;
                var outVal = new BigNumber(expFuncVal ^ 1);
                var twoPower = new BigNumber(1);
                var two = new BigNumber(2);
                var prevPrec = BigNumber.precision;
                BigNumber.config({ precision: 1E9 });
                while (shortLen > 0) {
                    if (func(minBits[--shortLen], maxBits[--longLen]) == expFuncVal) {
                        outVal = outVal.plus(twoPower);
                    }
                    twoPower = twoPower.times(two);
                }
                while (longLen > 0) {
                    if (func(minSign, maxBits[--longLen]) == expFuncVal) {
                        outVal = outVal.plus(twoPower);
                    }
                    twoPower = twoPower.times(two);
                }
                BigNumber.config({ precision: prevPrec });
                if (expFuncVal == 0) {
                    outVal.s = -outVal.s;
                }
                return outVal;
            };
            function decCoefficientToBinaryString(x) {
                var a = x.d;
                var r = a[0] + '';
                for (var i = 1; i < a.length; ++i) {
                    var s = a[i] + '';
                    for (var z = 7 - s.length; z--;) {
                        s = '0' + s;
                    }
                    r += s;
                }
                var j;
                for (j = r.length - 1; r.charAt(j) == '0'; --j)
                    ;
                var xe = x.e;
                var str = r.slice(0, j + 1 || 1);
                var strL = str.length;
                if (xe > 0) {
                    if (++xe > strL) {
                        for (xe -= strL; xe--; str += '0')
                            ;
                    }
                    else if (xe < strL) {
                        str = str.slice(0, xe) + '.' + str.slice(xe);
                    }
                }
                var arr = [0];
                for (var i = 0; i < str.length;) {
                    for (var arrL = arr.length; arrL--; arr[arrL] *= 10)
                        ;
                    arr[0] += str.charAt(i++) << 0;
                    for (var j = 0; j < arr.length; ++j) {
                        if (arr[j] > 1) {
                            if (arr[j + 1] == null) {
                                arr[j + 1] = 0;
                            }
                            arr[j + 1] += arr[j] >> 1;
                            arr[j] &= 1;
                        }
                    }
                }
                return arr.reverse();
            }
        }),
        (function (module, exports) {
            module.exports = function bitNot(x) {
                if (x.isFinite() && !x.isInteger()) {
                    throw new Error('Integer expected in function bitNot');
                }
                var BigNumber = x.constructor;
                var prevPrec = BigNumber.precision;
                BigNumber.config({ precision: 1E9 });
                var x = x.plus(new BigNumber(1));
                x.s = -x.s || null;
                BigNumber.config({ precision: prevPrec });
                return x;
            };
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var DimensionError = __webpack_require__(10);
            function factory(type, config, load, typed) {
                var equalScalar = load(__webpack_require__(11));
                var SparseMatrix = type.SparseMatrix;
                var algorithm08 = function (a, b, callback) {
                    var avalues = a._values;
                    var aindex = a._index;
                    var aptr = a._ptr;
                    var asize = a._size;
                    var adt = a._datatype;
                    var bvalues = b._values;
                    var bindex = b._index;
                    var bptr = b._ptr;
                    var bsize = b._size;
                    var bdt = b._datatype;
                    if (asize.length !== bsize.length)
                        throw new DimensionError(asize.length, bsize.length);
                    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
                        throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
                    if (!avalues || !bvalues)
                        throw new Error('Cannot perform operation on Pattern Sparse Matrices');
                    var rows = asize[0];
                    var columns = asize[1];
                    var dt;
                    var eq = equalScalar;
                    var zero = 0;
                    var cf = callback;
                    if (typeof adt === 'string' && adt === bdt) {
                        dt = adt;
                        eq = typed.find(equalScalar, [dt, dt]);
                        zero = typed.convert(0, dt);
                        cf = typed.find(callback, [dt, dt]);
                    }
                    var cvalues = [];
                    var cindex = [];
                    var cptr = [];
                    var c = new SparseMatrix({
                        values: cvalues,
                        index: cindex,
                        ptr: cptr,
                        size: [rows, columns],
                        datatype: dt
                    });
                    var x = [];
                    var w = [];
                    var k, k0, k1, i;
                    for (var j = 0; j < columns; j++) {
                        cptr[j] = cindex.length;
                        var mark = j + 1;
                        for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
                            i = aindex[k];
                            w[i] = mark;
                            x[i] = avalues[k];
                            cindex.push(i);
                        }
                        for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
                            i = bindex[k];
                            if (w[i] === mark) {
                                x[i] = cf(x[i], bvalues[k]);
                            }
                        }
                        k = cptr[j];
                        while (k < cindex.length) {
                            i = cindex[k];
                            var v = x[i];
                            if (!eq(v, zero)) {
                                cvalues.push(v);
                                k++;
                            }
                            else {
                                cindex.splice(k, 1);
                            }
                        }
                    }
                    cptr[columns] = cindex.length;
                    return c;
                };
                return algorithm08;
            }
            exports.name = 'algorithm08';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var isInteger = __webpack_require__(3).isInteger;
            function factory(type, config, load, typed) {
                var asc = load(__webpack_require__(49));
                function desc(a, b) {
                    return -asc(a, b);
                }
                return typed('partitionSelect', {
                    'Array | Matrix, number': function (x, k) {
                        return _partitionSelect(x, k, asc);
                    },
                    'Array | Matrix, number, string': function (x, k, compare) {
                        if (compare === 'asc') {
                            return _partitionSelect(x, k, asc);
                        }
                        else if (compare === 'desc') {
                            return _partitionSelect(x, k, desc);
                        }
                        else {
                            throw new Error('Compare string must be "asc" or "desc"');
                        }
                    },
                    'Array | Matrix, number, function': _partitionSelect
                });
                function _partitionSelect(x, k, compare) {
                    if (!isInteger(k) || k < 0) {
                        throw new Error('k must be a non-negative integer');
                    }
                    if (type.isMatrix(x)) {
                        var size = x.size();
                        if (size.length > 1) {
                            throw new Error('Only one dimensional matrices supported');
                        }
                        return quickSelect(x.valueOf(), k, compare);
                    }
                    if (Array.isArray(x)) {
                        return quickSelect(x, k, compare);
                    }
                }
                function quickSelect(arr, k, compare) {
                    if (k >= arr.length) {
                        throw new Error('k out of bounds');
                    }
                    var from = 0;
                    var to = arr.length - 1;
                    while (from < to) {
                        var r = from;
                        var w = to;
                        var pivot = arr[Math.floor(Math.random() * (to - from + 1)) + from];
                        while (r < w) {
                            if (compare(arr[r], pivot) >= 0) {
                                var tmp = arr[w];
                                arr[w] = arr[r];
                                arr[r] = tmp;
                                --w;
                            }
                            else {
                                ++r;
                            }
                        }
                        if (compare(arr[r], pivot) > 0) {
                            --r;
                        }
                        if (k <= r) {
                            to = r;
                        }
                        else {
                            from = r + 1;
                        }
                    }
                    return arr[k];
                }
            }
            exports.name = 'partitionSelect';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var ArgumentsError = __webpack_require__(50);
            var isCollection = __webpack_require__(46);
            var isNumber = __webpack_require__(3).isNumber;
            function factory(type, config, load, typed, math) {
                var matrix = load(__webpack_require__(0));
                var array = __webpack_require__(2);
                var rng = load(__webpack_require__(490));
                function distribution(name) {
                    if (!distributions.hasOwnProperty(name))
                        throw new Error('Unknown distribution ' + name);
                    var args = Array.prototype.slice.call(arguments, 1), distribution = distributions[name].apply(this, args);
                    return (function (distribution) {
                        var randFunctions = {
                            random: function (arg1, arg2, arg3) {
                                var size, min, max;
                                if (arguments.length > 3) {
                                    throw new ArgumentsError('random', arguments.length, 0, 3);
                                }
                                else if (arguments.length === 1) {
                                    if (isCollection(arg1)) {
                                        size = arg1;
                                    }
                                    else {
                                        max = arg1;
                                    }
                                }
                                else if (arguments.length === 2) {
                                    if (isCollection(arg1)) {
                                        size = arg1;
                                        max = arg2;
                                    }
                                    else {
                                        min = arg1;
                                        max = arg2;
                                    }
                                }
                                else {
                                    size = arg1;
                                    min = arg2;
                                    max = arg3;
                                }
                                if ((min !== undefined && !isNumber(min)) || (max !== undefined && !isNumber(max))) {
                                    throw new TypeError('Invalid argument in function random');
                                }
                                if (max === undefined)
                                    max = 1;
                                if (min === undefined)
                                    min = 0;
                                if (size !== undefined) {
                                    var res = _randomDataForMatrix(size.valueOf(), min, max, _random);
                                    return type.isMatrix(size) ? matrix(res) : res;
                                }
                                return _random(min, max);
                            },
                            randomInt: typed({
                                'number | Array': function (arg) {
                                    var min = 0;
                                    if (isCollection(arg)) {
                                        var size = arg;
                                        var max = 1;
                                        var res = _randomDataForMatrix(size.valueOf(), min, max, _randomInt);
                                        return type.isMatrix(size) ? matrix(res) : res;
                                    }
                                    else {
                                        var max = arg;
                                        return _randomInt(min, max);
                                    }
                                },
                                'number | Array, number': function (arg1, arg2) {
                                    if (isCollection(arg1)) {
                                        var size = arg1;
                                        var max = arg2;
                                        var min = 0;
                                        var res = _randomDataForMatrix(size.valueOf(), min, max, _randomInt);
                                        return type.isMatrix(size) ? matrix(res) : res;
                                    }
                                    else {
                                        var min = arg1;
                                        var max = arg2;
                                        return _randomInt(min, max);
                                    }
                                },
                                'Array, number, number': function (size, min, max) {
                                    var res = _randomDataForMatrix(size.valueOf(), min, max, _randomInt);
                                    return (size && size.isMatrix === true) ? matrix(res) : res;
                                }
                            }),
                            pickRandom: typed({
                                'Array': function (possibles) {
                                    return _pickRandom(possibles);
                                },
                                'Array, number | Array': function (possibles, arg2) {
                                    var number, weights;
                                    if (Array.isArray(arg2)) {
                                        weights = arg2;
                                    }
                                    else if (isNumber(arg2)) {
                                        number = arg2;
                                    }
                                    else {
                                        throw new TypeError('Invalid argument in function pickRandom');
                                    }
                                    return _pickRandom(possibles, number, weights);
                                },
                                'Array, number | Array, Array | number': function (possibles, arg2, arg3) {
                                    var number, weights;
                                    if (Array.isArray(arg2)) {
                                        weights = arg2;
                                        number = arg3;
                                    }
                                    else {
                                        weights = arg3;
                                        number = arg2;
                                    }
                                    if (!Array.isArray(weights) || !isNumber(number)) {
                                        throw new TypeError('Invalid argument in function pickRandom');
                                    }
                                    return _pickRandom(possibles, number, weights);
                                }
                            })
                        };
                        var _pickRandom = function (possibles, number, weights) {
                            var single = (typeof number === 'undefined');
                            if (single) {
                                number = 1;
                            }
                            if (type.isMatrix(possibles)) {
                                possibles = possibles.valueOf();
                            }
                            else if (!Array.isArray(possibles)) {
                                throw new TypeError('Unsupported type of value in function pickRandom');
                            }
                            if (array.size(possibles).length > 1) {
                                throw new Error('Only one dimensional vectors supported');
                            }
                            if (typeof weights !== 'undefined') {
                                if (weights.length != possibles.length) {
                                    throw new Error('Weights must have the same length as possibles');
                                }
                                var totalWeights = 0;
                                for (var i = 0, len = weights.length; i < len; i++) {
                                    if (!isNumber(weights[i]) || weights[i] < 0) {
                                        throw new Error('Weights must be an array of positive numbers');
                                    }
                                    totalWeights += weights[i];
                                }
                            }
                            var length = possibles.length;
                            if (length == 0) {
                                return [];
                            }
                            else if (number >= length) {
                                return possibles;
                            }
                            var result = [];
                            var pick;
                            while (result.length < number) {
                                if (typeof weights === 'undefined') {
                                    pick = possibles[Math.floor(rng() * length)];
                                }
                                else {
                                    var randKey = rng() * totalWeights;
                                    for (var i = 0, len = possibles.length; i < len; i++) {
                                        randKey -= weights[i];
                                        if (randKey < 0) {
                                            pick = possibles[i];
                                            break;
                                        }
                                    }
                                }
                                if (result.indexOf(pick) == -1) {
                                    result.push(pick);
                                }
                            }
                            return single ? result[0] : result;
                        };
                        var _random = function (min, max) {
                            return min + distribution() * (max - min);
                        };
                        var _randomInt = function (min, max) {
                            return Math.floor(min + distribution() * (max - min));
                        };
                        var _randomDataForMatrix = function (size, min, max, randFunc) {
                            var data = [], length, i;
                            size = size.slice(0);
                            if (size.length > 1) {
                                for (var i = 0, length = size.shift(); i < length; i++) {
                                    data.push(_randomDataForMatrix(size, min, max, randFunc));
                                }
                            }
                            else {
                                for (var i = 0, length = size.shift(); i < length; i++) {
                                    data.push(randFunc(min, max));
                                }
                            }
                            return data;
                        };
                        return randFunctions;
                    })(distribution);
                }
                var distributions = {
                    uniform: function () {
                        return rng;
                    },
                    normal: function () {
                        return function () {
                            var u1, u2, picked = -1;
                            while (picked < 0 || picked > 1) {
                                u1 = rng();
                                u2 = rng();
                                picked = 1 / 6 * Math.pow(-2 * Math.log(u1), 0.5) * Math.cos(2 * Math.PI * u2) + 0.5;
                            }
                            return picked;
                        };
                    }
                };
                distribution.toTex = undefined;
                return distribution;
            }
            exports.name = 'distribution';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            var Emitter = __webpack_require__(153);
            exports.mixin = function (obj) {
                var emitter = new Emitter();
                obj.on = emitter.on.bind(emitter);
                obj.off = emitter.off.bind(emitter);
                obj.once = emitter.once.bind(emitter);
                obj.emit = emitter.emit.bind(emitter);
                return obj;
            };
        }),
        (function (module, exports, __webpack_require__) {
            var Complex = __webpack_require__(168);
            var format = __webpack_require__(3).format;
            var isNumber = __webpack_require__(3).isNumber;
            function factory(type, config, load, typed, math) {
                Complex.prototype.type = 'Complex';
                Complex.prototype.isComplex = true;
                Complex.prototype.toJSON = function () {
                    return {
                        mathjs: 'Complex',
                        re: this.re,
                        im: this.im
                    };
                };
                Complex.prototype.toPolar = function () {
                    return {
                        r: this.abs(),
                        phi: this.arg()
                    };
                };
                Complex.prototype.format = function (options) {
                    var str = '';
                    var im = this.im;
                    var re = this.re;
                    var strRe = format(this.re, options);
                    var strIm = format(this.im, options);
                    var precision = isNumber(options) ? options : options ? options.precision : null;
                    if (precision !== null) {
                        var epsilon = Math.pow(10, -precision);
                        if (Math.abs(re / im) < epsilon) {
                            re = 0;
                        }
                        if (Math.abs(im / re) < epsilon) {
                            im = 0;
                        }
                    }
                    if (im == 0) {
                        str = strRe;
                    }
                    else if (re == 0) {
                        if (im == 1) {
                            str = 'i';
                        }
                        else if (im == -1) {
                            str = '-i';
                        }
                        else {
                            str = strIm + 'i';
                        }
                    }
                    else {
                        if (im < 0) {
                            if (im == -1) {
                                str = strRe + ' - i';
                            }
                            else {
                                str = strRe + ' - ' + strIm.substring(1) + 'i';
                            }
                        }
                        else {
                            if (im == 1) {
                                str = strRe + ' + i';
                            }
                            else {
                                str = strRe + ' + ' + strIm + 'i';
                            }
                        }
                    }
                    return str;
                };
                Complex.fromPolar = function (args) {
                    switch (arguments.length) {
                        case 1:
                            var arg = arguments[0];
                            if (typeof arg === 'object') {
                                return Complex(arg);
                            }
                            throw new TypeError('Input has to be an object with r and phi keys.');
                        case 2:
                            var r = arguments[0], phi = arguments[1];
                            if (isNumber(r)) {
                                if (type.isUnit(phi) && phi.hasBase('ANGLE')) {
                                    phi = phi.toNumber('rad');
                                }
                                if (isNumber(phi)) {
                                    return new Complex({ r: r, phi: phi });
                                }
                                throw new TypeError('Phi is not a number nor an angle unit.');
                            }
                            else {
                                throw new TypeError('Radius r is not a number.');
                            }
                        default:
                            throw new SyntaxError('Wrong number of arguments in function fromPolar');
                    }
                };
                Complex.prototype.valueOf = Complex.prototype.toString;
                Complex.fromJSON = function (json) {
                    return new Complex(json);
                };
                Complex.EPSILON = config.epsilon;
                math.on('config', function (curr, prev) {
                    if (curr.epsilon !== prev.epsilon) {
                        Complex.EPSILON = curr.epsilon;
                    }
                });
                Complex.compare = function (a, b) {
                    if (a.re > b.re) {
                        return 1;
                    }
                    if (a.re < b.re) {
                        return -1;
                    }
                    if (a.im > b.im) {
                        return 1;
                    }
                    if (a.im < b.im) {
                        return -1;
                    }
                    return 0;
                };
                return Complex;
            }
            exports.name = 'Complex';
            exports.path = 'type';
            exports.factory = factory;
            exports.math = true;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            function factory(type, config, load, typed) {
                var fraction = typed('fraction', {
                    'number': function (x) {
                        if (!isFinite(x) || isNaN(x)) {
                            throw new Error(x + ' cannot be represented as a fraction');
                        }
                        return new type.Fraction(x);
                    },
                    'string': function (x) {
                        return new type.Fraction(x);
                    },
                    'number, number': function (numerator, denominator) {
                        return new type.Fraction(numerator, denominator);
                    },
                    'BigNumber': function (x) {
                        return new type.Fraction(x.toString());
                    },
                    'Fraction': function (x) {
                        return x;
                    },
                    'Object': function (x) {
                        return new type.Fraction(x);
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, fraction);
                    }
                });
                return fraction;
            }
            exports.name = 'fraction';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var number = __webpack_require__(3);
            function factory(type, config, load, typed) {
                function Range(start, end, step) {
                    if (!(this instanceof Range)) {
                        throw new SyntaxError('Constructor must be called with the new operator');
                    }
                    if (start != null) {
                        if (type.isBigNumber(start))
                            start = start.toNumber();
                        else if (typeof start !== 'number')
                            throw new TypeError('Parameter start must be a number');
                    }
                    if (end != null) {
                        if (type.isBigNumber(end))
                            end = end.toNumber();
                        else if (typeof end !== 'number')
                            throw new TypeError('Parameter end must be a number');
                    }
                    if (step != null) {
                        if (type.isBigNumber(step))
                            step = step.toNumber();
                        else if (typeof step !== 'number')
                            throw new TypeError('Parameter step must be a number');
                    }
                    this.start = (start != null) ? parseFloat(start) : 0;
                    this.end = (end != null) ? parseFloat(end) : 0;
                    this.step = (step != null) ? parseFloat(step) : 1;
                }
                Range.prototype.type = 'Range';
                Range.prototype.isRange = true;
                Range.parse = function (str) {
                    if (typeof str !== 'string') {
                        return null;
                    }
                    var args = str.split(':');
                    var nums = args.map(function (arg) {
                        return parseFloat(arg);
                    });
                    var invalid = nums.some(function (num) {
                        return isNaN(num);
                    });
                    if (invalid) {
                        return null;
                    }
                    switch (nums.length) {
                        case 2:
                            return new Range(nums[0], nums[1]);
                        case 3:
                            return new Range(nums[0], nums[2], nums[1]);
                        default:
                            return null;
                    }
                };
                Range.prototype.clone = function () {
                    return new Range(this.start, this.end, this.step);
                };
                Range.prototype.size = function () {
                    var len = 0, start = this.start, step = this.step, end = this.end, diff = end - start;
                    if (number.sign(step) == number.sign(diff)) {
                        len = Math.ceil((diff) / step);
                    }
                    else if (diff == 0) {
                        len = 0;
                    }
                    if (isNaN(len)) {
                        len = 0;
                    }
                    return [len];
                };
                Range.prototype.min = function () {
                    var size = this.size()[0];
                    if (size > 0) {
                        if (this.step > 0) {
                            return this.start;
                        }
                        else {
                            return this.start + (size - 1) * this.step;
                        }
                    }
                    else {
                        return undefined;
                    }
                };
                Range.prototype.max = function () {
                    var size = this.size()[0];
                    if (size > 0) {
                        if (this.step > 0) {
                            return this.start + (size - 1) * this.step;
                        }
                        else {
                            return this.start;
                        }
                    }
                    else {
                        return undefined;
                    }
                };
                Range.prototype.forEach = function (callback) {
                    var x = this.start;
                    var step = this.step;
                    var end = this.end;
                    var i = 0;
                    if (step > 0) {
                        while (x < end) {
                            callback(x, [i], this);
                            x += step;
                            i++;
                        }
                    }
                    else if (step < 0) {
                        while (x > end) {
                            callback(x, [i], this);
                            x += step;
                            i++;
                        }
                    }
                };
                Range.prototype.map = function (callback) {
                    var array = [];
                    this.forEach(function (value, index, obj) {
                        array[index[0]] = callback(value, index, obj);
                    });
                    return array;
                };
                Range.prototype.toArray = function () {
                    var array = [];
                    this.forEach(function (value, index) {
                        array[index[0]] = value;
                    });
                    return array;
                };
                Range.prototype.valueOf = function () {
                    return this.toArray();
                };
                Range.prototype.format = function (options) {
                    var str = number.format(this.start, options);
                    if (this.step != 1) {
                        str += ':' + number.format(this.step, options);
                    }
                    str += ':' + number.format(this.end, options);
                    return str;
                };
                Range.prototype.toString = function () {
                    return this.format();
                };
                Range.prototype.toJSON = function () {
                    return {
                        mathjs: 'Range',
                        start: this.start,
                        end: this.end,
                        step: this.step
                    };
                };
                Range.fromJSON = function (json) {
                    return new Range(json.start, json.end, json.step);
                };
                return Range;
            }
            exports.name = 'Range';
            exports.path = 'type';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load, typed) {
                function ResultSet(entries) {
                    if (!(this instanceof ResultSet)) {
                        throw new SyntaxError('Constructor must be called with the new operator');
                    }
                    this.entries = entries || [];
                }
                ResultSet.prototype.type = 'ResultSet';
                ResultSet.prototype.isResultSet = true;
                ResultSet.prototype.valueOf = function () {
                    return this.entries;
                };
                ResultSet.prototype.toString = function () {
                    return '[' + this.entries.join(', ') + ']';
                };
                ResultSet.prototype.toJSON = function () {
                    return {
                        mathjs: 'ResultSet',
                        entries: this.entries
                    };
                };
                ResultSet.fromJSON = function (json) {
                    return new ResultSet(json.entries);
                };
                return ResultSet;
            }
            exports.name = 'ResultSet';
            exports.path = 'type';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            var memoize = __webpack_require__(32).memoize;
            exports.e = memoize(function (BigNumber) {
                return new BigNumber(1).exp();
            }, hasher);
            exports.phi = memoize(function (BigNumber) {
                return new BigNumber(1).plus(new BigNumber(5).sqrt()).div(2);
            }, hasher);
            exports.pi = memoize(function (BigNumber) {
                return BigNumber.acos(-1);
            }, hasher);
            exports.tau = memoize(function (BigNumber) {
                return exports.pi(BigNumber).times(2);
            }, hasher);
            function hasher(args) {
                return args[0].precision;
            }
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            function factory(type, config, load, typed) {
                var fix = typed('fix', {
                    'number': function (x) {
                        return (x > 0) ? Math.floor(x) : Math.ceil(x);
                    },
                    'Complex': function (x) {
                        return new type.Complex((x.re > 0) ? Math.floor(x.re) : Math.ceil(x.re), (x.im > 0) ? Math.floor(x.im) : Math.ceil(x.im));
                    },
                    'BigNumber': function (x) {
                        return x.isNegative() ? x.ceil() : x.floor();
                    },
                    'Fraction': function (x) {
                        return x.s < 0 ? x.ceil() : x.floor();
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, fix, true);
                    }
                });
                fix.toTex = { 1: '\\mathrm{${name}}\\left(${args[0]}\\right)' };
                return fix;
            }
            exports.name = 'fix';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var isInteger = __webpack_require__(3).isInteger;
            var toFixed = __webpack_require__(3).toFixed;
            var deepMap = __webpack_require__(1);
            var NO_INT = 'Number of decimals in function round must be an integer';
            function factory(type, config, load, typed) {
                var matrix = load(__webpack_require__(0));
                var equalScalar = load(__webpack_require__(11));
                var zeros = load(__webpack_require__(38));
                var algorithm11 = load(__webpack_require__(17));
                var algorithm12 = load(__webpack_require__(16));
                var algorithm14 = load(__webpack_require__(6));
                var round = typed('round', {
                    'number': Math.round,
                    'number, number': function (x, n) {
                        if (!isInteger(n)) {
                            throw new TypeError(NO_INT);
                        }
                        if (n < 0 || n > 15) {
                            throw new Error('Number of decimals in function round must be in te range of 0-15');
                        }
                        return _round(x, n);
                    },
                    'Complex': function (x) {
                        return x.round();
                    },
                    'Complex, number': function (x, n) {
                        if (n % 1) {
                            throw new TypeError(NO_INT);
                        }
                        return x.round(n);
                    },
                    'Complex, BigNumber': function (x, n) {
                        if (!n.isInteger()) {
                            throw new TypeError(NO_INT);
                        }
                        var _n = n.toNumber();
                        return x.round(_n);
                    },
                    'number, BigNumber': function (x, n) {
                        if (!n.isInteger()) {
                            throw new TypeError(NO_INT);
                        }
                        return new type.BigNumber(x).toDecimalPlaces(n.toNumber());
                    },
                    'BigNumber': function (x) {
                        return x.toDecimalPlaces(0);
                    },
                    'BigNumber, BigNumber': function (x, n) {
                        if (!n.isInteger()) {
                            throw new TypeError(NO_INT);
                        }
                        return x.toDecimalPlaces(n.toNumber());
                    },
                    'Fraction': function (x) {
                        return x.round();
                    },
                    'Fraction, number': function (x, n) {
                        if (n % 1) {
                            throw new TypeError(NO_INT);
                        }
                        return x.round(n);
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, round, true);
                    },
                    'Matrix, number | BigNumber': function (x, y) {
                        var c;
                        switch (x.storage()) {
                            case 'sparse':
                                c = algorithm11(x, y, round, false);
                                break;
                            default:
                                c = algorithm14(x, y, round, false);
                                break;
                        }
                        return c;
                    },
                    'number | Complex | BigNumber, Matrix': function (x, y) {
                        if (!equalScalar(x, 0)) {
                            var c;
                            switch (y.storage()) {
                                case 'sparse':
                                    c = algorithm12(y, x, round, true);
                                    break;
                                default:
                                    c = algorithm14(y, x, round, true);
                                    break;
                            }
                            return c;
                        }
                        return zeros(y.size(), y.storage());
                    },
                    'Array, number | BigNumber': function (x, y) {
                        return algorithm14(matrix(x), y, round, false).valueOf();
                    },
                    'number | Complex | BigNumber, Array': function (x, y) {
                        return algorithm14(matrix(y), x, round, true).valueOf();
                    }
                });
                round.toTex = {
                    1: '\\left\\lfloor${args[0]}\\right\\rceil',
                    2: undefined
                };
                return round;
            }
            function _round(value, decimals) {
                return parseFloat(toFixed(value, decimals));
            }
            exports.name = 'round';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var string = __webpack_require__(9);
            function factory(type, config, load, typed) {
                var format = typed('format', {
                    'any': string.format,
                    'any, Object | function | number': string.format
                });
                format.toTex = undefined;
                return format;
            }
            exports.name = 'format';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            function factory(construction, config, load, typed) {
                var docs = {};
                docs.bignumber = __webpack_require__(192);
                docs['boolean'] = __webpack_require__(193);
                docs.complex = __webpack_require__(194);
                docs.createUnit = __webpack_require__(195);
                docs.fraction = __webpack_require__(196);
                docs.index = __webpack_require__(197);
                docs.matrix = __webpack_require__(198);
                docs.number = __webpack_require__(199);
                docs.sparse = __webpack_require__(200);
                docs.splitUnit = __webpack_require__(201);
                docs.string = __webpack_require__(202);
                docs.unit = __webpack_require__(203);
                docs.e = __webpack_require__(100);
                docs.E = __webpack_require__(100);
                docs['false'] = __webpack_require__(204);
                docs.i = __webpack_require__(205);
                docs['Infinity'] = __webpack_require__(206);
                docs.LN2 = __webpack_require__(207);
                docs.LN10 = __webpack_require__(208);
                docs.LOG2E = __webpack_require__(209);
                docs.LOG10E = __webpack_require__(210);
                docs.NaN = __webpack_require__(211);
                docs['null'] = __webpack_require__(212);
                docs.pi = __webpack_require__(101);
                docs.PI = __webpack_require__(101);
                docs.phi = __webpack_require__(213);
                docs.SQRT1_2 = __webpack_require__(214);
                docs.SQRT2 = __webpack_require__(215);
                docs.tau = __webpack_require__(216);
                docs['true'] = __webpack_require__(217);
                docs.version = __webpack_require__(218);
                docs.speedOfLight = { description: 'Speed of light in vacuum', examples: ['speedOfLight'] };
                docs.gravitationConstant = { description: 'Newtonian constant of gravitation', examples: ['gravitationConstant'] };
                docs.planckConstant = { description: 'Planck constant', examples: ['planckConstant'] };
                docs.reducedPlanckConstant = { description: 'Reduced Planck constant', examples: ['reducedPlanckConstant'] };
                docs.magneticConstant = { description: 'Magnetic constant (vacuum permeability)', examples: ['magneticConstant'] };
                docs.electricConstant = { description: 'Electric constant (vacuum permeability)', examples: ['electricConstant'] };
                docs.vacuumImpedance = { description: 'Characteristic impedance of vacuum', examples: ['vacuumImpedance'] };
                docs.coulomb = { description: 'Coulomb\'s constant', examples: ['coulomb'] };
                docs.elementaryCharge = { description: 'Elementary charge', examples: ['elementaryCharge'] };
                docs.bohrMagneton = { description: 'Borh magneton', examples: ['bohrMagneton'] };
                docs.conductanceQuantum = { description: 'Conductance quantum', examples: ['conductanceQuantum'] };
                docs.inverseConductanceQuantum = { description: 'Inverse conductance quantum', examples: ['inverseConductanceQuantum'] };
                docs.magneticFluxQuantum = { description: 'Magnetic flux quantum', examples: ['magneticFluxQuantum'] };
                docs.nuclearMagneton = { description: 'Nuclear magneton', examples: ['nuclearMagneton'] };
                docs.klitzing = { description: 'Von Klitzing constant', examples: ['klitzing'] };
                docs.bohrRadius = { description: 'Borh radius', examples: ['bohrRadius'] };
                docs.classicalElectronRadius = { description: 'Classical electron radius', examples: ['classicalElectronRadius'] };
                docs.electronMass = { description: 'Electron mass', examples: ['electronMass'] };
                docs.fermiCoupling = { description: 'Fermi coupling constant', examples: ['fermiCoupling'] };
                docs.fineStructure = { description: 'Fine-structure constant', examples: ['fineStructure'] };
                docs.hartreeEnergy = { description: 'Hartree energy', examples: ['hartreeEnergy'] };
                docs.protonMass = { description: 'Proton mass', examples: ['protonMass'] };
                docs.deuteronMass = { description: 'Deuteron Mass', examples: ['deuteronMass'] };
                docs.neutronMass = { description: 'Neutron mass', examples: ['neutronMass'] };
                docs.quantumOfCirculation = { description: 'Quantum of circulation', examples: ['quantumOfCirculation'] };
                docs.rydberg = { description: 'Rydberg constant', examples: ['rydberg'] };
                docs.thomsonCrossSection = { description: 'Thomson cross section', examples: ['thomsonCrossSection'] };
                docs.weakMixingAngle = { description: 'Weak mixing angle', examples: ['weakMixingAngle'] };
                docs.efimovFactor = { description: 'Efimov factor', examples: ['efimovFactor'] };
                docs.atomicMass = { description: 'Atomic mass constant', examples: ['atomicMass'] };
                docs.avogadro = { description: 'Avogadro\'s number', examples: ['avogadro'] };
                docs.boltzmann = { description: 'Boltzmann constant', examples: ['boltzmann'] };
                docs.faraday = { description: 'Faraday constant', examples: ['faraday'] };
                docs.firstRadiation = { description: 'First radiation constant', examples: ['firstRadiation'] };
                docs.loschmidt = { description: 'Loschmidt constant at T=273.15 K and p=101.325 kPa', examples: ['loschmidt'] };
                docs.gasConstant = { description: 'Gas constant', examples: ['gasConstant'] };
                docs.molarPlanckConstant = { description: 'Molar Planck constant', examples: ['molarPlanckConstant'] };
                docs.molarVolume = { description: 'Molar volume of an ideal gas at T=273.15 K and p=101.325 kPa', examples: ['molarVolume'] };
                docs.sackurTetrode = { description: 'Sackur-Tetrode constant at T=1 K and p=101.325 kPa', examples: ['sackurTetrode'] };
                docs.secondRadiation = { description: 'Second radiation constant', examples: ['secondRadiation'] };
                docs.stefanBoltzmann = { description: 'Stefan-Boltzmann constant', examples: ['stefanBoltzmann'] };
                docs.wienDisplacement = { description: 'Wien displacement law constant', examples: ['wienDisplacement'] };
                docs.molarMass = { description: 'Molar mass constant', examples: ['molarMass'] };
                docs.molarMassC12 = { description: 'Molar mass constant of carbon-12', examples: ['molarMassC12'] };
                docs.gravity = { description: 'Standard acceleration of gravity (standard acceleration of free-fall on Earth)', examples: ['gravity'] };
                docs.planckLength = { description: 'Planck length', examples: ['planckLength'] };
                docs.planckMass = { description: 'Planck mass', examples: ['planckMass'] };
                docs.planckTime = { description: 'Planck time', examples: ['planckTime'] };
                docs.planckCharge = { description: 'Planck charge', examples: ['planckCharge'] };
                docs.planckTemperature = { description: 'Planck temperature', examples: ['planckTemperature'] };
                docs.derivative = __webpack_require__(219);
                docs.lsolve = __webpack_require__(220);
                docs.lup = __webpack_require__(221);
                docs.lusolve = __webpack_require__(222);
                docs.simplify = __webpack_require__(223);
                docs.slu = __webpack_require__(224);
                docs.usolve = __webpack_require__(225);
                docs.qr = __webpack_require__(226);
                docs.abs = __webpack_require__(227);
                docs.add = __webpack_require__(228);
                docs.cbrt = __webpack_require__(229);
                docs.ceil = __webpack_require__(230);
                docs.cube = __webpack_require__(231);
                docs.divide = __webpack_require__(232);
                docs.dotDivide = __webpack_require__(233);
                docs.dotMultiply = __webpack_require__(234);
                docs.dotPow = __webpack_require__(235);
                docs.exp = __webpack_require__(236);
                docs.fix = __webpack_require__(237);
                docs.floor = __webpack_require__(238);
                docs.gcd = __webpack_require__(239);
                docs.hypot = __webpack_require__(240);
                docs.lcm = __webpack_require__(241);
                docs.log = __webpack_require__(242);
                docs.log10 = __webpack_require__(243);
                docs.mod = __webpack_require__(244);
                docs.multiply = __webpack_require__(245);
                docs.norm = __webpack_require__(246);
                docs.nthRoot = __webpack_require__(247);
                docs.pow = __webpack_require__(248);
                docs.round = __webpack_require__(249);
                docs.sign = __webpack_require__(250);
                docs.sqrt = __webpack_require__(251);
                docs.square = __webpack_require__(252);
                docs.subtract = __webpack_require__(253);
                docs.unaryMinus = __webpack_require__(254);
                docs.unaryPlus = __webpack_require__(255);
                docs.xgcd = __webpack_require__(256);
                docs.bitAnd = __webpack_require__(257);
                docs.bitNot = __webpack_require__(258);
                docs.bitOr = __webpack_require__(259);
                docs.bitXor = __webpack_require__(260);
                docs.leftShift = __webpack_require__(261);
                docs.rightArithShift = __webpack_require__(262);
                docs.rightLogShift = __webpack_require__(263);
                docs.bellNumbers = __webpack_require__(264);
                docs.catalan = __webpack_require__(265);
                docs.composition = __webpack_require__(266);
                docs.stirlingS2 = __webpack_require__(267);
                docs['config'] = __webpack_require__(268);
                docs['import'] = __webpack_require__(269);
                docs['typed'] = __webpack_require__(270);
                docs.arg = __webpack_require__(271);
                docs.conj = __webpack_require__(272);
                docs.re = __webpack_require__(273);
                docs.im = __webpack_require__(274);
                docs['eval'] = __webpack_require__(275);
                docs.help = __webpack_require__(276);
                docs.distance = __webpack_require__(277);
                docs.intersect = __webpack_require__(278);
                docs['and'] = __webpack_require__(279);
                docs['not'] = __webpack_require__(280);
                docs['or'] = __webpack_require__(281);
                docs['xor'] = __webpack_require__(282);
                docs['concat'] = __webpack_require__(283);
                docs.cross = __webpack_require__(284);
                docs.det = __webpack_require__(285);
                docs.diag = __webpack_require__(286);
                docs.dot = __webpack_require__(287);
                docs.eye = __webpack_require__(288);
                docs.filter = __webpack_require__(289);
                docs.flatten = __webpack_require__(290);
                docs.forEach = __webpack_require__(291);
                docs.inv = __webpack_require__(292);
                docs.kron = __webpack_require__(293);
                docs.map = __webpack_require__(294);
                docs.ones = __webpack_require__(295);
                docs.partitionSelect = __webpack_require__(296);
                docs.range = __webpack_require__(297);
                docs.resize = __webpack_require__(298);
                docs.reshape = __webpack_require__(299);
                docs.size = __webpack_require__(300);
                docs.sort = __webpack_require__(301);
                docs.squeeze = __webpack_require__(302);
                docs.subset = __webpack_require__(303);
                docs.trace = __webpack_require__(304);
                docs.transpose = __webpack_require__(305);
                docs.zeros = __webpack_require__(306);
                docs.combinations = __webpack_require__(307);
                docs.factorial = __webpack_require__(308);
                docs.gamma = __webpack_require__(309);
                docs.kldivergence = __webpack_require__(310);
                docs.multinomial = __webpack_require__(311);
                docs.permutations = __webpack_require__(312);
                docs.pickRandom = __webpack_require__(313);
                docs.random = __webpack_require__(314);
                docs.randomInt = __webpack_require__(315);
                docs.compare = __webpack_require__(316);
                docs.compareNatural = __webpack_require__(317);
                docs.deepEqual = __webpack_require__(318);
                docs['equal'] = __webpack_require__(319);
                docs.larger = __webpack_require__(320);
                docs.largerEq = __webpack_require__(321);
                docs.smaller = __webpack_require__(322);
                docs.smallerEq = __webpack_require__(323);
                docs.unequal = __webpack_require__(324);
                docs.setCartesian = __webpack_require__(325);
                docs.setDifference = __webpack_require__(326);
                docs.setDistinct = __webpack_require__(327);
                docs.setIntersect = __webpack_require__(328);
                docs.setIsSubset = __webpack_require__(329);
                docs.setMultiplicity = __webpack_require__(330);
                docs.setPowerset = __webpack_require__(331);
                docs.setSize = __webpack_require__(332);
                docs.setSymDifference = __webpack_require__(333);
                docs.setUnion = __webpack_require__(334);
                docs.erf = __webpack_require__(335);
                docs.mad = __webpack_require__(336);
                docs.max = __webpack_require__(337);
                docs.mean = __webpack_require__(338);
                docs.median = __webpack_require__(339);
                docs.min = __webpack_require__(340);
                docs.mode = __webpack_require__(341);
                docs.prod = __webpack_require__(342);
                docs.quantileSeq = __webpack_require__(343);
                docs.std = __webpack_require__(344);
                docs.sum = __webpack_require__(345);
                docs['var'] = __webpack_require__(346);
                docs.acos = __webpack_require__(347);
                docs.acosh = __webpack_require__(348);
                docs.acot = __webpack_require__(349);
                docs.acoth = __webpack_require__(350);
                docs.acsc = __webpack_require__(351);
                docs.acsch = __webpack_require__(352);
                docs.asec = __webpack_require__(353);
                docs.asech = __webpack_require__(354);
                docs.asin = __webpack_require__(355);
                docs.asinh = __webpack_require__(356);
                docs.atan = __webpack_require__(357);
                docs.atanh = __webpack_require__(358);
                docs.atan2 = __webpack_require__(359);
                docs.cos = __webpack_require__(360);
                docs.cosh = __webpack_require__(361);
                docs.cot = __webpack_require__(362);
                docs.coth = __webpack_require__(363);
                docs.csc = __webpack_require__(364);
                docs.csch = __webpack_require__(365);
                docs.sec = __webpack_require__(366);
                docs.sech = __webpack_require__(367);
                docs.sin = __webpack_require__(368);
                docs.sinh = __webpack_require__(369);
                docs.tan = __webpack_require__(370);
                docs.tanh = __webpack_require__(371);
                docs.to = __webpack_require__(372);
                docs.clone = __webpack_require__(373);
                docs.format = __webpack_require__(374);
                docs.isNaN = __webpack_require__(375);
                docs.isInteger = __webpack_require__(376);
                docs.isNegative = __webpack_require__(377);
                docs.isNumeric = __webpack_require__(378);
                docs.isPositive = __webpack_require__(379);
                docs.isPrime = __webpack_require__(380);
                docs.isZero = __webpack_require__(381);
                docs['typeof'] = __webpack_require__(382);
                return docs;
            }
            exports.name = 'docs';
            exports.path = 'expression';
            exports.factory = factory;
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'e',
                'category': 'Constants',
                'syntax': [
                    'e'
                ],
                'description': 'Euler\'s number, the base of the natural logarithm. Approximately equal to 2.71828',
                'examples': [
                    'e',
                    'e ^ 2',
                    'exp(2)',
                    'log(e)'
                ],
                'seealso': ['exp']
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'pi',
                'category': 'Constants',
                'syntax': [
                    'pi'
                ],
                'description': 'The number pi is a mathematical constant that is the ratio of a circle\'s circumference to its diameter, and is approximately equal to 3.14159',
                'examples': [
                    'pi',
                    'sin(pi/2)'
                ],
                'seealso': ['tau']
            };
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var stringify = __webpack_require__(9).stringify;
            var getSafeProperty = __webpack_require__(13).getSafeProperty;
            function factory(type, config, load, typed) {
                var register = load(__webpack_require__(7)).register;
                var compile = load(__webpack_require__(7)).compile;
                var Node = load(__webpack_require__(14));
                var IndexNode = load(__webpack_require__(78));
                var access = load(__webpack_require__(103));
                function AccessorNode(object, index) {
                    if (!(this instanceof AccessorNode)) {
                        throw new SyntaxError('Constructor must be called with the new operator');
                    }
                    if (!type.isNode(object)) {
                        throw new TypeError('Node expected for parameter "object"');
                    }
                    if (!type.isIndexNode(index)) {
                        throw new TypeError('IndexNode expected for parameter "index"');
                    }
                    this.object = object || null;
                    this.index = index;
                    Object.defineProperty(this, 'name', {
                        get: function () {
                            if (this.index) {
                                return (this.index.isObjectProperty())
                                    ? this.index.getObjectProperty()
                                    : '';
                            }
                            else {
                                return this.object.name || '';
                            }
                        }.bind(this),
                        set: function () {
                            throw new Error('Cannot assign a new name, name is read-only');
                        }
                    });
                }
                AccessorNode.prototype = new Node();
                AccessorNode.prototype.type = 'AccessorNode';
                AccessorNode.prototype.isAccessorNode = true;
                function compileAccessorNode(node, defs, args) {
                    if (!(node instanceof AccessorNode)) {
                        throw new TypeError('No valid AccessorNode');
                    }
                    defs.access = access;
                    defs.getSafeProperty = getSafeProperty;
                    var object = compile(node.object, defs, args);
                    var index = compile(node.index, defs, args);
                    if (node.index.isObjectProperty()) {
                        var jsProp = stringify(node.index.getObjectProperty());
                        return 'getSafeProperty(' + object + ', ' + jsProp + ')';
                    }
                    else if (node.index.needsSize()) {
                        return '(function () {' +
                            '  var object = ' + object + ';' +
                            '  var size = math.size(object).valueOf();' +
                            '  return access(object, ' + index + ');' +
                            '})()';
                    }
                    else {
                        return 'access(' + object + ', ' + index + ')';
                    }
                }
                register(AccessorNode.prototype.type, compileAccessorNode);
                AccessorNode.prototype.forEach = function (callback) {
                    callback(this.object, 'object', this);
                    callback(this.index, 'index', this);
                };
                AccessorNode.prototype.map = function (callback) {
                    return new AccessorNode(this._ifNode(callback(this.object, 'object', this)), this._ifNode(callback(this.index, 'index', this)));
                };
                AccessorNode.prototype.clone = function () {
                    return new AccessorNode(this.object, this.index);
                };
                AccessorNode.prototype._toString = function (options) {
                    var object = this.object.toString(options);
                    if (needParenthesis(this.object)) {
                        object = '(' + object + ')';
                    }
                    return object + this.index.toString(options);
                };
                AccessorNode.prototype.toHTML = function (options) {
                    var object = this.object.toHTML(options);
                    if (needParenthesis(this.object)) {
                        object = '<span class="math-parenthesis math-round-parenthesis">(</span>' + object + '<span class="math-parenthesis math-round-parenthesis">)</span>';
                    }
                    return object + this.index.toHTML(options);
                };
                AccessorNode.prototype._toTex = function (options) {
                    var object = this.object.toTex(options);
                    if (needParenthesis(this.object)) {
                        object = '\\left(' + object + '\\right)';
                    }
                    return object + this.index.toTex(options);
                };
                function needParenthesis(node) {
                    return !(type.isAccessorNode(node) ||
                        type.isArrayNode(node) ||
                        type.isConstantNode(node) ||
                        type.isFunctionNode(node) ||
                        type.isObjectNode(node) ||
                        type.isParenthesisNode(node) ||
                        type.isSymbolNode(node));
                }
                return AccessorNode;
            }
            exports.name = 'AccessorNode';
            exports.path = 'expression.node';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var errorTransform = __webpack_require__(41).transform;
            var getSafeProperty = __webpack_require__(13).getSafeProperty;
            function factory(type, config, load, typed) {
                var subset = load(__webpack_require__(22));
                return function access(object, index) {
                    try {
                        if (Array.isArray(object)) {
                            return subset(object, index);
                        }
                        else if (object && typeof object.subset === 'function') {
                            return object.subset(index);
                        }
                        else if (typeof object === 'string') {
                            return subset(object, index);
                        }
                        else if (typeof object === 'object') {
                            if (!index.isObjectProperty()) {
                                throw new TypeError('Cannot apply a numeric index as object property');
                            }
                            return getSafeProperty(object, index.getObjectProperty());
                        }
                        else {
                            throw new TypeError('Cannot apply index: unsupported type of object');
                        }
                    }
                    catch (err) {
                        throw errorTransform(err);
                    }
                };
            }
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var latex = __webpack_require__(4);
            var stringify = __webpack_require__(9).stringify;
            var getSafeProperty = __webpack_require__(13).getSafeProperty;
            var setSafeProperty = __webpack_require__(13).setSafeProperty;
            function factory(type, config, load, typed) {
                var register = load(__webpack_require__(7)).register;
                var compile = load(__webpack_require__(7)).compile;
                var Node = load(__webpack_require__(14));
                var ArrayNode = load(__webpack_require__(80));
                var matrix = load(__webpack_require__(0));
                var assign = load(__webpack_require__(385));
                var access = load(__webpack_require__(103));
                var keywords = __webpack_require__(77);
                var operators = __webpack_require__(52);
                function AssignmentNode(object, index, value) {
                    if (!(this instanceof AssignmentNode)) {
                        throw new SyntaxError('Constructor must be called with the new operator');
                    }
                    this.object = object;
                    this.index = value ? index : null;
                    this.value = value ? value : index;
                    if (!type.isSymbolNode(object) && !type.isAccessorNode(object)) {
                        throw new TypeError('SymbolNode or AccessorNode expected as "object"');
                    }
                    if (type.isSymbolNode(object) && object.name === 'end') {
                        throw new Error('Cannot assign to symbol "end"');
                    }
                    if (this.index && !type.isIndexNode(this.index)) {
                        throw new TypeError('IndexNode expected as "index"');
                    }
                    if (!type.isNode(this.value)) {
                        throw new TypeError('Node expected as "value"');
                    }
                    Object.defineProperty(this, 'name', {
                        get: function () {
                            if (this.index) {
                                return (this.index.isObjectProperty())
                                    ? this.index.getObjectProperty()
                                    : '';
                            }
                            else {
                                return this.object.name || '';
                            }
                        }.bind(this),
                        set: function () {
                            throw new Error('Cannot assign a new name, name is read-only');
                        }
                    });
                }
                AssignmentNode.prototype = new Node();
                AssignmentNode.prototype.type = 'AssignmentNode';
                AssignmentNode.prototype.isAssignmentNode = true;
                function compileAssignmentNode(node, defs, args) {
                    if (!(node instanceof AssignmentNode)) {
                        throw new TypeError('No valid AssignmentNode');
                    }
                    defs.assign = assign;
                    defs.access = access;
                    defs.getSafeProperty = getSafeProperty;
                    defs.setSafeProperty = setSafeProperty;
                    var size;
                    var object = compile(node.object, defs, args);
                    var index = node.index ? compile(node.index, defs, args) : null;
                    var value = compile(node.value, defs, args);
                    var jsName = stringify(node.object.name);
                    if (!node.index) {
                        if (!type.isSymbolNode(node.object)) {
                            throw new TypeError('SymbolNode expected as object');
                        }
                        return 'setSafeProperty(scope, ' + jsName + ', ' + value + ')';
                    }
                    else if (node.index.isObjectProperty()) {
                        var jsProp = stringify(node.index.getObjectProperty());
                        return 'setSafeProperty(' + object + ', ' + jsProp + ', ' + value + ')';
                    }
                    else if (type.isSymbolNode(node.object)) {
                        size = node.index.needsSize() ? 'var size = math.size(object).valueOf();' : '';
                        return '(function () {' +
                            '  var object = ' + object + ';' +
                            '  var value = ' + value + ';' +
                            '  ' + size +
                            '  setSafeProperty(scope, ' + jsName + ', assign(object, ' + index + ', value));' +
                            '  return value;' +
                            '})()';
                    }
                    else {
                        size = node.index.needsSize() ? 'var size = math.size(object).valueOf();' : '';
                        var parentObject = compile(node.object.object, defs, args);
                        if (node.object.index.isObjectProperty()) {
                            var jsParentProperty = stringify(node.object.index.getObjectProperty());
                            return '(function () {' +
                                '  var parent = ' + parentObject + ';' +
                                '  var object = getSafeProperty(parent, ' + jsParentProperty + ');' +
                                '  var value = ' + value + ';' +
                                size +
                                '  setSafeProperty(parent, ' + jsParentProperty + ', assign(object, ' + index + ', value));' +
                                '  return value;' +
                                '})()';
                        }
                        else {
                            var parentSize = node.object.index.needsSize() ? 'var size = math.size(parent).valueOf();' : '';
                            var parentIndex = compile(node.object.index, defs, args);
                            return '(function () {' +
                                '  var parent = ' + parentObject + ';' +
                                '  ' + parentSize +
                                '  var parentIndex = ' + parentIndex + ';' +
                                '  var object = access(parent, parentIndex);' +
                                '  var value = ' + value + ';' +
                                '  ' + size +
                                '  assign(parent, parentIndex, assign(object, ' + index + ', value));' +
                                '  return value;' +
                                '})()';
                        }
                    }
                }
                register(AssignmentNode.prototype.type, compileAssignmentNode);
                AssignmentNode.prototype.forEach = function (callback) {
                    callback(this.object, 'object', this);
                    if (this.index) {
                        callback(this.index, 'index', this);
                    }
                    callback(this.value, 'value', this);
                };
                AssignmentNode.prototype.map = function (callback) {
                    var object = this._ifNode(callback(this.object, 'object', this));
                    var index = this.index
                        ? this._ifNode(callback(this.index, 'index', this))
                        : null;
                    var value = this._ifNode(callback(this.value, 'value', this));
                    return new AssignmentNode(object, index, value);
                };
                AssignmentNode.prototype.clone = function () {
                    return new AssignmentNode(this.object, this.index, this.value);
                };
                function needParenthesis(node, parenthesis) {
                    if (!parenthesis) {
                        parenthesis = 'keep';
                    }
                    var precedence = operators.getPrecedence(node, parenthesis);
                    var exprPrecedence = operators.getPrecedence(node.value, parenthesis);
                    return (parenthesis === 'all')
                        || ((exprPrecedence !== null) && (exprPrecedence <= precedence));
                }
                AssignmentNode.prototype._toString = function (options) {
                    var object = this.object.toString(options);
                    var index = this.index ? this.index.toString(options) : '';
                    var value = this.value.toString(options);
                    if (needParenthesis(this, options && options.parenthesis)) {
                        value = '(' + value + ')';
                    }
                    return object + index + ' = ' + value;
                };
                AssignmentNode.prototype.toHTML = function (options) {
                    var object = this.object.toHTML(options);
                    var index = this.index ? this.index.toHTML(options) : '';
                    var value = this.value.toHTML(options);
                    if (needParenthesis(this, options && options.parenthesis)) {
                        value = '<span class="math-paranthesis math-round-parenthesis">(</span>' + value + '<span class="math-paranthesis math-round-parenthesis">)</span>';
                    }
                    return object + index + '<span class="math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator">=</span>' + value;
                };
                AssignmentNode.prototype._toTex = function (options) {
                    var object = this.object.toTex(options);
                    var index = this.index ? this.index.toTex(options) : '';
                    var value = this.value.toTex(options);
                    if (needParenthesis(this, options && options.parenthesis)) {
                        value = '\\left(' + value + '\\right)';
                    }
                    return object + index + ':=' + value;
                };
                return AssignmentNode;
            }
            exports.name = 'AssignmentNode';
            exports.path = 'expression.node';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var map = __webpack_require__(2).map;
            var join = __webpack_require__(2).join;
            function factory(type, config, load, typed) {
                var register = load(__webpack_require__(7)).register;
                var compile = load(__webpack_require__(7)).compile;
                var Node = load(__webpack_require__(14));
                var ResultSet = load(__webpack_require__(94));
                function BlockNode(blocks) {
                    if (!(this instanceof BlockNode)) {
                        throw new SyntaxError('Constructor must be called with the new operator');
                    }
                    if (!Array.isArray(blocks))
                        throw new Error('Array expected');
                    this.blocks = blocks.map(function (block) {
                        var node = block && block.node;
                        var visible = block && block.visible !== undefined ? block.visible : true;
                        if (!type.isNode(node))
                            throw new TypeError('Property "node" must be a Node');
                        if (typeof visible !== 'boolean')
                            throw new TypeError('Property "visible" must be a boolean');
                        return {
                            node: node,
                            visible: visible
                        };
                    });
                }
                BlockNode.prototype = new Node();
                BlockNode.prototype.type = 'BlockNode';
                BlockNode.prototype.isBlockNode = true;
                function compileBlockNode(node, defs, args) {
                    if (!(node instanceof BlockNode)) {
                        throw new TypeError('No valid BlockNode');
                    }
                    defs.ResultSet = ResultSet;
                    var blocks = map(node.blocks, function (param) {
                        var js = compile(param.node, defs, args);
                        if (param.visible) {
                            return 'results.push(' + js + ');';
                        }
                        else {
                            return js + ';';
                        }
                    });
                    return '(function () {' +
                        'var results = [];' +
                        join(blocks, '') +
                        'return new ResultSet(results);' +
                        '})()';
                }
                register(BlockNode.prototype.type, compileBlockNode);
                BlockNode.prototype.forEach = function (callback) {
                    for (var i = 0; i < this.blocks.length; i++) {
                        callback(this.blocks[i].node, 'blocks[' + i + '].node', this);
                    }
                };
                BlockNode.prototype.map = function (callback) {
                    var blocks = [];
                    for (var i = 0; i < this.blocks.length; i++) {
                        var block = this.blocks[i];
                        var node = this._ifNode(callback(block.node, 'blocks[' + i + '].node', this));
                        blocks[i] = {
                            node: node,
                            visible: block.visible
                        };
                    }
                    return new BlockNode(blocks);
                };
                BlockNode.prototype.clone = function () {
                    var blocks = this.blocks.map(function (block) {
                        return {
                            node: block.node,
                            visible: block.visible
                        };
                    });
                    return new BlockNode(blocks);
                };
                BlockNode.prototype._toString = function (options) {
                    return this.blocks.map(function (param) {
                        return param.node.toString(options) + (param.visible ? '' : ';');
                    }).join('\n');
                };
                BlockNode.prototype.toHTML = function (options) {
                    return this.blocks.map(function (param) {
                        return param.node.toHTML(options) + (param.visible ? '' : '<span class="math-separator">;</span>');
                    }).join('<span class="math-separator"><br /></span>');
                };
                BlockNode.prototype._toTex = function (options) {
                    return this.blocks.map(function (param) {
                        return param.node.toTex(options) + (param.visible ? '' : ';');
                    }).join('\\;\\;\n');
                };
                return BlockNode;
            }
            exports.name = 'BlockNode';
            exports.path = 'expression.node';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var latex = __webpack_require__(4);
            var operators = __webpack_require__(52);
            function factory(type, config, load, typed) {
                var register = load(__webpack_require__(7)).register;
                var compile = load(__webpack_require__(7)).compile;
                var Node = load(__webpack_require__(14));
                function ConditionalNode(condition, trueExpr, falseExpr) {
                    if (!(this instanceof ConditionalNode)) {
                        throw new SyntaxError('Constructor must be called with the new operator');
                    }
                    if (!type.isNode(condition))
                        throw new TypeError('Parameter condition must be a Node');
                    if (!type.isNode(trueExpr))
                        throw new TypeError('Parameter trueExpr must be a Node');
                    if (!type.isNode(falseExpr))
                        throw new TypeError('Parameter falseExpr must be a Node');
                    this.condition = condition;
                    this.trueExpr = trueExpr;
                    this.falseExpr = falseExpr;
                }
                ConditionalNode.prototype = new Node();
                ConditionalNode.prototype.type = 'ConditionalNode';
                ConditionalNode.prototype.isConditionalNode = true;
                function compileConditionalNode(node, defs, args) {
                    if (!(node instanceof ConditionalNode)) {
                        throw new TypeError('No valid ConditionalNode');
                    }
                    defs.testCondition = function (condition) {
                        if (typeof condition === 'number'
                            || typeof condition === 'boolean'
                            || typeof condition === 'string') {
                            return condition ? true : false;
                        }
                        if (condition) {
                            if (type.isBigNumber(condition)) {
                                return condition.isZero() ? false : true;
                            }
                            if (type.isComplex(condition)) {
                                return (condition.re || condition.im) ? true : false;
                            }
                            if (type.isUnit(condition)) {
                                return condition.value ? true : false;
                            }
                        }
                        if (condition === null || condition === undefined) {
                            return false;
                        }
                        throw new TypeError('Unsupported type of condition "' + defs.math['typeof'](condition) + '"');
                    };
                    return ('testCondition(' + compile(node.condition, defs, args) + ') ? ' +
                        '( ' + compile(node.trueExpr, defs, args) + ') : ' +
                        '( ' + compile(node.falseExpr, defs, args) + ')');
                }
                register(ConditionalNode.prototype.type, compileConditionalNode);
                ConditionalNode.prototype.forEach = function (callback) {
                    callback(this.condition, 'condition', this);
                    callback(this.trueExpr, 'trueExpr', this);
                    callback(this.falseExpr, 'falseExpr', this);
                };
                ConditionalNode.prototype.map = function (callback) {
                    return new ConditionalNode(this._ifNode(callback(this.condition, 'condition', this)), this._ifNode(callback(this.trueExpr, 'trueExpr', this)), this._ifNode(callback(this.falseExpr, 'falseExpr', this)));
                };
                ConditionalNode.prototype.clone = function () {
                    return new ConditionalNode(this.condition, this.trueExpr, this.falseExpr);
                };
                ConditionalNode.prototype._toString = function (options) {
                    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';
                    var precedence = operators.getPrecedence(this, parenthesis);
                    var condition = this.condition.toString(options);
                    var conditionPrecedence = operators.getPrecedence(this.condition, parenthesis);
                    if ((parenthesis === 'all')
                        || (this.condition.type === 'OperatorNode')
                        || ((conditionPrecedence !== null) && (conditionPrecedence <= precedence))) {
                        condition = '(' + condition + ')';
                    }
                    var trueExpr = this.trueExpr.toString(options);
                    var truePrecedence = operators.getPrecedence(this.trueExpr, parenthesis);
                    if ((parenthesis === 'all')
                        || (this.trueExpr.type === 'OperatorNode')
                        || ((truePrecedence !== null) && (truePrecedence <= precedence))) {
                        trueExpr = '(' + trueExpr + ')';
                    }
                    var falseExpr = this.falseExpr.toString(options);
                    var falsePrecedence = operators.getPrecedence(this.falseExpr, parenthesis);
                    if ((parenthesis === 'all')
                        || (this.falseExpr.type === 'OperatorNode')
                        || ((falsePrecedence !== null) && (falsePrecedence <= precedence))) {
                        falseExpr = '(' + falseExpr + ')';
                    }
                    return condition + ' ? ' + trueExpr + ' : ' + falseExpr;
                };
                ConditionalNode.prototype.toHTML = function (options) {
                    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';
                    var precedence = operators.getPrecedence(this, parenthesis);
                    var condition = this.condition.toHTML(options);
                    var conditionPrecedence = operators.getPrecedence(this.condition, parenthesis);
                    if ((parenthesis === 'all')
                        || (this.condition.type === 'OperatorNode')
                        || ((conditionPrecedence !== null) && (conditionPrecedence <= precedence))) {
                        condition = '<span class="math-parenthesis math-round-parenthesis">(</span>' + condition + '<span class="math-parenthesis math-round-parenthesis">)</span>';
                    }
                    var trueExpr = this.trueExpr.toHTML(options);
                    var truePrecedence = operators.getPrecedence(this.trueExpr, parenthesis);
                    if ((parenthesis === 'all')
                        || (this.trueExpr.type === 'OperatorNode')
                        || ((truePrecedence !== null) && (truePrecedence <= precedence))) {
                        trueExpr = '<span class="math-parenthesis math-round-parenthesis">(</span>' + trueExpr + '<span class="math-parenthesis math-round-parenthesis">)</span>';
                    }
                    var falseExpr = this.falseExpr.toHTML(options);
                    var falsePrecedence = operators.getPrecedence(this.falseExpr, parenthesis);
                    if ((parenthesis === 'all')
                        || (this.falseExpr.type === 'OperatorNode')
                        || ((falsePrecedence !== null) && (falsePrecedence <= precedence))) {
                        falseExpr = '<span class="math-parenthesis math-round-parenthesis">(</span>' + falseExpr + '<span class="math-parenthesis math-round-parenthesis">)</span>';
                    }
                    return condition + '<span class="math-operator math-conditional-operator">?</span>' + trueExpr + '<span class="math-operator math-conditional-operator">:</span>' + falseExpr;
                };
                ConditionalNode.prototype._toTex = function (options) {
                    return '\\begin{cases} {'
                        + this.trueExpr.toTex(options) + '}, &\\quad{\\text{if }\\;'
                        + this.condition.toTex(options)
                        + '}\\\\{' + this.falseExpr.toTex(options)
                        + '}, &\\quad{\\text{otherwise}}\\end{cases}';
                };
                return ConditionalNode;
            }
            exports.name = 'ConditionalNode';
            exports.path = 'expression.node';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var keywords = __webpack_require__(77);
            var stringify = __webpack_require__(9).stringify;
            var escape = __webpack_require__(9).escape;
            var map = __webpack_require__(2).map;
            var join = __webpack_require__(2).join;
            var latex = __webpack_require__(4);
            var operators = __webpack_require__(52);
            var setSafeProperty = __webpack_require__(13).setSafeProperty;
            var getUniqueArgumentName = __webpack_require__(108);
            function factory(type, config, load, typed) {
                var register = load(__webpack_require__(7)).register;
                var compile = load(__webpack_require__(7)).compile;
                var Node = load(__webpack_require__(14));
                function FunctionAssignmentNode(name, params, expr) {
                    if (!(this instanceof FunctionAssignmentNode)) {
                        throw new SyntaxError('Constructor must be called with the new operator');
                    }
                    if (typeof name !== 'string')
                        throw new TypeError('String expected for parameter "name"');
                    if (!Array.isArray(params))
                        throw new TypeError('Array containing strings or objects expected for parameter "params"');
                    if (!type.isNode(expr))
                        throw new TypeError('Node expected for parameter "expr"');
                    if (name in keywords)
                        throw new Error('Illegal function name, "' + name + '" is a reserved keyword');
                    this.name = name;
                    this.params = params.map(function (param) {
                        return param && param.name || param;
                    });
                    this.types = params.map(function (param) {
                        return param && param.type || 'any';
                    });
                    this.expr = expr;
                }
                FunctionAssignmentNode.prototype = new Node();
                FunctionAssignmentNode.prototype.type = 'FunctionAssignmentNode';
                FunctionAssignmentNode.prototype.isFunctionAssignmentNode = true;
                function compileFunctionAssignmentNode(node, defs, args) {
                    if (!(node instanceof FunctionAssignmentNode)) {
                        throw new TypeError('No valid FunctionAssignmentNode');
                    }
                    defs.typed = typed;
                    defs.setSafeProperty = setSafeProperty;
                    var childArgs = Object.create(args);
                    var jsParams = map(node.params, function (param) {
                        childArgs[param] = getUniqueArgumentName(childArgs);
                        return childArgs[param];
                    });
                    var jsExpr = compile(node.expr, defs, childArgs);
                    var jsName = stringify(node.name);
                    return 'setSafeProperty(scope, ' + jsName + ', ' +
                        '  (function () {' +
                        '    var fn = typed(' + jsName + ', {' +
                        '      ' + stringify(join(node.types, ',')) + ': function (' + join(jsParams, ',') + ') {' +
                        '        return ' + jsExpr + '' +
                        '      }' +
                        '    });' +
                        '    fn.syntax = ' + stringify(node.name + '(' + join(node.params, ', ') + ')') + ';' +
                        '    return fn;' +
                        '  })())';
                }
                register(FunctionAssignmentNode.prototype.type, compileFunctionAssignmentNode);
                FunctionAssignmentNode.prototype.forEach = function (callback) {
                    callback(this.expr, 'expr', this);
                };
                FunctionAssignmentNode.prototype.map = function (callback) {
                    var expr = this._ifNode(callback(this.expr, 'expr', this));
                    return new FunctionAssignmentNode(this.name, this.params.slice(0), expr);
                };
                FunctionAssignmentNode.prototype.clone = function () {
                    return new FunctionAssignmentNode(this.name, this.params.slice(0), this.expr);
                };
                function needParenthesis(node, parenthesis) {
                    var precedence = operators.getPrecedence(node, parenthesis);
                    var exprPrecedence = operators.getPrecedence(node.expr, parenthesis);
                    return (parenthesis === 'all')
                        || ((exprPrecedence !== null) && (exprPrecedence <= precedence));
                }
                FunctionAssignmentNode.prototype._toString = function (options) {
                    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';
                    var expr = this.expr.toString(options);
                    if (needParenthesis(this, parenthesis)) {
                        expr = '(' + expr + ')';
                    }
                    return this.name + '(' + this.params.join(', ') + ') = ' + expr;
                };
                FunctionAssignmentNode.prototype.toHTML = function (options) {
                    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';
                    var params = [];
                    for (var i = 0; i < this.params.length; i++) {
                        params.push('<span class="math-symbol math-parameter">' + escape(this.params[i]) + '</span>');
                    }
                    var expr = this.expr.toHTML(options);
                    if (needParenthesis(this, parenthesis)) {
                        expr = '<span class="math-parenthesis math-round-parenthesis">(</span>' + expr + '<span class="math-parenthesis math-round-parenthesis">)</span>';
                    }
                    return '<span class="math-function">' + escape(this.name) + '</span>' + '<span class="math-parenthesis math-round-parenthesis">(</span>' + params.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-round-parenthesis">)</span><span class="math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator">=</span>' + expr;
                };
                FunctionAssignmentNode.prototype._toTex = function (options) {
                    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';
                    var expr = this.expr.toTex(options);
                    if (needParenthesis(this, parenthesis)) {
                        expr = '\\left(' + expr + '\\right)';
                    }
                    return '\\mathrm{' + this.name
                        + '}\\left(' + this.params.map(latex.toSymbol).join(',') + '\\right):=' + expr;
                };
                return FunctionAssignmentNode;
            }
            exports.name = 'FunctionAssignmentNode';
            exports.path = 'expression.node';
            exports.factory = factory;
        }),
        (function (module, exports) {
            function getUniqueArgumentName(defs) {
                return 'arg' + Object.keys(defs).length;
            }
            module.exports = getUniqueArgumentName;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var stringify = __webpack_require__(9).stringify;
            var escape = __webpack_require__(9).escape;
            var isSafeProperty = __webpack_require__(13).isSafeProperty;
            var hasOwnProperty = __webpack_require__(5).hasOwnProperty;
            function factory(type, config, load, typed) {
                var register = load(__webpack_require__(7)).register;
                var compile = load(__webpack_require__(7)).compile;
                var Node = load(__webpack_require__(14));
                function ObjectNode(properties) {
                    if (!(this instanceof ObjectNode)) {
                        throw new SyntaxError('Constructor must be called with the new operator');
                    }
                    this.properties = properties || {};
                    if (properties) {
                        if (!(typeof properties === 'object') || !Object.keys(properties).every(function (key) {
                            return type.isNode(properties[key]);
                        })) {
                            throw new TypeError('Object containing Nodes expected');
                        }
                    }
                }
                ObjectNode.prototype = new Node();
                ObjectNode.prototype.type = 'ObjectNode';
                ObjectNode.prototype.isObjectNode = true;
                function compileObjectNode(node, defs, args) {
                    if (!(node instanceof ObjectNode)) {
                        throw new TypeError('No valid ObjectNode');
                    }
                    var entries = [];
                    for (var key in node.properties) {
                        if (hasOwnProperty(node.properties, key)) {
                            if (!isSafeProperty(node.properties, key)) {
                                throw new Error('No access to property "' + key + '"');
                            }
                            entries.push(stringify(key) + ': ' + compile(node.properties[key], defs, args));
                        }
                    }
                    return '{' + entries.join(', ') + '}';
                }
                register(ObjectNode.prototype.type, compileObjectNode);
                ObjectNode.prototype.forEach = function (callback) {
                    for (var key in this.properties) {
                        if (this.properties.hasOwnProperty(key)) {
                            callback(this.properties[key], 'properties[' + stringify(key) + ']', this);
                        }
                    }
                };
                ObjectNode.prototype.map = function (callback) {
                    var properties = {};
                    for (var key in this.properties) {
                        if (this.properties.hasOwnProperty(key)) {
                            properties[key] = this._ifNode(callback(this.properties[key], 'properties[' + stringify(key) + ']', this));
                        }
                    }
                    return new ObjectNode(properties);
                };
                ObjectNode.prototype.clone = function () {
                    var properties = {};
                    for (var key in this.properties) {
                        if (this.properties.hasOwnProperty(key)) {
                            properties[key] = this.properties[key];
                        }
                    }
                    return new ObjectNode(properties);
                };
                ObjectNode.prototype._toString = function (options) {
                    var entries = [];
                    for (var key in this.properties) {
                        if (this.properties.hasOwnProperty(key)) {
                            entries.push(stringify(key) + ': ' + this.properties[key].toString(options));
                        }
                    }
                    return '{' + entries.join(', ') + '}';
                };
                ObjectNode.prototype.toHTML = function (options) {
                    var entries = [];
                    for (var key in this.properties) {
                        if (this.properties.hasOwnProperty(key)) {
                            entries.push('<span class="math-symbol math-property">' + escape(key) + '</span>' + '<span class="math-operator math-assignment-operator math-property-assignment-operator math-binary-operator">:</span>' + this.properties[key].toHTML(options));
                        }
                    }
                    return '<span class="math-parenthesis math-curly-parenthesis">{</span>' + entries.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-curly-parenthesis">}</span>';
                };
                ObjectNode.prototype._toTex = function (options) {
                    var entries = [];
                    for (var key in this.properties) {
                        if (this.properties.hasOwnProperty(key)) {
                            entries.push("\\mathbf{" + key + ':} & ' + this.properties[key].toTex(options) + "\\\\");
                        }
                    }
                    return '\\left\\{\\begin{array}{ll}' + entries.join('\n') + '\\end{array}\\right\\}';
                };
                return ObjectNode;
            }
            exports.name = 'ObjectNode';
            exports.path = 'expression.node';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load, typed, math) {
                var Parser = load(__webpack_require__(111));
                return typed('parser', {
                    '': function () {
                        return new Parser(math);
                    }
                });
            }
            exports.name = 'parser';
            exports.factory = factory;
            exports.math = true;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var extend = __webpack_require__(5).extend;
            var customs = __webpack_require__(13);
            function factory(type, config, load, typed, math) {
                var _parse = load(__webpack_require__(39));
                function Parser() {
                    if (!(this instanceof Parser)) {
                        throw new SyntaxError('Constructor must be called with the new operator');
                    }
                    this.scope = {};
                }
                Parser.prototype.type = 'Parser';
                Parser.prototype.isParser = true;
                Parser.prototype.parse = function (expr) {
                    throw new Error('Parser.parse is deprecated. Use math.parse instead.');
                };
                Parser.prototype.compile = function (expr) {
                    throw new Error('Parser.compile is deprecated. Use math.compile instead.');
                };
                Parser.prototype.eval = function (expr) {
                    return _parse(expr)
                        .compile()
                        .eval(this.scope);
                };
                Parser.prototype.get = function (name) {
                    return name in this.scope
                        ? customs.getSafeProperty(this.scope, name)
                        : undefined;
                };
                Parser.prototype.getAll = function () {
                    return extend({}, this.scope);
                };
                Parser.prototype.set = function (name, value) {
                    return customs.setSafeProperty(this.scope, name, value);
                };
                Parser.prototype.remove = function (name) {
                    delete this.scope[name];
                };
                Parser.prototype.clear = function () {
                    for (var name in this.scope) {
                        if (this.scope.hasOwnProperty(name)) {
                            delete this.scope[name];
                        }
                    }
                };
                return Parser;
            }
            exports.name = 'Parser';
            exports.path = 'expression';
            exports.factory = factory;
            exports.math = true;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepForEach = __webpack_require__(42);
            var reduce = __webpack_require__(65);
            var containsCollections = __webpack_require__(66);
            function factory(type, config, load, typed) {
                var larger = load(__webpack_require__(34));
                var max = typed('max', {
                    'Array | Matrix': _max,
                    'Array | Matrix, number | BigNumber': function (array, dim) {
                        return reduce(array, dim.valueOf(), _largest);
                    },
                    '...': function (args) {
                        if (containsCollections(args)) {
                            throw new TypeError('Scalar values expected in function max');
                        }
                        return _max(args);
                    }
                });
                max.toTex = '\\max\\left(${args}\\right)';
                return max;
                function _largest(x, y) {
                    return larger(x, y) ? x : y;
                }
                function _max(array) {
                    var max = undefined;
                    deepForEach(array, function (value) {
                        if (max === undefined || larger(value, max)) {
                            max = value;
                        }
                    });
                    if (max === undefined) {
                        throw new Error('Cannot calculate max of an empty array');
                    }
                    return max;
                }
            }
            exports.name = 'max';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var size = __webpack_require__(2).size;
            var deepForEach = __webpack_require__(42);
            var reduce = __webpack_require__(65);
            var containsCollections = __webpack_require__(66);
            function factory(type, config, load, typed) {
                var add = load(__webpack_require__(18));
                var divide = load(__webpack_require__(47));
                var mean = typed('mean', {
                    'Array | Matrix': _mean,
                    'Array | Matrix, number | BigNumber': _nmean,
                    '...': function (args) {
                        if (containsCollections(args)) {
                            throw new TypeError('Scalar values expected in function mean');
                        }
                        return _mean(args);
                    }
                });
                mean.toTex = undefined;
                return mean;
                function _nmean(array, dim) {
                    var sum = reduce(array, dim, add);
                    var s = Array.isArray(array) ? size(array) : array.size();
                    return divide(sum, s[dim]);
                }
                function _mean(array) {
                    var sum = 0;
                    var num = 0;
                    deepForEach(array, function (value) {
                        sum = add(sum, value);
                        num++;
                    });
                    if (num === 0) {
                        throw new Error('Cannot calculate mean of an empty array');
                    }
                    return divide(sum, num);
                }
            }
            exports.name = 'mean';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var util = __webpack_require__(25);
            function factory(type, config, load, typed) {
                var matrix = load(__webpack_require__(0));
                var divideScalar = load(__webpack_require__(19));
                var addScalar = load(__webpack_require__(20));
                var multiply = load(__webpack_require__(12));
                var unaryMinus = load(__webpack_require__(37));
                var det = load(__webpack_require__(115));
                var eye = load(__webpack_require__(61));
                var inv = typed('inv', {
                    'Array | Matrix': function (x) {
                        var size = type.isMatrix(x) ? x.size() : util.array.size(x);
                        switch (size.length) {
                            case 1:
                                if (size[0] == 1) {
                                    if (type.isMatrix(x)) {
                                        return matrix([
                                            divideScalar(1, x.valueOf()[0])
                                        ]);
                                    }
                                    else {
                                        return [
                                            divideScalar(1, x[0])
                                        ];
                                    }
                                }
                                else {
                                    throw new RangeError('Matrix must be square ' +
                                        '(size: ' + util.string.format(size) + ')');
                                }
                            case 2:
                                var rows = size[0];
                                var cols = size[1];
                                if (rows == cols) {
                                    if (type.isMatrix(x)) {
                                        return matrix(_inv(x.valueOf(), rows, cols), x.storage());
                                    }
                                    else {
                                        return _inv(x, rows, cols);
                                    }
                                }
                                else {
                                    throw new RangeError('Matrix must be square ' +
                                        '(size: ' + util.string.format(size) + ')');
                                }
                            default:
                                throw new RangeError('Matrix must be two dimensional ' +
                                    '(size: ' + util.string.format(size) + ')');
                        }
                    },
                    'any': function (x) {
                        return divideScalar(1, x);
                    }
                });
                function _inv(mat, rows, cols) {
                    var r, s, f, value, temp;
                    if (rows == 1) {
                        value = mat[0][0];
                        if (value == 0) {
                            throw Error('Cannot calculate inverse, determinant is zero');
                        }
                        return [[
                                divideScalar(1, value)
                            ]];
                    }
                    else if (rows == 2) {
                        var d = det(mat);
                        if (d == 0) {
                            throw Error('Cannot calculate inverse, determinant is zero');
                        }
                        return [
                            [
                                divideScalar(mat[1][1], d),
                                divideScalar(unaryMinus(mat[0][1]), d)
                            ],
                            [
                                divideScalar(unaryMinus(mat[1][0]), d),
                                divideScalar(mat[0][0], d)
                            ]
                        ];
                    }
                    else {
                        var A = mat.concat();
                        for (r = 0; r < rows; r++) {
                            A[r] = A[r].concat();
                        }
                        var B = eye(rows).valueOf();
                        for (var c = 0; c < cols; c++) {
                            r = c;
                            while (r < rows && A[r][c] == 0) {
                                r++;
                            }
                            if (r == rows || A[r][c] == 0) {
                                throw Error('Cannot calculate inverse, determinant is zero');
                            }
                            if (r != c) {
                                temp = A[c];
                                A[c] = A[r];
                                A[r] = temp;
                                temp = B[c];
                                B[c] = B[r];
                                B[r] = temp;
                            }
                            var Ac = A[c], Bc = B[c];
                            for (r = 0; r < rows; r++) {
                                var Ar = A[r], Br = B[r];
                                if (r != c) {
                                    if (Ar[c] != 0) {
                                        f = divideScalar(unaryMinus(Ar[c]), Ac[c]);
                                        for (s = c; s < cols; s++) {
                                            Ar[s] = addScalar(Ar[s], multiply(f, Ac[s]));
                                        }
                                        for (s = 0; s < cols; s++) {
                                            Br[s] = addScalar(Br[s], multiply(f, Bc[s]));
                                        }
                                    }
                                }
                                else {
                                    f = Ac[c];
                                    for (s = c; s < cols; s++) {
                                        Ar[s] = divideScalar(Ar[s], f);
                                    }
                                    for (s = 0; s < cols; s++) {
                                        Br[s] = divideScalar(Br[s], f);
                                    }
                                }
                            }
                        }
                        return B;
                    }
                }
                inv.toTex = { 1: '\\left(${args[0]}\\right)^{-1}' };
                return inv;
            }
            exports.name = 'inv';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var util = __webpack_require__(25);
            var object = util.object;
            var string = util.string;
            function factory(type, config, load, typed) {
                var matrix = load(__webpack_require__(0));
                var add = load(__webpack_require__(18));
                var subtract = load(__webpack_require__(21));
                var multiply = load(__webpack_require__(12));
                var unaryMinus = load(__webpack_require__(37));
                var det = typed('det', {
                    'any': function (x) {
                        return object.clone(x);
                    },
                    'Array | Matrix': function det(x) {
                        var size;
                        if (type.isMatrix(x)) {
                            size = x.size();
                        }
                        else if (Array.isArray(x)) {
                            x = matrix(x);
                            size = x.size();
                        }
                        else {
                            size = [];
                        }
                        switch (size.length) {
                            case 0:
                                return object.clone(x);
                            case 1:
                                if (size[0] == 1) {
                                    return object.clone(x.valueOf()[0]);
                                }
                                else {
                                    throw new RangeError('Matrix must be square ' +
                                        '(size: ' + string.format(size) + ')');
                                }
                            case 2:
                                var rows = size[0];
                                var cols = size[1];
                                if (rows == cols) {
                                    return _det(x.clone().valueOf(), rows, cols);
                                }
                                else {
                                    throw new RangeError('Matrix must be square ' +
                                        '(size: ' + string.format(size) + ')');
                                }
                            default:
                                throw new RangeError('Matrix must be two dimensional ' +
                                    '(size: ' + string.format(size) + ')');
                        }
                    }
                });
                det.toTex = { 1: '\\det\\left(${args[0]}\\right)' };
                return det;
                function _det(matrix, rows, cols) {
                    if (rows == 1) {
                        return object.clone(matrix[0][0]);
                    }
                    else if (rows == 2) {
                        return subtract(multiply(matrix[0][0], matrix[1][1]), multiply(matrix[1][0], matrix[0][1]));
                    }
                    else {
                        var compute_mu = function (matrix) {
                            var i, j;
                            var mu = new Array(matrix.length);
                            var sum = 0;
                            for (i = 1; i < matrix.length; i++) {
                                sum = add(sum, matrix[i][i]);
                            }
                            for (i = 0; i < matrix.length; i++) {
                                mu[i] = new Array(matrix.length);
                                mu[i][i] = unaryMinus(sum);
                                for (j = 0; j < i; j++) {
                                    mu[i][j] = 0;
                                }
                                for (j = i + 1; j < matrix.length; j++) {
                                    mu[i][j] = matrix[i][j];
                                }
                                if (i + 1 < matrix.length) {
                                    sum = subtract(sum, matrix[i + 1][i + 1]);
                                }
                            }
                            return mu;
                        };
                        var fa = matrix;
                        for (var i = 0; i < rows - 1; i++) {
                            fa = multiply(compute_mu(fa), matrix);
                        }
                        if (rows % 2 == 0) {
                            return unaryMinus(fa[0][0]);
                        }
                        else {
                            return fa[0][0];
                        }
                    }
                }
            }
            exports.name = 'det';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepForEach = __webpack_require__(42);
            var reduce = __webpack_require__(65);
            var containsCollections = __webpack_require__(66);
            function factory(type, config, load, typed) {
                var smaller = load(__webpack_require__(44));
                var min = typed('min', {
                    'Array | Matrix': _min,
                    'Array | Matrix, number | BigNumber': function (array, dim) {
                        return reduce(array, dim.valueOf(), _smallest);
                    },
                    '...': function (args) {
                        if (containsCollections(args)) {
                            throw new TypeError('Scalar values expected in function min');
                        }
                        return _min(args);
                    }
                });
                min.toTex = '\\min\\left(${args}\\right)';
                return min;
                function _smallest(x, y) {
                    return smaller(x, y) ? x : y;
                }
                function _min(array) {
                    var min = undefined;
                    deepForEach(array, function (value) {
                        if (min === undefined || smaller(value, min)) {
                            min = value;
                        }
                    });
                    if (min === undefined) {
                        throw new Error('Cannot calculate min of an empty array');
                    }
                    return min;
                }
            }
            exports.name = 'min';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load, typed) {
                var matrix = load(__webpack_require__(0));
                var ZERO = new type.BigNumber(0);
                var ONE = new type.BigNumber(1);
                var range = typed('range', {
                    'string': _strRange,
                    'string, boolean': _strRange,
                    'number, number': function (start, end) {
                        return _out(_rangeEx(start, end, 1));
                    },
                    'number, number, number': function (start, end, step) {
                        return _out(_rangeEx(start, end, step));
                    },
                    'number, number, boolean': function (start, end, includeEnd) {
                        return includeEnd
                            ? _out(_rangeInc(start, end, 1))
                            : _out(_rangeEx(start, end, 1));
                    },
                    'number, number, number, boolean': function (start, end, step, includeEnd) {
                        return includeEnd
                            ? _out(_rangeInc(start, end, step))
                            : _out(_rangeEx(start, end, step));
                    },
                    'BigNumber, BigNumber': function (start, end) {
                        return _out(_bigRangeEx(start, end, ONE));
                    },
                    'BigNumber, BigNumber, BigNumber': function (start, end, step) {
                        return _out(_bigRangeEx(start, end, step));
                    },
                    'BigNumber, BigNumber, boolean': function (start, end, includeEnd) {
                        return includeEnd
                            ? _out(_bigRangeInc(start, end, ONE))
                            : _out(_bigRangeEx(start, end, ONE));
                    },
                    'BigNumber, BigNumber, BigNumber, boolean': function (start, end, step, includeEnd) {
                        return includeEnd
                            ? _out(_bigRangeInc(start, end, step))
                            : _out(_bigRangeEx(start, end, step));
                    }
                });
                range.toTex = undefined;
                return range;
                function _out(arr) {
                    return config.matrix === 'Array' ? arr : matrix(arr);
                }
                function _strRange(str, includeEnd) {
                    var r = _parse(str);
                    if (!r) {
                        throw new SyntaxError('String "' + str + '" is no valid range');
                    }
                    var fn;
                    if (config.number === 'BigNumber') {
                        fn = includeEnd ? _bigRangeInc : _bigRangeEx;
                        return _out(fn(new type.BigNumber(r.start), new type.BigNumber(r.end), new type.BigNumber(r.step)));
                    }
                    else {
                        fn = includeEnd ? _rangeInc : _rangeEx;
                        return _out(fn(r.start, r.end, r.step));
                    }
                }
                function _rangeEx(start, end, step) {
                    var array = [], x = start;
                    if (step > 0) {
                        while (x < end) {
                            array.push(x);
                            x += step;
                        }
                    }
                    else if (step < 0) {
                        while (x > end) {
                            array.push(x);
                            x += step;
                        }
                    }
                    return array;
                }
                function _rangeInc(start, end, step) {
                    var array = [], x = start;
                    if (step > 0) {
                        while (x <= end) {
                            array.push(x);
                            x += step;
                        }
                    }
                    else if (step < 0) {
                        while (x >= end) {
                            array.push(x);
                            x += step;
                        }
                    }
                    return array;
                }
                function _bigRangeEx(start, end, step) {
                    var array = [], x = start;
                    if (step.gt(ZERO)) {
                        while (x.lt(end)) {
                            array.push(x);
                            x = x.plus(step);
                        }
                    }
                    else if (step.lt(ZERO)) {
                        while (x.gt(end)) {
                            array.push(x);
                            x = x.plus(step);
                        }
                    }
                    return array;
                }
                function _bigRangeInc(start, end, step) {
                    var array = [], x = start;
                    if (step.gt(ZERO)) {
                        while (x.lte(end)) {
                            array.push(x);
                            x = x.plus(step);
                        }
                    }
                    else if (step.lt(ZERO)) {
                        while (x.gte(end)) {
                            array.push(x);
                            x = x.plus(step);
                        }
                    }
                    return array;
                }
                function _parse(str) {
                    var args = str.split(':');
                    var nums = args.map(function (arg) {
                        return Number(arg);
                    });
                    var invalid = nums.some(function (num) {
                        return isNaN(num);
                    });
                    if (invalid) {
                        return null;
                    }
                    switch (nums.length) {
                        case 2:
                            return {
                                start: nums[0],
                                end: nums[1],
                                step: 1
                            };
                        case 3:
                            return {
                                start: nums[0],
                                end: nums[2],
                                step: nums[1]
                            };
                        default:
                            return null;
                    }
                }
            }
            exports.name = 'range';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load, typed, math) {
                var parse = load(__webpack_require__(39));
                var ConstantNode = load(__webpack_require__(53));
                var FunctionNode = load(__webpack_require__(54));
                var OperatorNode = load(__webpack_require__(62));
                var ParenthesisNode = load(__webpack_require__(63));
                var SymbolNode = load(__webpack_require__(40));
                var Node = load(__webpack_require__(14));
                var simplifyConstant = load(__webpack_require__(406));
                var simplifyCore = load(__webpack_require__(407));
                var resolve = load(__webpack_require__(408));
                var util = load(__webpack_require__(119));
                var isCommutative = util.isCommutative;
                var isAssociative = util.isAssociative;
                var flatten = util.flatten;
                var unflattenr = util.unflattenr;
                var unflattenl = util.unflattenl;
                var createMakeNodeFunction = util.createMakeNodeFunction;
                var simplify = typed('simplify', {
                    'string': function (expr) {
                        return simplify(parse(expr), simplify.rules, {});
                    },
                    'string, Object': function (expr, scope) {
                        return simplify(parse(expr), simplify.rules, scope);
                    },
                    'string, Array': function (expr, rules) {
                        return simplify(parse(expr), rules, {});
                    },
                    'string, Array, Object': function (expr, rules, scope) {
                        return simplify(parse(expr), rules, scope);
                    },
                    'Node, Object': function (expr, scope) {
                        return simplify(expr, simplify.rules, scope);
                    },
                    'Node': function (expr) {
                        return simplify(expr, simplify.rules, {});
                    },
                    'Node, Array': function (expr, rules) {
                        return simplify(expr, rules, {});
                    },
                    'Node, Array, Object': function (expr, rules, scope) {
                        rules = _buildRules(rules);
                        var res = resolve(expr, scope);
                        var res = removeParens(res);
                        var visited = {};
                        var str = res.toString({ parenthesis: 'all' });
                        while (!visited[str]) {
                            visited[str] = true;
                            _lastsym = 0;
                            for (var i = 0; i < rules.length; i++) {
                                if (typeof rules[i] === 'function') {
                                    res = rules[i](res);
                                }
                                else {
                                    flatten(res);
                                    res = applyRule(res, rules[i]);
                                }
                                unflattenl(res);
                            }
                            str = res.toString({ parenthesis: 'all' });
                        }
                        return res;
                    }
                });
                simplify.simplifyCore = simplifyCore;
                simplify.resolve = resolve;
                function removeParens(node) {
                    return node.transform(function (node, path, parent) {
                        return type.isParenthesisNode(node)
                            ? node.content
                            : node;
                    });
                }
                var SUPPORTED_CONSTANTS = {
                    true: true,
                    false: true,
                    e: true,
                    i: true,
                    Infinity: true,
                    LN2: true,
                    LN10: true,
                    LOG2E: true,
                    LOG10E: true,
                    NaN: true,
                    phi: true,
                    pi: true,
                    SQRT1_2: true,
                    SQRT2: true,
                    tau: true,
                };
                simplify.rules = [
                    simplifyCore,
                    { l: 'log(e)', r: '1' },
                    { l: 'n-n1', r: 'n+-n1' },
                    { l: '-(c*v)', r: '(-c) * v' },
                    { l: '-v', r: '(-1) * v' },
                    { l: 'n/n1^n2', r: 'n*n1^-n2' },
                    { l: 'n/n1', r: 'n*n1^-1' },
                    { l: 'n*n', r: 'n^2' },
                    { l: 'n * n^n1', r: 'n^(n1+1)' },
                    { l: 'n^n1 * n^n2', r: 'n^(n1+n2)' },
                    { l: 'n+n', r: '2*n' },
                    { l: 'n+-n', r: '0' },
                    { l: 'n1*n2 + n2', r: '(n1+1)*n2' },
                    { l: 'n1*n3 + n2*n3', r: '(n1+n2)*n3' },
                    simplifyConstant,
                    { l: '(-n)*n1', r: '-(n*n1)' },
                    { l: 'c+v', r: 'v+c', context: { 'add': { commutative: false } } },
                    { l: 'v*c', r: 'c*v', context: { 'multiply': { commutative: false } } },
                    { l: 'n+-n1', r: 'n-n1' },
                    { l: 'n*(n1^-1)', r: 'n/n1' },
                    { l: 'n*n1^-n2', r: 'n/n1^n2' },
                    { l: 'n1^-1', r: '1/n1' },
                    { l: 'n*(n1/n2)', r: '(n*n1)/n2' },
                    { l: 'n-(n1+n2)', r: 'n-n1-n2' },
                    { l: '1*n', r: 'n' }
                ];
                function _buildRules(rules) {
                    var ruleSet = [];
                    for (var i = 0; i < rules.length; i++) {
                        var rule = rules[i];
                        var newRule;
                        var ruleType = typeof rule;
                        switch (ruleType) {
                            case 'string':
                                var lr = rule.split('->');
                                if (lr.length !== 2) {
                                    throw SyntaxError('Could not parse rule: ' + rule);
                                }
                                rule = { l: lr[0], r: lr[1] };
                            case 'object':
                                newRule = {
                                    l: removeParens(parse(rule.l)),
                                    r: removeParens(parse(rule.r)),
                                };
                                if (rule.context) {
                                    newRule.evaluate = rule.context;
                                }
                                if (rule.evaluate) {
                                    newRule.evaluate = parse(rule.evaluate);
                                }
                                if (newRule.l.isOperatorNode && isAssociative(newRule.l)) {
                                    var makeNode = createMakeNodeFunction(newRule.l);
                                    var expandsym = _getExpandPlaceholderSymbol();
                                    newRule.expanded = {};
                                    newRule.expanded.l = makeNode([newRule.l.clone(), expandsym]);
                                    flatten(newRule.expanded.l);
                                    unflattenr(newRule.expanded.l);
                                    newRule.expanded.r = makeNode([newRule.r, expandsym]);
                                }
                                break;
                            case 'function':
                                newRule = rule;
                                break;
                            default:
                                throw TypeError('Unsupported type of rule: ' + ruleType);
                        }
                        ruleSet.push(newRule);
                    }
                    return ruleSet;
                }
                var _lastsym = 0;
                function _getExpandPlaceholderSymbol() {
                    return new SymbolNode('_p' + _lastsym++);
                }
                var applyRule = typed('applyRule', {
                    'Node, Object': function (node, rule) {
                        var res = node;
                        if (res instanceof OperatorNode || res instanceof FunctionNode) {
                            if (res.args) {
                                for (var i = 0; i < res.args.length; i++) {
                                    res.args[i] = applyRule(res.args[i], rule);
                                }
                            }
                        }
                        else if (res instanceof ParenthesisNode) {
                            if (res.content) {
                                res.content = applyRule(res.content, rule);
                            }
                        }
                        var repl = rule.r;
                        var matches = _ruleMatch(rule.l, res)[0];
                        if (!matches && rule.expanded) {
                            repl = rule.expanded.r;
                            matches = _ruleMatch(rule.expanded.l, res)[0];
                        }
                        if (matches) {
                            res = repl.clone();
                            var _transform = function (node) {
                                if (node.isSymbolNode && matches.placeholders.hasOwnProperty(node.name)) {
                                    return matches.placeholders[node.name].clone();
                                }
                                else {
                                    return node.map(_transform);
                                }
                            };
                            res = _transform(res);
                        }
                        return res;
                    }
                });
                function getSplits(node, context) {
                    var res = [];
                    var right, rightArgs;
                    var makeNode = createMakeNodeFunction(node);
                    if (isCommutative(node, context)) {
                        for (var i = 0; i < node.args.length; i++) {
                            rightArgs = node.args.slice(0);
                            rightArgs.splice(i, 1);
                            right = (rightArgs.length === 1) ? rightArgs[0] : makeNode(rightArgs);
                            res.push(makeNode([node.args[i], right]));
                        }
                    }
                    else {
                        rightArgs = node.args.slice(1);
                        right = (rightArgs.length === 1) ? rightArgs[0] : makeNode(rightArgs);
                        res.push(makeNode([node.args[0], right]));
                    }
                    return res;
                }
                function mergeMatch(match1, match2) {
                    var res = { placeholders: {} };
                    if (!match1.placeholders && !match2.placeholders) {
                        return res;
                    }
                    else if (!match1.placeholders) {
                        return match2;
                    }
                    else if (!match2.placeholders) {
                        return match1;
                    }
                    for (var key in match1.placeholders) {
                        res.placeholders[key] = match1.placeholders[key];
                        if (match2.placeholders.hasOwnProperty(key)) {
                            if (!_exactMatch(match1.placeholders[key], match2.placeholders[key])) {
                                return null;
                            }
                        }
                    }
                    for (var key in match2.placeholders) {
                        res.placeholders[key] = match2.placeholders[key];
                    }
                    return res;
                }
                function combineChildMatches(list1, list2) {
                    var res = [];
                    if (list1.length === 0 || list2.length === 0) {
                        return res;
                    }
                    var merged;
                    for (var i1 = 0; i1 < list1.length; i1++) {
                        for (var i2 = 0; i2 < list2.length; i2++) {
                            merged = mergeMatch(list1[i1], list2[i2]);
                            if (merged) {
                                res.push(merged);
                            }
                        }
                    }
                    return res;
                }
                function mergeChildMatches(childMatches) {
                    if (childMatches.length === 0) {
                        return childMatches;
                    }
                    var sets = childMatches.reduce(combineChildMatches);
                    var uniqueSets = [];
                    var unique = {};
                    for (var i = 0; i < sets.length; i++) {
                        var s = JSON.stringify(sets[i]);
                        if (!unique[s]) {
                            unique[s] = true;
                            uniqueSets.push(sets[i]);
                        }
                    }
                    return uniqueSets;
                }
                function _ruleMatch(rule, node, isSplit) {
                    var res = [{ placeholders: {} }];
                    if (rule instanceof OperatorNode && node instanceof OperatorNode
                        || rule instanceof FunctionNode && node instanceof FunctionNode) {
                        if (rule instanceof OperatorNode) {
                            if (rule.op !== node.op || rule.fn !== node.fn) {
                                return [];
                            }
                        }
                        else if (rule instanceof FunctionNode) {
                            if (rule.name !== node.name) {
                                return [];
                            }
                        }
                        if (node.args.length === 1 && rule.args.length === 1 || !isAssociative(node) || isSplit) {
                            var childMatches = [];
                            for (var i = 0; i < rule.args.length; i++) {
                                var childMatch = _ruleMatch(rule.args[i], node.args[i]);
                                if (childMatch.length === 0) {
                                    return [];
                                }
                                childMatches.push(childMatch);
                            }
                            res = mergeChildMatches(childMatches);
                        }
                        else if (node.args.length >= 2 && rule.args.length === 2) {
                            var splits = getSplits(node, rule.context);
                            var splitMatches = [];
                            for (var i = 0; i < splits.length; i++) {
                                var matchSet = _ruleMatch(rule, splits[i], true);
                                splitMatches = splitMatches.concat(matchSet);
                            }
                            return splitMatches;
                        }
                        else if (rule.args.length > 2) {
                            throw Error('Unexpected non-binary associative function: ' + rule.toString());
                        }
                        else {
                            return [];
                        }
                    }
                    else if (rule instanceof SymbolNode) {
                        if (rule.name.length === 0) {
                            throw new Error('Symbol in rule has 0 length...!?');
                        }
                        if (math.hasOwnProperty(rule.name)) {
                            if (!SUPPORTED_CONSTANTS[rule.name]) {
                                throw new Error('Built in constant: ' + rule.name + ' is not supported by simplify.');
                            }
                            if (rule.name !== node.name) {
                                return [];
                            }
                        }
                        else if (rule.name[0] === 'n' || rule.name.substring(0, 2) === '_p') {
                            res[0].placeholders[rule.name] = node;
                        }
                        else if (rule.name[0] === 'v') {
                            if (!type.isConstantNode(node)) {
                                res[0].placeholders[rule.name] = node;
                            }
                            else {
                                return [];
                            }
                        }
                        else if (rule.name[0] === 'c') {
                            if (node instanceof ConstantNode) {
                                res[0].placeholders[rule.name] = node;
                            }
                            else {
                                return [];
                            }
                        }
                        else {
                            throw new Error('Invalid symbol in rule: ' + rule.name);
                        }
                    }
                    else if (rule instanceof ConstantNode) {
                        if (rule.value !== node.value) {
                            return [];
                        }
                    }
                    else {
                        return [];
                    }
                    return res;
                }
                function _exactMatch(p, q) {
                    if (p instanceof ConstantNode && q instanceof ConstantNode) {
                        if (p.value !== q.value) {
                            return false;
                        }
                    }
                    else if (p instanceof SymbolNode && q instanceof SymbolNode) {
                        if (p.name !== q.name) {
                            return false;
                        }
                    }
                    else if (p instanceof OperatorNode && q instanceof OperatorNode
                        || p instanceof FunctionNode && q instanceof FunctionNode) {
                        if (p instanceof OperatorNode) {
                            if (p.op !== q.op || p.fn !== q.fn) {
                                return false;
                            }
                        }
                        else if (p instanceof FunctionNode) {
                            if (p.name !== q.name) {
                                return false;
                            }
                        }
                        if (p.args.length !== q.args.length) {
                            return false;
                        }
                        for (var i = 0; i < p.args.length; i++) {
                            if (!_exactMatch(p.args[i], q.args[i])) {
                                return false;
                            }
                        }
                    }
                    else {
                        return false;
                    }
                    return true;
                }
                return simplify;
            }
            exports.math = true;
            exports.name = 'simplify';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load, typed, math) {
                var FunctionNode = math.expression.node.FunctionNode;
                var OperatorNode = math.expression.node.OperatorNode;
                var SymbolNode = math.expression.node.SymbolNode;
                var commutative = {
                    'add': true,
                    'multiply': true
                };
                var associative = {
                    'add': true,
                    'multiply': true
                };
                function isCommutative(node, context) {
                    if (!node.args || node.args.length <= 1) {
                        return true;
                    }
                    var name = node.fn.toString();
                    if (context && context.hasOwnProperty(name) && context[name].hasOwnProperty('commutative')) {
                        return context[name].commutative;
                    }
                    return commutative[name] || false;
                }
                function isAssociative(node, context) {
                    if (!node.args || node.args.length <= 1) {
                        return true;
                    }
                    var name = node.fn.toString();
                    if (context && context.hasOwnProperty(name) && context[name].hasOwnProperty('associative')) {
                        return context[name].associative;
                    }
                    return associative[name] || false;
                }
                function flatten(node) {
                    if (!node.args || node.args.length === 0) {
                        return node;
                    }
                    node.args = allChildren(node);
                    for (var i = 0; i < node.args.length; i++) {
                        flatten(node.args[i]);
                    }
                }
                function allChildren(node) {
                    var op;
                    var children = [];
                    var findChildren = function (node) {
                        for (var i = 0; i < node.args.length; i++) {
                            var child = node.args[i];
                            if (type.isOperatorNode(child) && op === child.op) {
                                findChildren(child);
                            }
                            else {
                                children.push(child);
                            }
                        }
                    };
                    if (type.isOperatorNode(node) && isAssociative(node)) {
                        op = node.op;
                        findChildren(node);
                        return children;
                    }
                    else {
                        return node.args;
                    }
                }
                function unflattenr(node) {
                    if (!node.args || node.args.length === 0) {
                        return;
                    }
                    var makeNode = createMakeNodeFunction(node);
                    var l = node.args.length;
                    for (var i = 0; i < l; i++) {
                        unflattenr(node.args[i]);
                    }
                    if (l > 2 && isAssociative(node)) {
                        var curnode = node.args.pop();
                        while (node.args.length > 0) {
                            curnode = makeNode([node.args.pop(), curnode]);
                        }
                        node.args = curnode.args;
                    }
                }
                function unflattenl(node) {
                    if (!node.args || node.args.length === 0) {
                        return;
                    }
                    var makeNode = createMakeNodeFunction(node);
                    var l = node.args.length;
                    for (var i = 0; i < l; i++) {
                        unflattenl(node.args[i]);
                    }
                    if (l > 2 && isAssociative(node)) {
                        var curnode = node.args.shift();
                        while (node.args.length > 0) {
                            curnode = makeNode([curnode, node.args.shift()]);
                        }
                        node.args = curnode.args;
                    }
                }
                function createMakeNodeFunction(node) {
                    if (type.isOperatorNode(node)) {
                        return function (args) {
                            try {
                                return new OperatorNode(node.op, node.fn, args);
                            }
                            catch (err) {
                                console.error(err);
                                return [];
                            }
                        };
                    }
                    else {
                        return function (args) {
                            return new FunctionNode(new SymbolNode(node.name), args);
                        };
                    }
                }
                return {
                    createMakeNodeFunction: createMakeNodeFunction,
                    isCommutative: isCommutative,
                    isAssociative: isAssociative,
                    flatten: flatten,
                    allChildren: allChildren,
                    unflattenr: unflattenr,
                    unflattenl: unflattenl
                };
            }
            exports.factory = factory;
            exports.math = true;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var object = __webpack_require__(5);
            function factory(type, config, load, typed) {
                var clone = typed('clone', {
                    'any': object.clone
                });
                clone.toTex = undefined;
                return clone;
            }
            exports.name = 'clone';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var nearlyEqual = __webpack_require__(3).nearlyEqual;
            var bigNearlyEqual = __webpack_require__(35);
            function factory(type, config, load, typed) {
                var matrix = load(__webpack_require__(0));
                var algorithm03 = load(__webpack_require__(15));
                var algorithm07 = load(__webpack_require__(26));
                var algorithm12 = load(__webpack_require__(16));
                var algorithm13 = load(__webpack_require__(8));
                var algorithm14 = load(__webpack_require__(6));
                var latex = __webpack_require__(4);
                var unequal = typed('unequal', {
                    'any, any': function (x, y) {
                        if (x === null) {
                            return y !== null;
                        }
                        if (y === null) {
                            return x !== null;
                        }
                        if (x === undefined) {
                            return y !== undefined;
                        }
                        if (y === undefined) {
                            return x !== undefined;
                        }
                        return _unequal(x, y);
                    },
                    'Matrix, Matrix': function (x, y) {
                        var c;
                        switch (x.storage()) {
                            case 'sparse':
                                switch (y.storage()) {
                                    case 'sparse':
                                        c = algorithm07(x, y, _unequal);
                                        break;
                                    default:
                                        c = algorithm03(y, x, _unequal, true);
                                        break;
                                }
                                break;
                            default:
                                switch (y.storage()) {
                                    case 'sparse':
                                        c = algorithm03(x, y, _unequal, false);
                                        break;
                                    default:
                                        c = algorithm13(x, y, _unequal);
                                        break;
                                }
                                break;
                        }
                        return c;
                    },
                    'Array, Array': function (x, y) {
                        return unequal(matrix(x), matrix(y)).valueOf();
                    },
                    'Array, Matrix': function (x, y) {
                        return unequal(matrix(x), y);
                    },
                    'Matrix, Array': function (x, y) {
                        return unequal(x, matrix(y));
                    },
                    'Matrix, any': function (x, y) {
                        var c;
                        switch (x.storage()) {
                            case 'sparse':
                                c = algorithm12(x, y, _unequal, false);
                                break;
                            default:
                                c = algorithm14(x, y, _unequal, false);
                                break;
                        }
                        return c;
                    },
                    'any, Matrix': function (x, y) {
                        var c;
                        switch (y.storage()) {
                            case 'sparse':
                                c = algorithm12(y, x, _unequal, true);
                                break;
                            default:
                                c = algorithm14(y, x, _unequal, true);
                                break;
                        }
                        return c;
                    },
                    'Array, any': function (x, y) {
                        return algorithm14(matrix(x), y, _unequal, false).valueOf();
                    },
                    'any, Array': function (x, y) {
                        return algorithm14(matrix(y), x, _unequal, true).valueOf();
                    }
                });
                var _unequal = typed('_unequal', {
                    'boolean, boolean': function (x, y) {
                        return x !== y;
                    },
                    'number, number': function (x, y) {
                        return !nearlyEqual(x, y, config.epsilon);
                    },
                    'BigNumber, BigNumber': function (x, y) {
                        return !bigNearlyEqual(x, y, config.epsilon);
                    },
                    'Fraction, Fraction': function (x, y) {
                        return !x.equals(y);
                    },
                    'Complex, Complex': function (x, y) {
                        return !x.equals(y);
                    },
                    'Unit, Unit': function (x, y) {
                        if (!x.equalBase(y)) {
                            throw new Error('Cannot compare units with different base');
                        }
                        return unequal(x.value, y.value);
                    },
                    'string, string': function (x, y) {
                        return x !== y;
                    }
                });
                unequal.toTex = {
                    2: '\\left(${args[0]}' + latex.operators['unequal'] + '${args[1]}\\right)'
                };
                return unequal;
            }
            exports.name = 'unequal';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var number = __webpack_require__(3);
            var deepMap = __webpack_require__(1);
            function factory(type, config, load, typed) {
                var sign = typed('sign', {
                    'number': number.sign,
                    'Complex': function (x) {
                        return x.sign();
                    },
                    'BigNumber': function (x) {
                        return new type.BigNumber(x.cmp(0));
                    },
                    'Fraction': function (x) {
                        return new type.Fraction(x.s, 1);
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, sign, true);
                    },
                    'Unit': function (x) {
                        return sign(x.value);
                    }
                });
                sign.toTex = { 1: '\\mathrm{${name}}\\left(${args[0]}\\right)' };
                return sign;
            }
            exports.name = 'sign';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            function factory(type, config, load, typed) {
                var conj = typed('conj', {
                    'number': function (x) {
                        return x;
                    },
                    'BigNumber': function (x) {
                        return x;
                    },
                    'Complex': function (x) {
                        return x.conjugate();
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, conj);
                    }
                });
                conj.toTex = { 1: '\\left(${args[0]}\\right)^*' };
                return conj;
            }
            exports.name = 'conj';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var util = __webpack_require__(25);
            var object = util.object;
            function factory(type, config, load, typed) {
                var matrix = load(__webpack_require__(0));
                var abs = load(__webpack_require__(29));
                var addScalar = load(__webpack_require__(20));
                var divideScalar = load(__webpack_require__(19));
                var multiplyScalar = load(__webpack_require__(23));
                var subtract = load(__webpack_require__(21));
                var larger = load(__webpack_require__(34));
                var equalScalar = load(__webpack_require__(11));
                var unaryMinus = load(__webpack_require__(37));
                var SparseMatrix = type.SparseMatrix;
                var DenseMatrix = type.DenseMatrix;
                var Spa = type.Spa;
                var lup = typed('lup', {
                    'DenseMatrix': function (m) {
                        return _denseLUP(m);
                    },
                    'SparseMatrix': function (m) {
                        return _sparseLUP(m);
                    },
                    'Array': function (a) {
                        var m = matrix(a);
                        var r = _denseLUP(m);
                        return {
                            L: r.L.valueOf(),
                            U: r.U.valueOf(),
                            p: r.p
                        };
                    }
                });
                var _denseLUP = function (m) {
                    var rows = m._size[0];
                    var columns = m._size[1];
                    var n = Math.min(rows, columns);
                    var data = object.clone(m._data);
                    var ldata = [];
                    var lsize = [rows, n];
                    var udata = [];
                    var usize = [n, columns];
                    var i, j, k;
                    var p = [];
                    for (i = 0; i < rows; i++)
                        p[i] = i;
                    for (j = 0; j < columns; j++) {
                        if (j > 0) {
                            for (i = 0; i < rows; i++) {
                                var min = Math.min(i, j);
                                var s = 0;
                                for (k = 0; k < min; k++) {
                                    s = addScalar(s, multiplyScalar(data[i][k], data[k][j]));
                                }
                                data[i][j] = subtract(data[i][j], s);
                            }
                        }
                        var pi = j;
                        var pabsv = 0;
                        var vjj = 0;
                        for (i = j; i < rows; i++) {
                            var v = data[i][j];
                            var absv = abs(v);
                            if (larger(absv, pabsv)) {
                                pi = i;
                                pabsv = absv;
                                vjj = v;
                            }
                        }
                        if (j !== pi) {
                            p[j] = [p[pi], p[pi] = p[j]][0];
                            DenseMatrix._swapRows(j, pi, data);
                        }
                        if (j < rows) {
                            for (i = j + 1; i < rows; i++) {
                                var vij = data[i][j];
                                if (!equalScalar(vij, 0)) {
                                    data[i][j] = divideScalar(data[i][j], vjj);
                                }
                            }
                        }
                    }
                    for (j = 0; j < columns; j++) {
                        for (i = 0; i < rows; i++) {
                            if (j === 0) {
                                if (i < columns) {
                                    udata[i] = [];
                                }
                                ldata[i] = [];
                            }
                            if (i < j) {
                                if (i < columns) {
                                    udata[i][j] = data[i][j];
                                }
                                if (j < rows) {
                                    ldata[i][j] = 0;
                                }
                                continue;
                            }
                            if (i === j) {
                                if (i < columns) {
                                    udata[i][j] = data[i][j];
                                }
                                if (j < rows) {
                                    ldata[i][j] = 1;
                                }
                                continue;
                            }
                            if (i < columns) {
                                udata[i][j] = 0;
                            }
                            if (j < rows) {
                                ldata[i][j] = data[i][j];
                            }
                        }
                    }
                    var l = new DenseMatrix({
                        data: ldata,
                        size: lsize
                    });
                    var u = new DenseMatrix({
                        data: udata,
                        size: usize
                    });
                    var pv = [];
                    for (i = 0, n = p.length; i < n; i++)
                        pv[p[i]] = i;
                    return {
                        L: l,
                        U: u,
                        p: pv,
                        toString: function () {
                            return 'L: ' + this.L.toString() + '\nU: ' + this.U.toString() + '\nP: ' + this.p;
                        }
                    };
                };
                var _sparseLUP = function (m) {
                    var rows = m._size[0];
                    var columns = m._size[1];
                    var n = Math.min(rows, columns);
                    var values = m._values;
                    var index = m._index;
                    var ptr = m._ptr;
                    var lvalues = [];
                    var lindex = [];
                    var lptr = [];
                    var lsize = [rows, n];
                    var uvalues = [];
                    var uindex = [];
                    var uptr = [];
                    var usize = [n, columns];
                    var i, j, k;
                    var pv_co = [];
                    var pv_oc = [];
                    for (i = 0; i < rows; i++) {
                        pv_co[i] = i;
                        pv_oc[i] = i;
                    }
                    var swapIndeces = function (x, y) {
                        var kx = pv_oc[x];
                        var ky = pv_oc[y];
                        pv_co[kx] = y;
                        pv_co[ky] = x;
                        pv_oc[x] = ky;
                        pv_oc[y] = kx;
                    };
                    for (j = 0; j < columns; j++) {
                        var spa = new Spa();
                        if (j < rows) {
                            lptr.push(lvalues.length);
                            lvalues.push(1);
                            lindex.push(j);
                        }
                        uptr.push(uvalues.length);
                        var k0 = ptr[j];
                        var k1 = ptr[j + 1];
                        for (k = k0; k < k1; k++) {
                            i = index[k];
                            spa.set(pv_co[i], values[k]);
                        }
                        if (j > 0) {
                            spa.forEach(0, j - 1, function (k, vkj) {
                                SparseMatrix._forEachRow(k, lvalues, lindex, lptr, function (i, vik) {
                                    if (i > k) {
                                        spa.accumulate(i, unaryMinus(multiplyScalar(vik, vkj)));
                                    }
                                });
                            });
                        }
                        var pi = j;
                        var vjj = spa.get(j);
                        var pabsv = abs(vjj);
                        spa.forEach(j + 1, rows - 1, function (x, v) {
                            var absv = abs(v);
                            if (larger(absv, pabsv)) {
                                pi = x;
                                pabsv = absv;
                                vjj = v;
                            }
                        });
                        if (j !== pi) {
                            SparseMatrix._swapRows(j, pi, lsize[1], lvalues, lindex, lptr);
                            SparseMatrix._swapRows(j, pi, usize[1], uvalues, uindex, uptr);
                            spa.swap(j, pi);
                            swapIndeces(j, pi);
                        }
                        spa.forEach(0, rows - 1, function (x, v) {
                            if (x <= j) {
                                uvalues.push(v);
                                uindex.push(x);
                            }
                            else {
                                v = divideScalar(v, vjj);
                                if (!equalScalar(v, 0)) {
                                    lvalues.push(v);
                                    lindex.push(x);
                                }
                            }
                        });
                    }
                    uptr.push(uvalues.length);
                    lptr.push(lvalues.length);
                    return {
                        L: new SparseMatrix({
                            values: lvalues,
                            index: lindex,
                            ptr: lptr,
                            size: lsize
                        }),
                        U: new SparseMatrix({
                            values: uvalues,
                            index: uindex,
                            ptr: uptr,
                            size: usize
                        }),
                        p: pv_co,
                        toString: function () {
                            return 'L: ' + this.L.toString() + '\nU: ' + this.U.toString() + '\nP: ' + this.p;
                        }
                    };
                };
                return lup;
            }
            exports.name = 'lup';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var util = __webpack_require__(25);
            var number = util.number, isInteger = number.isInteger;
            function factory(type, config, load, typed) {
                var cs_sqr = load(__webpack_require__(410));
                var cs_lu = load(__webpack_require__(418));
                var slu = typed('slu', {
                    'SparseMatrix, number, number': function (a, order, threshold) {
                        if (!isInteger(order) || order < 0 || order > 3)
                            throw new Error('Symbolic Ordering and Analysis order must be an integer number in the interval [0, 3]');
                        if (threshold < 0 || threshold > 1)
                            throw new Error('Partial pivoting threshold must be a number from 0 to 1');
                        var s = cs_sqr(order, a, false);
                        var f = cs_lu(a, s, threshold);
                        return {
                            L: f.L,
                            U: f.U,
                            p: f.pinv,
                            q: s.q,
                            toString: function () {
                                return 'L: ' + this.L.toString() + '\nU: ' + this.U.toString() + '\np: ' + this.p.toString() + (this.q ? '\nq: ' + this.q.toString() : '') + '\n';
                            }
                        };
                    }
                });
                return slu;
            }
            exports.name = 'slu';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory() {
                var cs_tdfs = function (j, k, w, head, next, post, stack) {
                    var top = 0;
                    w[stack] = j;
                    while (top >= 0) {
                        var p = w[stack + top];
                        var i = w[head + p];
                        if (i == -1) {
                            top--;
                            post[k++] = p;
                        }
                        else {
                            w[head + p] = w[next + i];
                            ++top;
                            w[stack + top] = i;
                        }
                    }
                    return k;
                };
                return cs_tdfs;
            }
            exports.name = 'cs_tdfs';
            exports.path = 'sparse';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var nearlyEqual = __webpack_require__(3).nearlyEqual;
            var bigNearlyEqual = __webpack_require__(35);
            function factory(type, config, load, typed) {
                var matrix = load(__webpack_require__(0));
                var algorithm03 = load(__webpack_require__(15));
                var algorithm07 = load(__webpack_require__(26));
                var algorithm12 = load(__webpack_require__(16));
                var algorithm13 = load(__webpack_require__(8));
                var algorithm14 = load(__webpack_require__(6));
                var latex = __webpack_require__(4);
                var largerEq = typed('largerEq', {
                    'boolean, boolean': function (x, y) {
                        return x >= y;
                    },
                    'number, number': function (x, y) {
                        return x >= y || nearlyEqual(x, y, config.epsilon);
                    },
                    'BigNumber, BigNumber': function (x, y) {
                        return x.gte(y) || bigNearlyEqual(x, y, config.epsilon);
                    },
                    'Fraction, Fraction': function (x, y) {
                        return x.compare(y) !== -1;
                    },
                    'Complex, Complex': function () {
                        throw new TypeError('No ordering relation is defined for complex numbers');
                    },
                    'Unit, Unit': function (x, y) {
                        if (!x.equalBase(y)) {
                            throw new Error('Cannot compare units with different base');
                        }
                        return largerEq(x.value, y.value);
                    },
                    'string, string': function (x, y) {
                        return x >= y;
                    },
                    'Matrix, Matrix': function (x, y) {
                        var c;
                        switch (x.storage()) {
                            case 'sparse':
                                switch (y.storage()) {
                                    case 'sparse':
                                        c = algorithm07(x, y, largerEq);
                                        break;
                                    default:
                                        c = algorithm03(y, x, largerEq, true);
                                        break;
                                }
                                break;
                            default:
                                switch (y.storage()) {
                                    case 'sparse':
                                        c = algorithm03(x, y, largerEq, false);
                                        break;
                                    default:
                                        c = algorithm13(x, y, largerEq);
                                        break;
                                }
                                break;
                        }
                        return c;
                    },
                    'Array, Array': function (x, y) {
                        return largerEq(matrix(x), matrix(y)).valueOf();
                    },
                    'Array, Matrix': function (x, y) {
                        return largerEq(matrix(x), y);
                    },
                    'Matrix, Array': function (x, y) {
                        return largerEq(x, matrix(y));
                    },
                    'Matrix, any': function (x, y) {
                        var c;
                        switch (x.storage()) {
                            case 'sparse':
                                c = algorithm12(x, y, largerEq, false);
                                break;
                            default:
                                c = algorithm14(x, y, largerEq, false);
                                break;
                        }
                        return c;
                    },
                    'any, Matrix': function (x, y) {
                        var c;
                        switch (y.storage()) {
                            case 'sparse':
                                c = algorithm12(y, x, largerEq, true);
                                break;
                            default:
                                c = algorithm14(y, x, largerEq, true);
                                break;
                        }
                        return c;
                    },
                    'Array, any': function (x, y) {
                        return algorithm14(matrix(x), y, largerEq, false).valueOf();
                    },
                    'any, Array': function (x, y) {
                        return algorithm14(matrix(y), x, largerEq, true).valueOf();
                    }
                });
                largerEq.toTex = {
                    2: '\\left(${args[0]}' + latex.operators['largerEq'] + '${args[1]}\\right)'
                };
                return largerEq;
            }
            exports.name = 'largerEq';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory() {
                var cs_marked = function (w, j) {
                    return w[j] < 0;
                };
                return cs_marked;
            }
            exports.name = 'cs_marked';
            exports.path = 'sparse';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load) {
                var cs_flip = load(__webpack_require__(83));
                var cs_mark = function (w, j) {
                    w[j] = cs_flip(w[j]);
                };
                return cs_mark;
            }
            exports.name = 'cs_mark';
            exports.path = 'sparse';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load, typed) {
                var matrix = load(__webpack_require__(0));
                var divideScalar = load(__webpack_require__(19));
                var multiplyScalar = load(__webpack_require__(23));
                var subtract = load(__webpack_require__(21));
                var equalScalar = load(__webpack_require__(11));
                var solveValidation = load(__webpack_require__(84));
                var DenseMatrix = type.DenseMatrix;
                var lsolve = typed('lsolve', {
                    'SparseMatrix, Array | Matrix': function (m, b) {
                        return _sparseForwardSubstitution(m, b);
                    },
                    'DenseMatrix, Array | Matrix': function (m, b) {
                        return _denseForwardSubstitution(m, b);
                    },
                    'Array, Array | Matrix': function (a, b) {
                        var m = matrix(a);
                        var r = _denseForwardSubstitution(m, b);
                        return r.valueOf();
                    }
                });
                var _denseForwardSubstitution = function (m, b) {
                    b = solveValidation(m, b, true);
                    var bdata = b._data;
                    var rows = m._size[0];
                    var columns = m._size[1];
                    var x = [];
                    var data = m._data;
                    for (var j = 0; j < columns; j++) {
                        var bj = bdata[j][0] || 0;
                        var xj;
                        if (!equalScalar(bj, 0)) {
                            var vjj = data[j][j];
                            if (equalScalar(vjj, 0)) {
                                throw new Error('Linear system cannot be solved since matrix is singular');
                            }
                            xj = divideScalar(bj, vjj);
                            for (var i = j + 1; i < rows; i++) {
                                bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, data[i][j]))];
                            }
                        }
                        else {
                            xj = 0;
                        }
                        x[j] = [xj];
                    }
                    return new DenseMatrix({
                        data: x,
                        size: [rows, 1]
                    });
                };
                var _sparseForwardSubstitution = function (m, b) {
                    b = solveValidation(m, b, true);
                    var bdata = b._data;
                    var rows = m._size[0];
                    var columns = m._size[1];
                    var values = m._values;
                    var index = m._index;
                    var ptr = m._ptr;
                    var i, k;
                    var x = [];
                    for (var j = 0; j < columns; j++) {
                        var bj = bdata[j][0] || 0;
                        if (!equalScalar(bj, 0)) {
                            var vjj = 0;
                            var jvalues = [];
                            var jindex = [];
                            var l = ptr[j + 1];
                            for (k = ptr[j]; k < l; k++) {
                                i = index[k];
                                if (i === j) {
                                    vjj = values[k];
                                }
                                else if (i > j) {
                                    jvalues.push(values[k]);
                                    jindex.push(i);
                                }
                            }
                            if (equalScalar(vjj, 0)) {
                                throw new Error('Linear system cannot be solved since matrix is singular');
                            }
                            var xj = divideScalar(bj, vjj);
                            for (k = 0, l = jindex.length; k < l; k++) {
                                i = jindex[k];
                                bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, jvalues[k]))];
                            }
                            x[j] = [xj];
                        }
                        else {
                            x[j] = [0];
                        }
                    }
                    return new DenseMatrix({
                        data: x,
                        size: [rows, 1]
                    });
                };
                return lsolve;
            }
            exports.name = 'lsolve';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load, typed) {
                var matrix = load(__webpack_require__(0));
                var divideScalar = load(__webpack_require__(19));
                var multiplyScalar = load(__webpack_require__(23));
                var subtract = load(__webpack_require__(21));
                var equalScalar = load(__webpack_require__(11));
                var solveValidation = load(__webpack_require__(84));
                var DenseMatrix = type.DenseMatrix;
                var usolve = typed('usolve', {
                    'SparseMatrix, Array | Matrix': function (m, b) {
                        return _sparseBackwardSubstitution(m, b);
                    },
                    'DenseMatrix, Array | Matrix': function (m, b) {
                        return _denseBackwardSubstitution(m, b);
                    },
                    'Array, Array | Matrix': function (a, b) {
                        var m = matrix(a);
                        var r = _denseBackwardSubstitution(m, b);
                        return r.valueOf();
                    }
                });
                var _denseBackwardSubstitution = function (m, b) {
                    b = solveValidation(m, b, true);
                    var bdata = b._data;
                    var rows = m._size[0];
                    var columns = m._size[1];
                    var x = [];
                    var data = m._data;
                    for (var j = columns - 1; j >= 0; j--) {
                        var bj = bdata[j][0] || 0;
                        var xj;
                        if (!equalScalar(bj, 0)) {
                            var vjj = data[j][j];
                            if (equalScalar(vjj, 0)) {
                                throw new Error('Linear system cannot be solved since matrix is singular');
                            }
                            xj = divideScalar(bj, vjj);
                            for (var i = j - 1; i >= 0; i--) {
                                bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, data[i][j]))];
                            }
                        }
                        else {
                            xj = 0;
                        }
                        x[j] = [xj];
                    }
                    return new DenseMatrix({
                        data: x,
                        size: [rows, 1]
                    });
                };
                var _sparseBackwardSubstitution = function (m, b) {
                    b = solveValidation(m, b, true);
                    var bdata = b._data;
                    var rows = m._size[0];
                    var columns = m._size[1];
                    var values = m._values;
                    var index = m._index;
                    var ptr = m._ptr;
                    var i, k;
                    var x = [];
                    for (var j = columns - 1; j >= 0; j--) {
                        var bj = bdata[j][0] || 0;
                        if (!equalScalar(bj, 0)) {
                            var vjj = 0;
                            var jvalues = [];
                            var jindex = [];
                            var f = ptr[j];
                            var l = ptr[j + 1];
                            for (k = l - 1; k >= f; k--) {
                                i = index[k];
                                if (i === j) {
                                    vjj = values[k];
                                }
                                else if (i < j) {
                                    jvalues.push(values[k]);
                                    jindex.push(i);
                                }
                            }
                            if (equalScalar(vjj, 0)) {
                                throw new Error('Linear system cannot be solved since matrix is singular');
                            }
                            var xj = divideScalar(bj, vjj);
                            for (k = 0, l = jindex.length; k < l; k++) {
                                i = jindex[k];
                                bdata[i] = [subtract(bdata[i][0], multiplyScalar(xj, jvalues[k]))];
                            }
                            x[j] = [xj];
                        }
                        else {
                            x[j] = [0];
                        }
                    }
                    return new DenseMatrix({
                        data: x,
                        size: [rows, 1]
                    });
                };
                return usolve;
            }
            exports.name = 'usolve';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load, typed) {
                var matrix = load(__webpack_require__(0));
                var divideScalar = load(__webpack_require__(19));
                var latex = __webpack_require__(4);
                var algorithm02 = load(__webpack_require__(24));
                var algorithm03 = load(__webpack_require__(15));
                var algorithm07 = load(__webpack_require__(26));
                var algorithm11 = load(__webpack_require__(17));
                var algorithm12 = load(__webpack_require__(16));
                var algorithm13 = load(__webpack_require__(8));
                var algorithm14 = load(__webpack_require__(6));
                var dotDivide = typed('dotDivide', {
                    'any, any': divideScalar,
                    'Matrix, Matrix': function (x, y) {
                        var c;
                        switch (x.storage()) {
                            case 'sparse':
                                switch (y.storage()) {
                                    case 'sparse':
                                        c = algorithm07(x, y, divideScalar, false);
                                        break;
                                    default:
                                        c = algorithm02(y, x, divideScalar, true);
                                        break;
                                }
                                break;
                            default:
                                switch (y.storage()) {
                                    case 'sparse':
                                        c = algorithm03(x, y, divideScalar, false);
                                        break;
                                    default:
                                        c = algorithm13(x, y, divideScalar);
                                        break;
                                }
                                break;
                        }
                        return c;
                    },
                    'Array, Array': function (x, y) {
                        return dotDivide(matrix(x), matrix(y)).valueOf();
                    },
                    'Array, Matrix': function (x, y) {
                        return dotDivide(matrix(x), y);
                    },
                    'Matrix, Array': function (x, y) {
                        return dotDivide(x, matrix(y));
                    },
                    'Matrix, any': function (x, y) {
                        var c;
                        switch (x.storage()) {
                            case 'sparse':
                                c = algorithm11(x, y, divideScalar, false);
                                break;
                            default:
                                c = algorithm14(x, y, divideScalar, false);
                                break;
                        }
                        return c;
                    },
                    'any, Matrix': function (x, y) {
                        var c;
                        switch (y.storage()) {
                            case 'sparse':
                                c = algorithm12(y, x, divideScalar, true);
                                break;
                            default:
                                c = algorithm14(y, x, divideScalar, true);
                                break;
                        }
                        return c;
                    },
                    'Array, any': function (x, y) {
                        return algorithm14(matrix(x), y, divideScalar, false).valueOf();
                    },
                    'any, Array': function (x, y) {
                        return algorithm14(matrix(y), x, divideScalar, true).valueOf();
                    }
                });
                dotDivide.toTex = {
                    2: '\\left(${args[0]}' + latex.operators['dotDivide'] + '${args[1]}\\right)'
                };
                return dotDivide;
            }
            exports.name = 'dotDivide';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var DimensionError = __webpack_require__(10);
            function factory(type, config, load, typed) {
                var equalScalar = load(__webpack_require__(11));
                var SparseMatrix = type.SparseMatrix;
                var algorithm09 = function (a, b, callback) {
                    var avalues = a._values;
                    var aindex = a._index;
                    var aptr = a._ptr;
                    var asize = a._size;
                    var adt = a._datatype;
                    var bvalues = b._values;
                    var bindex = b._index;
                    var bptr = b._ptr;
                    var bsize = b._size;
                    var bdt = b._datatype;
                    if (asize.length !== bsize.length)
                        throw new DimensionError(asize.length, bsize.length);
                    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
                        throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
                    var rows = asize[0];
                    var columns = asize[1];
                    var dt;
                    var eq = equalScalar;
                    var zero = 0;
                    var cf = callback;
                    if (typeof adt === 'string' && adt === bdt) {
                        dt = adt;
                        eq = typed.find(equalScalar, [dt, dt]);
                        zero = typed.convert(0, dt);
                        cf = typed.find(callback, [dt, dt]);
                    }
                    var cvalues = avalues && bvalues ? [] : undefined;
                    var cindex = [];
                    var cptr = [];
                    var c = new SparseMatrix({
                        values: cvalues,
                        index: cindex,
                        ptr: cptr,
                        size: [rows, columns],
                        datatype: dt
                    });
                    var x = cvalues ? [] : undefined;
                    var w = [];
                    var i, j, k, k0, k1;
                    for (j = 0; j < columns; j++) {
                        cptr[j] = cindex.length;
                        var mark = j + 1;
                        if (x) {
                            for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
                                i = bindex[k];
                                w[i] = mark;
                                x[i] = bvalues[k];
                            }
                        }
                        for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
                            i = aindex[k];
                            if (x) {
                                var vb = w[i] === mark ? x[i] : zero;
                                var vc = cf(avalues[k], vb);
                                if (!eq(vc, zero)) {
                                    cindex.push(i);
                                    cvalues.push(vc);
                                }
                            }
                            else {
                                cindex.push(i);
                            }
                        }
                    }
                    cptr[columns] = cindex.length;
                    return c;
                };
                return algorithm09;
            }
            exports.name = 'algorithm09';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            function factory(type, config, load, typed) {
                var divideScalar = load(__webpack_require__(19));
                var log = typed('log', {
                    'number': function (x) {
                        if (x >= 0 || config.predictable) {
                            return Math.log(x);
                        }
                        else {
                            return new type.Complex(x, 0).log();
                        }
                    },
                    'Complex': function (x) {
                        return x.log();
                    },
                    'BigNumber': function (x) {
                        if (!x.isNegative() || config.predictable) {
                            return x.ln();
                        }
                        else {
                            return new type.Complex(x.toNumber(), 0).log();
                        }
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, log);
                    },
                    'any, any': function (x, base) {
                        return divideScalar(log(x), log(base));
                    }
                });
                log.toTex = {
                    1: '\\ln\\left(${args[0]}\\right)',
                    2: '\\log_{${args[1]}}\\left(${args[0]}\\right)'
                };
                return log;
            }
            exports.name = 'log';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var clone = __webpack_require__(5).clone;
            var format = __webpack_require__(9).format;
            function factory(type, config, load, typed) {
                var matrix = load(__webpack_require__(0));
                var add = load(__webpack_require__(18));
                var trace = typed('trace', {
                    'Array': function (x) {
                        return trace(matrix(x));
                    },
                    'Matrix': function (x) {
                        var c;
                        switch (x.storage()) {
                            case 'dense':
                                c = _denseTrace(x);
                                break;
                            case 'sparse':
                                c = _sparseTrace(x);
                                break;
                        }
                        return c;
                    },
                    'any': clone
                });
                var _denseTrace = function (m) {
                    var size = m._size;
                    var data = m._data;
                    switch (size.length) {
                        case 1:
                            if (size[0] == 1) {
                                return clone(data[0]);
                            }
                            throw new RangeError('Matrix must be square (size: ' + format(size) + ')');
                        case 2:
                            var rows = size[0];
                            var cols = size[1];
                            if (rows === cols) {
                                var sum = 0;
                                for (var i = 0; i < rows; i++)
                                    sum = add(sum, data[i][i]);
                                return sum;
                            }
                            throw new RangeError('Matrix must be square (size: ' + format(size) + ')');
                        default:
                            throw new RangeError('Matrix must be two dimensional (size: ' + format(size) + ')');
                    }
                };
                var _sparseTrace = function (m) {
                    var values = m._values;
                    var index = m._index;
                    var ptr = m._ptr;
                    var size = m._size;
                    var rows = size[0];
                    var columns = size[1];
                    if (rows === columns) {
                        var sum = 0;
                        if (values.length > 0) {
                            for (var j = 0; j < columns; j++) {
                                var k0 = ptr[j];
                                var k1 = ptr[j + 1];
                                for (var k = k0; k < k1; k++) {
                                    var i = index[k];
                                    if (i === j) {
                                        sum = add(sum, values[k]);
                                        break;
                                    }
                                    if (i > j) {
                                        break;
                                    }
                                }
                            }
                        }
                        return sum;
                    }
                    throw new RangeError('Matrix must be square (size: ' + format(size) + ')');
                };
                trace.toTex = { 1: '\\mathrm{tr}\\left(${args[0]}\\right)' };
                return trace;
            }
            exports.name = 'trace';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load, typed) {
                var add = load(__webpack_require__(18));
                var subtract = load(__webpack_require__(21));
                var multiply = load(__webpack_require__(12));
                var divide = load(__webpack_require__(47));
                var pow = load(__webpack_require__(45));
                var factorial = load(__webpack_require__(69));
                var combinations = load(__webpack_require__(70));
                var isNegative = load(__webpack_require__(57));
                var isInteger = load(__webpack_require__(48));
                var larger = load(__webpack_require__(34));
                var stirlingS2 = typed('stirlingS2', {
                    'number | BigNumber, number | BigNumber': function (n, k) {
                        if (!isInteger(n) || isNegative(n) || !isInteger(k) || isNegative(k)) {
                            throw new TypeError('Non-negative integer value expected in function stirlingS2');
                        }
                        else if (larger(k, n)) {
                            throw new TypeError('k must be less than or equal to n in function stirlingS2');
                        }
                        var kFactorial = factorial(k);
                        var result = 0;
                        for (var i = 0; i <= k; i++) {
                            var negativeOne = pow(-1, subtract(k, i));
                            var kChooseI = combinations(k, i);
                            var iPower = pow(i, n);
                            result = add(result, multiply(multiply(kChooseI, iPower), negativeOne));
                        }
                        return divide(result, kFactorial);
                    }
                });
                stirlingS2.toTex = { 2: '\\mathrm{S}\\left(${args}\\right)' };
                return stirlingS2;
            }
            exports.name = 'stirlingS2';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            var isInteger = __webpack_require__(3).isInteger;
            function factory(type, config, load, typed) {
                var multiply = load(__webpack_require__(12));
                var pow = load(__webpack_require__(45));
                var gamma = typed('gamma', {
                    'number': function (n) {
                        var t, x;
                        if (isInteger(n)) {
                            if (n <= 0) {
                                return isFinite(n) ? Infinity : NaN;
                            }
                            if (n > 171) {
                                return Infinity;
                            }
                            var value = n - 2;
                            var res = n - 1;
                            while (value > 1) {
                                res *= value;
                                value--;
                            }
                            if (res == 0) {
                                res = 1;
                            }
                            return res;
                        }
                        if (n < 0.5) {
                            return Math.PI / (Math.sin(Math.PI * n) * gamma(1 - n));
                        }
                        if (n >= 171.35) {
                            return Infinity;
                        }
                        if (n > 85.0) {
                            var twoN = n * n;
                            var threeN = twoN * n;
                            var fourN = threeN * n;
                            var fiveN = fourN * n;
                            return Math.sqrt(2 * Math.PI / n) * Math.pow((n / Math.E), n) *
                                (1 + 1 / (12 * n) + 1 / (288 * twoN) - 139 / (51840 * threeN) -
                                    571 / (2488320 * fourN) + 163879 / (209018880 * fiveN) +
                                    5246819 / (75246796800 * fiveN * n));
                        }
                        --n;
                        x = p[0];
                        for (var i = 1; i < p.length; ++i) {
                            x += p[i] / (n + i);
                        }
                        t = n + g + 0.5;
                        return Math.sqrt(2 * Math.PI) * Math.pow(t, n + 0.5) * Math.exp(-t) * x;
                    },
                    'Complex': function (n) {
                        var t, x;
                        if (n.im == 0) {
                            return gamma(n.re);
                        }
                        n = new type.Complex(n.re - 1, n.im);
                        x = new type.Complex(p[0], 0);
                        for (var i = 1; i < p.length; ++i) {
                            var real = n.re + i;
                            var den = real * real + n.im * n.im;
                            if (den != 0) {
                                x.re += p[i] * real / den;
                                x.im += -(p[i] * n.im) / den;
                            }
                            else {
                                x.re = p[i] < 0
                                    ? -Infinity
                                    : Infinity;
                            }
                        }
                        t = new type.Complex(n.re + g + 0.5, n.im);
                        var twoPiSqrt = Math.sqrt(2 * Math.PI);
                        n.re += 0.5;
                        var result = pow(t, n);
                        if (result.im == 0) {
                            result.re *= twoPiSqrt;
                        }
                        else if (result.re == 0) {
                            result.im *= twoPiSqrt;
                        }
                        else {
                            result.re *= twoPiSqrt;
                            result.im *= twoPiSqrt;
                        }
                        var r = Math.exp(-t.re);
                        t.re = r * Math.cos(-t.im);
                        t.im = r * Math.sin(-t.im);
                        return multiply(multiply(result, t), x);
                    },
                    'BigNumber': function (n) {
                        if (n.isInteger()) {
                            return (n.isNegative() || n.isZero())
                                ? new type.BigNumber(Infinity)
                                : bigFactorial(n.minus(1));
                        }
                        if (!n.isFinite()) {
                            return new type.BigNumber(n.isNegative() ? NaN : Infinity);
                        }
                        throw new Error('Integer BigNumber expected');
                    },
                    'Array | Matrix': function (n) {
                        return deepMap(n, gamma);
                    }
                });
                function bigFactorial(n) {
                    if (n.isZero()) {
                        return new type.BigNumber(1);
                    }
                    var precision = config.precision + (Math.log(n.toNumber()) | 0);
                    var Big = type.BigNumber.clone({ precision: precision });
                    var res = new Big(n);
                    var value = n.toNumber() - 1;
                    while (value > 1) {
                        res = res.times(value);
                        value--;
                    }
                    return new type.BigNumber(res.toPrecision(type.BigNumber.precision));
                }
                gamma.toTex = { 1: '\\Gamma\\left(${args[0]}\\right)' };
                return gamma;
            }
            var g = 4.7421875;
            var p = [
                0.99999999999999709182,
                57.156235665862923517,
                -59.597960355475491248,
                14.136097974741747174,
                -0.49191381609762019978,
                0.33994649984811888699e-4,
                0.46523628927048575665e-4,
                -0.98374475304879564677e-4,
                0.15808870322491248884e-3,
                -0.21026444172410488319e-3,
                0.21743961811521264320e-3,
                -0.16431810653676389022e-3,
                0.84418223983852743293e-4,
                -0.26190838401581408670e-4,
                0.36899182659531622704e-5
            ];
            exports.name = 'gamma';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            function factory(type, config, load, typed) {
                var latex = __webpack_require__(4);
                var not = typed('not', {
                    'number': function (x) {
                        return !x;
                    },
                    'Complex': function (x) {
                        return x.re === 0 && x.im === 0;
                    },
                    'BigNumber': function (x) {
                        return x.isZero() || x.isNaN();
                    },
                    'Unit': function (x) {
                        return not(x.value);
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, not);
                    }
                });
                not.toTex = {
                    1: latex.operators['not'] + '\\left(${args[0]}\\right)'
                };
                return not;
            }
            exports.name = 'not';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var maxArgumentCount = __webpack_require__(32).maxArgumentCount;
            function factory(type, config, load, typed) {
                var map = typed('map', {
                    'Array, function': _map,
                    'Matrix, function': function (x, callback) {
                        return x.map(callback);
                    }
                });
                map.toTex = undefined;
                return map;
            }
            function _map(array, callback) {
                var args = maxArgumentCount(callback);
                var recurse = function (value, index) {
                    if (Array.isArray(value)) {
                        return value.map(function (child, i) {
                            return recurse(child, index.concat(i));
                        });
                    }
                    else {
                        if (args === 1) {
                            return callback(value);
                        }
                        else if (args === 2) {
                            return callback(value, index);
                        }
                        else {
                            return callback(value, index, array);
                        }
                    }
                };
                return recurse(array, []);
            }
            exports.name = 'map';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var size = __webpack_require__(2).size;
            function factory(type, config, load, typed) {
                var matrix = load(__webpack_require__(0));
                var compareAsc = load(__webpack_require__(49));
                var compareDesc = function (a, b) {
                    return -compareAsc(a, b);
                };
                var compareNatural = load(__webpack_require__(31));
                var sort = typed('sort', {
                    'Array': function (x) {
                        _arrayIsVector(x);
                        return x.sort(compareAsc);
                    },
                    'Matrix': function (x) {
                        _matrixIsVector(x);
                        return matrix(x.toArray().sort(compareAsc), x.storage());
                    },
                    'Array, function': function (x, _comparator) {
                        _arrayIsVector(x);
                        return x.sort(_comparator);
                    },
                    'Matrix, function': function (x, _comparator) {
                        _matrixIsVector(x);
                        return matrix(x.toArray().sort(_comparator), x.storage());
                    },
                    'Array, string': function (x, order) {
                        _arrayIsVector(x);
                        return x.sort(_comparator(order));
                    },
                    'Matrix, string': function (x, order) {
                        _matrixIsVector(x);
                        return matrix(x.toArray().sort(_comparator(order)), x.storage());
                    }
                });
                sort.toTex = undefined;
                function _comparator(order) {
                    if (order === 'asc') {
                        return compareAsc;
                    }
                    else if (order === 'desc') {
                        return compareDesc;
                    }
                    else if (order === 'natural') {
                        return compareNatural;
                    }
                    else {
                        throw new Error('String "asc", "desc", or "natural" expected');
                    }
                }
                function _arrayIsVector(array) {
                    if (size(array).length !== 1) {
                        throw new Error('One dimensional array expected');
                    }
                }
                function _matrixIsVector(matrix) {
                    if (matrix.size().length !== 1) {
                        throw new Error('One dimensional matrix expected');
                    }
                }
                return sort;
            }
            exports.name = 'sort';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepForEach = __webpack_require__(42);
            function factory(type, config, load, typed) {
                var add = load(__webpack_require__(20));
                var sum = typed('sum', {
                    'Array | Matrix': function (args) {
                        return _sum(args);
                    },
                    'Array | Matrix, number | BigNumber': function () {
                        throw new Error('sum(A, dim) is not yet supported');
                    },
                    '...': function (args) {
                        return _sum(args);
                    }
                });
                sum.toTex = undefined;
                return sum;
                function _sum(array) {
                    var sum = undefined;
                    deepForEach(array, function (value) {
                        sum = (sum === undefined) ? value : add(sum, value);
                    });
                    if (sum === undefined) {
                        switch (config.number) {
                            case 'number':
                                return 0;
                            case 'BigNumber':
                                return new type.BigNumber(0);
                            case 'Fraction':
                                return new type.Fraction(0);
                            default:
                                return 0;
                        }
                    }
                    return sum;
                }
            }
            exports.name = 'sum';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var flatten = __webpack_require__(2).flatten;
            var identify = __webpack_require__(2).identify;
            var generalize = __webpack_require__(2).generalize;
            function factory(type, config, load, typed) {
                var equal = load(__webpack_require__(30));
                var index = load(__webpack_require__(27));
                var matrix = load(__webpack_require__(43));
                var size = load(__webpack_require__(28));
                var subset = load(__webpack_require__(22));
                var compareNatural = load(__webpack_require__(31));
                var setDifference = typed('setDifference', {
                    'Array | Matrix, Array | Matrix': function (a1, a2) {
                        if (subset(size(a1), new index(0)) === 0) {
                            var result = [];
                        }
                        else if (subset(size(a2), new index(0)) === 0) {
                            return flatten(a1.toArray());
                        }
                        else {
                            var b1 = identify(flatten(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));
                            var b2 = identify(flatten(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));
                            var result = [];
                            var inb2;
                            for (var i = 0; i < b1.length; i++) {
                                inb2 = false;
                                for (var j = 0; j < b2.length; j++) {
                                    if (equal(b1[i].value, b2[j].value) && b1[i].identifier === b2[j].identifier) {
                                        inb2 = true;
                                        break;
                                    }
                                }
                                if (!inb2) {
                                    result.push(b1[i]);
                                }
                            }
                        }
                        if (Array.isArray(a1) && Array.isArray(a2)) {
                            return generalize(result);
                        }
                        return new matrix(generalize(result));
                    }
                });
                return setDifference;
            }
            exports.name = 'setDifference';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var flatten = __webpack_require__(2).flatten;
            var identify = __webpack_require__(2).identify;
            var generalize = __webpack_require__(2).generalize;
            function factory(type, config, load, typed) {
                var equal = load(__webpack_require__(30));
                var index = load(__webpack_require__(27));
                var matrix = load(__webpack_require__(43));
                var size = load(__webpack_require__(28));
                var subset = load(__webpack_require__(22));
                var compareNatural = load(__webpack_require__(31));
                var setIntersect = typed('setIntersect', {
                    'Array | Matrix, Array | Matrix': function (a1, a2) {
                        if (subset(size(a1), new index(0)) === 0 || subset(size(a2), new index(0)) === 0) {
                            var result = [];
                        }
                        else {
                            var b1 = identify(flatten(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));
                            var b2 = identify(flatten(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));
                            var result = [];
                            for (var i = 0; i < b1.length; i++) {
                                for (var j = 0; j < b2.length; j++) {
                                    if (equal(b1[i].value, b2[j].value) && b1[i].identifier === b2[j].identifier) {
                                        result.push(b1[i]);
                                        break;
                                    }
                                }
                            }
                        }
                        if (Array.isArray(a1) && Array.isArray(a2)) {
                            return generalize(result);
                        }
                        return new matrix(generalize(result));
                    }
                });
                return setIntersect;
            }
            exports.name = 'setIntersect';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var flatten = __webpack_require__(2).flatten;
            function factory(type, config, load, typed) {
                var index = load(__webpack_require__(27));
                var concat = load(__webpack_require__(64));
                var size = load(__webpack_require__(28));
                var sort = load(__webpack_require__(140));
                var subset = load(__webpack_require__(22));
                var setDifference = load(__webpack_require__(142));
                var setSymDifference = typed('setSymDifference', {
                    'Array | Matrix, Array | Matrix': function (a1, a2) {
                        if (subset(size(a1), new index(0)) === 0) {
                            return flatten(a2);
                        }
                        else if (subset(size(a2), new index(0)) === 0) {
                            return flatten(a1);
                        }
                        var b1 = flatten(a1);
                        var b2 = flatten(a2);
                        return concat(setDifference(b1, b2), setDifference(b2, b1));
                    }
                });
                return setSymDifference;
            }
            exports.name = 'setSymDifference';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var flatten = __webpack_require__(2).flatten;
            var reduce = __webpack_require__(65);
            var containsCollections = __webpack_require__(66);
            function factory(type, config, load, typed) {
                var add = load(__webpack_require__(20));
                var divide = load(__webpack_require__(19));
                var compare = load(__webpack_require__(49));
                var partitionSelect = load(__webpack_require__(88));
                var median = typed('median', {
                    'Array | Matrix': _median,
                    'Array | Matrix, number | BigNumber': function (array, dim) {
                        throw new Error('median(A, dim) is not yet supported');
                    },
                    '...': function (args) {
                        if (containsCollections(args)) {
                            throw new TypeError('Scalar values expected in function median');
                        }
                        return _median(args);
                    }
                });
                function _median(array) {
                    array = flatten(array.valueOf());
                    var num = array.length;
                    if (num == 0) {
                        throw new Error('Cannot calculate median of an empty array');
                    }
                    if (num % 2 == 0) {
                        var mid = num / 2 - 1;
                        var right = partitionSelect(array, mid + 1);
                        var left = array[mid];
                        for (var i = 0; i < mid; ++i) {
                            if (compare(array[i], left) > 0) {
                                left = array[i];
                            }
                        }
                        return middle2(left, right);
                    }
                    else {
                        var m = partitionSelect(array, (num - 1) / 2);
                        return middle(m);
                    }
                }
                var middle = typed({
                    'number | BigNumber | Complex | Unit': function (value) {
                        return value;
                    }
                });
                var middle2 = typed({
                    'number | BigNumber | Complex | Unit, number | BigNumber | Complex | Unit': function (left, right) {
                        return divide(add(left, right), 2);
                    }
                });
                median.toTex = undefined;
                return median;
            }
            exports.name = 'median';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var DEFAULT_NORMALIZATION = 'unbiased';
            var deepForEach = __webpack_require__(42);
            function factory(type, config, load, typed) {
                var add = load(__webpack_require__(20));
                var subtract = load(__webpack_require__(21));
                var multiply = load(__webpack_require__(23));
                var divide = load(__webpack_require__(19));
                var variance = typed('variance', {
                    'Array | Matrix': function (array) {
                        return _var(array, DEFAULT_NORMALIZATION);
                    },
                    'Array | Matrix, string': _var,
                    '...': function (args) {
                        return _var(args, DEFAULT_NORMALIZATION);
                    }
                });
                variance.toTex = '\\mathrm{Var}\\left(${args}\\right)';
                return variance;
                function _var(array, normalization) {
                    var sum = 0;
                    var num = 0;
                    if (array.length == 0) {
                        throw new SyntaxError('Function var requires one or more parameters (0 provided)');
                    }
                    deepForEach(array, function (value) {
                        sum = add(sum, value);
                        num++;
                    });
                    if (num === 0)
                        throw new Error('Cannot calculate var of an empty array');
                    var mean = divide(sum, num);
                    sum = 0;
                    deepForEach(array, function (value) {
                        var diff = subtract(value, mean);
                        sum = add(sum, multiply(diff, diff));
                    });
                    switch (normalization) {
                        case 'uncorrected':
                            return divide(sum, num);
                        case 'biased':
                            return divide(sum, num + 1);
                        case 'unbiased':
                            var zero = type.isBigNumber(sum) ? new type.BigNumber(0) : 0;
                            return (num == 1) ? zero : divide(sum, num - 1);
                        default:
                            throw new Error('Unknown normalization "' + normalization + '". ' +
                                'Choose "unbiased" (default), "uncorrected", or "biased".');
                    }
                }
            }
            exports.name = 'var';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            function factory(type, config, load, typed) {
                var acosh = typed('acosh', {
                    'number': function (x) {
                        if (x >= 1 || config.predictable) {
                            return _acosh(x);
                        }
                        if (x <= -1) {
                            return new type.Complex(Math.log(Math.sqrt(x * x - 1) - x), Math.PI);
                        }
                        return new type.Complex(x, 0).acosh();
                    },
                    'Complex': function (x) {
                        return x.acosh();
                    },
                    'BigNumber': function (x) {
                        return x.acosh();
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, acosh);
                    }
                });
                acosh.toTex = { 1: '\\cosh^{-1}\\left(${args[0]}\\right)' };
                return acosh;
            }
            var _acosh = Math.acosh || function (x) {
                return Math.log(Math.sqrt(x * x - 1) + x);
            };
            exports.name = 'acosh';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            var core = __webpack_require__(149);
            function create(config) {
                var math = core.create(config);
                math.create = create;
                math['import'](__webpack_require__(156));
                return math;
            }
            module.exports = create();
        }),
        (function (module, exports, __webpack_require__) {
            module.exports = __webpack_require__(150);
        }),
        (function (module, exports, __webpack_require__) {
            var isFactory = __webpack_require__(5).isFactory;
            var typedFactory = __webpack_require__(151);
            var emitter = __webpack_require__(90);
            var importFactory = __webpack_require__(154);
            var configFactory = __webpack_require__(155);
            exports.create = function create(options) {
                if (typeof Object.create !== 'function') {
                    throw new Error('ES5 not supported by this JavaScript engine. ' +
                        'Please load the es5-shim and es5-sham library for compatibility.');
                }
                var factories = [];
                var instances = [];
                var math = emitter.mixin({});
                math.type = {};
                math.expression = {
                    transform: {},
                    mathWithTransform: {}
                };
                math.typed = typedFactory.create(math.type);
                var _config = {
                    epsilon: 1e-12,
                    matrix: 'Matrix',
                    number: 'number',
                    precision: 64,
                    predictable: false,
                    randomSeed: null
                };
                function load(factory) {
                    if (!isFactory(factory)) {
                        throw new Error('Factory object with properties `type`, `name`, and `factory` expected');
                    }
                    var index = factories.indexOf(factory);
                    var instance;
                    if (index === -1) {
                        if (factory.math === true) {
                            instance = factory.factory(math.type, _config, load, math.typed, math);
                        }
                        else {
                            instance = factory.factory(math.type, _config, load, math.typed);
                        }
                        factories.push(factory);
                        instances.push(instance);
                    }
                    else {
                        instance = instances[index];
                    }
                    return instance;
                }
                math['import'] = load(importFactory);
                math['config'] = load(configFactory);
                math.expression.mathWithTransform['config'] = math['config'];
                if (options) {
                    math.config(options);
                }
                return math;
            };
        }),
        (function (module, exports, __webpack_require__) {
            var typedFunction = __webpack_require__(152);
            var digits = __webpack_require__(3).digits;
            var isBigNumber = __webpack_require__(71);
            var isMatrix = __webpack_require__(58);
            var createTyped = function () {
                createTyped = typedFunction.create;
                return typedFunction;
            };
            exports.create = function create(type) {
                type.isNumber = function (x) { return typeof x === 'number'; };
                type.isComplex = function (x) { return type.Complex && x instanceof type.Complex || false; };
                type.isBigNumber = isBigNumber;
                type.isFraction = function (x) { return type.Fraction && x instanceof type.Fraction || false; };
                type.isUnit = function (x) { return x && x.constructor.prototype.isUnit || false; };
                type.isString = function (x) { return typeof x === 'string'; };
                type.isArray = Array.isArray;
                type.isMatrix = isMatrix;
                type.isDenseMatrix = function (x) { return x && x.isDenseMatrix && x.constructor.prototype.isMatrix || false; };
                type.isSparseMatrix = function (x) { return x && x.isSparseMatrix && x.constructor.prototype.isMatrix || false; };
                type.isRange = function (x) { return x && x.constructor.prototype.isRange || false; };
                type.isIndex = function (x) { return x && x.constructor.prototype.isIndex || false; };
                type.isBoolean = function (x) { return typeof x === 'boolean'; };
                type.isResultSet = function (x) { return x && x.constructor.prototype.isResultSet || false; };
                type.isHelp = function (x) { return x && x.constructor.prototype.isHelp || false; };
                type.isFunction = function (x) { return typeof x === 'function'; };
                type.isDate = function (x) { return x instanceof Date; };
                type.isRegExp = function (x) { return x instanceof RegExp; };
                type.isObject = function (x) { return typeof x === 'object'; };
                type.isNull = function (x) { return x === null; };
                type.isUndefined = function (x) { return x === undefined; };
                type.isAccessorNode = function (x) { return x && x.isAccessorNode && x.constructor.prototype.isNode || false; };
                type.isArrayNode = function (x) { return x && x.isArrayNode && x.constructor.prototype.isNode || false; };
                type.isAssignmentNode = function (x) { return x && x.isAssignmentNode && x.constructor.prototype.isNode || false; };
                type.isBlockNode = function (x) { return x && x.isBlockNode && x.constructor.prototype.isNode || false; };
                type.isConditionalNode = function (x) { return x && x.isConditionalNode && x.constructor.prototype.isNode || false; };
                type.isConstantNode = function (x) { return x && x.isConstantNode && x.constructor.prototype.isNode || false; };
                type.isFunctionAssignmentNode = function (x) { return x && x.isFunctionAssignmentNode && x.constructor.prototype.isNode || false; };
                type.isFunctionNode = function (x) { return x && x.isFunctionNode && x.constructor.prototype.isNode || false; };
                type.isIndexNode = function (x) { return x && x.isIndexNode && x.constructor.prototype.isNode || false; };
                type.isNode = function (x) { return x && x.isNode && x.constructor.prototype.isNode || false; };
                type.isObjectNode = function (x) { return x && x.isObjectNode && x.constructor.prototype.isNode || false; };
                type.isOperatorNode = function (x) { return x && x.isOperatorNode && x.constructor.prototype.isNode || false; };
                type.isParenthesisNode = function (x) { return x && x.isParenthesisNode && x.constructor.prototype.isNode || false; };
                type.isRangeNode = function (x) { return x && x.isRangeNode && x.constructor.prototype.isNode || false; };
                type.isSymbolNode = function (x) { return x && x.isSymbolNode && x.constructor.prototype.isNode || false; };
                type.isChain = function (x) { return x && x.constructor.prototype.isChain || false; };
                var typed = createTyped();
                typed.types = [
                    { name: 'number', test: type.isNumber },
                    { name: 'Complex', test: type.isComplex },
                    { name: 'BigNumber', test: type.isBigNumber },
                    { name: 'Fraction', test: type.isFraction },
                    { name: 'Unit', test: type.isUnit },
                    { name: 'string', test: type.isString },
                    { name: 'Array', test: type.isArray },
                    { name: 'Matrix', test: type.isMatrix },
                    { name: 'DenseMatrix', test: type.isDenseMatrix },
                    { name: 'SparseMatrix', test: type.isSparseMatrix },
                    { name: 'Range', test: type.isRange },
                    { name: 'Index', test: type.isIndex },
                    { name: 'boolean', test: type.isBoolean },
                    { name: 'ResultSet', test: type.isResultSet },
                    { name: 'Help', test: type.isHelp },
                    { name: 'function', test: type.isFunction },
                    { name: 'Date', test: type.isDate },
                    { name: 'RegExp', test: type.isRegExp },
                    { name: 'Object', test: type.isObject },
                    { name: 'null', test: type.isNull },
                    { name: 'undefined', test: type.isUndefined },
                    { name: 'OperatorNode', test: type.isOperatorNode },
                    { name: 'ConstantNode', test: type.isConstantNode },
                    { name: 'SymbolNode', test: type.isSymbolNode },
                    { name: 'ParenthesisNode', test: type.isParenthesisNode },
                    { name: 'FunctionNode', test: type.isFunctionNode },
                    { name: 'FunctionAssignmentNode', test: type.isFunctionAssignmentNode },
                    { name: 'ArrayNode', test: type.isArrayNode },
                    { name: 'AssignmentNode', test: type.isAssignmentNode },
                    { name: 'BlockNode', test: type.isBlockNode },
                    { name: 'ConditionalNode', test: type.isConditionalNode },
                    { name: 'IndexNode', test: type.isIndexNode },
                    { name: 'RangeNode', test: type.isRangeNode },
                    { name: 'Node', test: type.isNode }
                ];
                typed.conversions = [
                    {
                        from: 'number',
                        to: 'BigNumber',
                        convert: function (x) {
                            if (digits(x) > 15) {
                                throw new TypeError('Cannot implicitly convert a number with >15 significant digits to BigNumber ' +
                                    '(value: ' + x + '). ' +
                                    'Use function bignumber(x) to convert to BigNumber.');
                            }
                            return new type.BigNumber(x);
                        }
                    }, {
                        from: 'number',
                        to: 'Complex',
                        convert: function (x) {
                            return new type.Complex(x, 0);
                        }
                    }, {
                        from: 'number',
                        to: 'string',
                        convert: function (x) {
                            return x + '';
                        }
                    }, {
                        from: 'BigNumber',
                        to: 'Complex',
                        convert: function (x) {
                            return new type.Complex(x.toNumber(), 0);
                        }
                    }, {
                        from: 'Fraction',
                        to: 'BigNumber',
                        convert: function (x) {
                            throw new TypeError('Cannot implicitly convert a Fraction to BigNumber or vice versa. ' +
                                'Use function bignumber(x) to convert to BigNumber or fraction(x) to convert to Fraction.');
                        }
                    }, {
                        from: 'Fraction',
                        to: 'Complex',
                        convert: function (x) {
                            return new type.Complex(x.valueOf(), 0);
                        }
                    }, {
                        from: 'number',
                        to: 'Fraction',
                        convert: function (x) {
                            var f = new type.Fraction(x);
                            if (f.valueOf() !== x) {
                                throw new TypeError('Cannot implicitly convert a number to a Fraction when there will be a loss of precision ' +
                                    '(value: ' + x + '). ' +
                                    'Use function fraction(x) to convert to Fraction.');
                            }
                            return new type.Fraction(x);
                        }
                    }, {
                        from: 'string',
                        to: 'number',
                        convert: function (x) {
                            var n = Number(x);
                            if (isNaN(n)) {
                                throw new Error('Cannot convert "' + x + '" to a number');
                            }
                            return n;
                        }
                    }, {
                        from: 'string',
                        to: 'BigNumber',
                        convert: function (x) {
                            try {
                                return new type.BigNumber(x);
                            }
                            catch (err) {
                                throw new Error('Cannot convert "' + x + '" to BigNumber');
                            }
                        }
                    }, {
                        from: 'string',
                        to: 'Fraction',
                        convert: function (x) {
                            try {
                                return new type.Fraction(x);
                            }
                            catch (err) {
                                throw new Error('Cannot convert "' + x + '" to Fraction');
                            }
                        }
                    }, {
                        from: 'string',
                        to: 'Complex',
                        convert: function (x) {
                            try {
                                return new type.Complex(x);
                            }
                            catch (err) {
                                throw new Error('Cannot convert "' + x + '" to Complex');
                            }
                        }
                    }, {
                        from: 'boolean',
                        to: 'number',
                        convert: function (x) {
                            return +x;
                        }
                    }, {
                        from: 'boolean',
                        to: 'BigNumber',
                        convert: function (x) {
                            return new type.BigNumber(+x);
                        }
                    }, {
                        from: 'boolean',
                        to: 'Fraction',
                        convert: function (x) {
                            return new type.Fraction(+x);
                        }
                    }, {
                        from: 'boolean',
                        to: 'string',
                        convert: function (x) {
                            return +x;
                        }
                    }, {
                        from: 'null',
                        to: 'number',
                        convert: function () {
                            return 0;
                        }
                    }, {
                        from: 'null',
                        to: 'string',
                        convert: function () {
                            return 'null';
                        }
                    }, {
                        from: 'null',
                        to: 'BigNumber',
                        convert: function () {
                            return new type.BigNumber(0);
                        }
                    }, {
                        from: 'null',
                        to: 'Fraction',
                        convert: function () {
                            return new type.Fraction(0);
                        }
                    }, {
                        from: 'Array',
                        to: 'Matrix',
                        convert: function (array) {
                            return new type.DenseMatrix(array);
                        }
                    }, {
                        from: 'Matrix',
                        to: 'Array',
                        convert: function (matrix) {
                            return matrix.valueOf();
                        }
                    }
                ];
                return typed;
            };
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
            (function (root, factory) {
                if (true) {
                    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
                        __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
                            (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
                        __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
                }
                else if (typeof exports === 'object') {
                    module.exports = factory();
                }
                else {
                    root.typed = factory();
                }
            }(this, function () {
                function create() {
                    function getTypeTest(name) {
                        var test;
                        for (var i = 0; i < typed.types.length; i++) {
                            var entry = typed.types[i];
                            if (entry.name === name) {
                                test = entry.test;
                                break;
                            }
                        }
                        if (!test) {
                            var hint;
                            for (i = 0; i < typed.types.length; i++) {
                                entry = typed.types[i];
                                if (entry.name.toLowerCase() == name.toLowerCase()) {
                                    hint = entry.name;
                                    break;
                                }
                            }
                            throw new Error('Unknown type "' + name + '"' +
                                (hint ? ('. Did you mean "' + hint + '"?') : ''));
                        }
                        return test;
                    }
                    function getName(fns) {
                        var name = '';
                        for (var i = 0; i < fns.length; i++) {
                            var fn = fns[i];
                            if (fn.signatures && fn.name != '') {
                                if (name == '') {
                                    name = fn.name;
                                }
                                else if (name != fn.name) {
                                    var err = new Error('Function names do not match (expected: ' + name + ', actual: ' + fn.name + ')');
                                    err.data = {
                                        actual: fn.name,
                                        expected: name
                                    };
                                    throw err;
                                }
                            }
                        }
                        return name;
                    }
                    function createError(fn, argCount, index, actual, expected) {
                        var actualType = getTypeOf(actual);
                        var _expected = expected ? expected.split(',') : null;
                        var _fn = (fn || 'unnamed');
                        var anyType = _expected && contains(_expected, 'any');
                        var message;
                        var data = {
                            fn: fn,
                            index: index,
                            actual: actual,
                            expected: _expected
                        };
                        if (_expected) {
                            if (argCount > index && !anyType) {
                                message = 'Unexpected type of argument in function ' + _fn +
                                    ' (expected: ' + _expected.join(' or ') + ', actual: ' + actualType + ', index: ' + index + ')';
                            }
                            else {
                                message = 'Too few arguments in function ' + _fn +
                                    ' (expected: ' + _expected.join(' or ') + ', index: ' + index + ')';
                            }
                        }
                        else {
                            message = 'Too many arguments in function ' + _fn +
                                ' (expected: ' + index + ', actual: ' + argCount + ')';
                        }
                        var err = new TypeError(message);
                        err.data = data;
                        return err;
                    }
                    function Refs(name) {
                        this.name = name || 'refs';
                        this.categories = {};
                    }
                    Refs.prototype.add = function (fn, category) {
                        var cat = category || 'fn';
                        if (!this.categories[cat])
                            this.categories[cat] = [];
                        var index = this.categories[cat].indexOf(fn);
                        if (index == -1) {
                            index = this.categories[cat].length;
                            this.categories[cat].push(fn);
                        }
                        return cat + index;
                    };
                    Refs.prototype.toCode = function () {
                        var code = [];
                        var path = this.name + '.categories';
                        var categories = this.categories;
                        for (var cat in categories) {
                            if (categories.hasOwnProperty(cat)) {
                                var category = categories[cat];
                                for (var i = 0; i < category.length; i++) {
                                    code.push('var ' + cat + i + ' = ' + path + '[\'' + cat + '\'][' + i + '];');
                                }
                            }
                        }
                        return code.join('\n');
                    };
                    function Param(types, varArgs) {
                        if (typeof types === 'string') {
                            var _types = types.trim();
                            var _varArgs = _types.substr(0, 3) === '...';
                            if (_varArgs) {
                                _types = _types.substr(3);
                            }
                            if (_types === '') {
                                this.types = ['any'];
                            }
                            else {
                                this.types = _types.split('|');
                                for (var i = 0; i < this.types.length; i++) {
                                    this.types[i] = this.types[i].trim();
                                }
                            }
                        }
                        else if (Array.isArray(types)) {
                            this.types = types;
                        }
                        else if (types instanceof Param) {
                            return types.clone();
                        }
                        else {
                            throw new Error('String or Array expected');
                        }
                        this.conversions = [];
                        this.varArgs = _varArgs || varArgs || false;
                        this.anyType = this.types.indexOf('any') !== -1;
                    }
                    Param.compare = function (a, b) {
                        if (a.anyType)
                            return 1;
                        if (b.anyType)
                            return -1;
                        if (contains(a.types, 'Object'))
                            return 1;
                        if (contains(b.types, 'Object'))
                            return -1;
                        if (a.hasConversions()) {
                            if (b.hasConversions()) {
                                var i, ac, bc;
                                for (i = 0; i < a.conversions.length; i++) {
                                    if (a.conversions[i] !== undefined) {
                                        ac = a.conversions[i];
                                        break;
                                    }
                                }
                                for (i = 0; i < b.conversions.length; i++) {
                                    if (b.conversions[i] !== undefined) {
                                        bc = b.conversions[i];
                                        break;
                                    }
                                }
                                return typed.conversions.indexOf(ac) - typed.conversions.indexOf(bc);
                            }
                            else {
                                return 1;
                            }
                        }
                        else {
                            if (b.hasConversions()) {
                                return -1;
                            }
                            else {
                                var ai, bi;
                                for (i = 0; i < typed.types.length; i++) {
                                    if (typed.types[i].name === a.types[0]) {
                                        ai = i;
                                        break;
                                    }
                                }
                                for (i = 0; i < typed.types.length; i++) {
                                    if (typed.types[i].name === b.types[0]) {
                                        bi = i;
                                        break;
                                    }
                                }
                                return ai - bi;
                            }
                        }
                    };
                    Param.prototype.overlapping = function (other) {
                        for (var i = 0; i < this.types.length; i++) {
                            if (contains(other.types, this.types[i])) {
                                return true;
                            }
                        }
                        return false;
                    };
                    Param.prototype.matches = function (other) {
                        return this.anyType || other.anyType || this.overlapping(other);
                    };
                    Param.prototype.clone = function () {
                        var param = new Param(this.types.slice(), this.varArgs);
                        param.conversions = this.conversions.slice();
                        return param;
                    };
                    Param.prototype.hasConversions = function () {
                        return this.conversions.length > 0;
                    };
                    Param.prototype.contains = function (types) {
                        for (var i = 0; i < this.types.length; i++) {
                            if (types[this.types[i]]) {
                                return true;
                            }
                        }
                        return false;
                    };
                    Param.prototype.toString = function (toConversion) {
                        var types = [];
                        var keys = {};
                        for (var i = 0; i < this.types.length; i++) {
                            var conversion = this.conversions[i];
                            var type = toConversion && conversion ? conversion.to : this.types[i];
                            if (!(type in keys)) {
                                keys[type] = true;
                                types.push(type);
                            }
                        }
                        return (this.varArgs ? '...' : '') + types.join('|');
                    };
                    function Signature(params, fn) {
                        var _params;
                        if (typeof params === 'string') {
                            _params = (params !== '') ? params.split(',') : [];
                        }
                        else if (Array.isArray(params)) {
                            _params = params;
                        }
                        else {
                            throw new Error('string or Array expected');
                        }
                        this.params = new Array(_params.length);
                        this.anyType = false;
                        this.varArgs = false;
                        for (var i = 0; i < _params.length; i++) {
                            var param = new Param(_params[i]);
                            this.params[i] = param;
                            if (param.anyType) {
                                this.anyType = true;
                            }
                            if (i === _params.length - 1) {
                                this.varArgs = param.varArgs;
                            }
                            else {
                                if (param.varArgs) {
                                    throw new SyntaxError('Unexpected variable arguments operator "..."');
                                }
                            }
                        }
                        this.fn = fn;
                    }
                    Signature.prototype.clone = function () {
                        return new Signature(this.params.slice(), this.fn);
                    };
                    Signature.prototype.expand = function () {
                        var signatures = [];
                        function recurse(signature, path) {
                            if (path.length < signature.params.length) {
                                var i, newParam, conversion;
                                var param = signature.params[path.length];
                                if (param.varArgs) {
                                    newParam = param.clone();
                                    for (i = 0; i < typed.conversions.length; i++) {
                                        conversion = typed.conversions[i];
                                        if (!contains(param.types, conversion.from) && contains(param.types, conversion.to)) {
                                            var j = newParam.types.length;
                                            newParam.types[j] = conversion.from;
                                            newParam.conversions[j] = conversion;
                                        }
                                    }
                                    recurse(signature, path.concat(newParam));
                                }
                                else {
                                    for (i = 0; i < param.types.length; i++) {
                                        recurse(signature, path.concat(new Param(param.types[i])));
                                    }
                                    for (i = 0; i < typed.conversions.length; i++) {
                                        conversion = typed.conversions[i];
                                        if (!contains(param.types, conversion.from) && contains(param.types, conversion.to)) {
                                            newParam = new Param(conversion.from);
                                            newParam.conversions[0] = conversion;
                                            recurse(signature, path.concat(newParam));
                                        }
                                    }
                                }
                            }
                            else {
                                signatures.push(new Signature(path, signature.fn));
                            }
                        }
                        recurse(this, []);
                        return signatures;
                    };
                    Signature.compare = function (a, b) {
                        if (a.params.length > b.params.length)
                            return 1;
                        if (a.params.length < b.params.length)
                            return -1;
                        var i;
                        var len = a.params.length;
                        var ac = 0;
                        var bc = 0;
                        for (i = 0; i < len; i++) {
                            if (a.params[i].hasConversions())
                                ac++;
                            if (b.params[i].hasConversions())
                                bc++;
                        }
                        if (ac > bc)
                            return 1;
                        if (ac < bc)
                            return -1;
                        for (i = 0; i < a.params.length; i++) {
                            var cmp = Param.compare(a.params[i], b.params[i]);
                            if (cmp !== 0) {
                                return cmp;
                            }
                        }
                        return 0;
                    };
                    Signature.prototype.hasConversions = function () {
                        for (var i = 0; i < this.params.length; i++) {
                            if (this.params[i].hasConversions()) {
                                return true;
                            }
                        }
                        return false;
                    };
                    Signature.prototype.ignore = function () {
                        var types = {};
                        for (var i = 0; i < typed.ignore.length; i++) {
                            types[typed.ignore[i]] = true;
                        }
                        for (i = 0; i < this.params.length; i++) {
                            if (this.params[i].contains(types)) {
                                return true;
                            }
                        }
                        return false;
                    };
                    Signature.prototype.paramsStartWith = function (params) {
                        if (params.length === 0) {
                            return true;
                        }
                        var aLast = last(this.params);
                        var bLast = last(params);
                        for (var i = 0; i < params.length; i++) {
                            var a = this.params[i] || (aLast.varArgs ? aLast : null);
                            var b = params[i] || (bLast.varArgs ? bLast : null);
                            if (!a || !b || !a.matches(b)) {
                                return false;
                            }
                        }
                        return true;
                    };
                    Signature.prototype.toCode = function (refs, prefix) {
                        var code = [];
                        var args = new Array(this.params.length);
                        for (var i = 0; i < this.params.length; i++) {
                            var param = this.params[i];
                            var conversion = param.conversions[0];
                            if (param.varArgs) {
                                args[i] = 'varArgs';
                            }
                            else if (conversion) {
                                args[i] = refs.add(conversion.convert, 'convert') + '(arg' + i + ')';
                            }
                            else {
                                args[i] = 'arg' + i;
                            }
                        }
                        var ref = this.fn ? refs.add(this.fn, 'signature') : undefined;
                        if (ref) {
                            return prefix + 'return ' + ref + '(' + args.join(', ') + '); // signature: ' + this.params.join(', ');
                        }
                        return code.join('\n');
                    };
                    Signature.prototype.toString = function () {
                        return this.params.join(', ');
                    };
                    function Node(path, signature, childs, fallThrough) {
                        this.path = path || [];
                        this.param = path[path.length - 1] || null;
                        this.signature = signature || null;
                        this.childs = childs || [];
                        this.fallThrough = fallThrough || false;
                    }
                    Node.prototype.toCode = function (refs, prefix) {
                        var code = [];
                        if (this.param) {
                            var index = this.path.length - 1;
                            var conversion = this.param.conversions[0];
                            var comment = '// type: ' + (conversion ?
                                (conversion.from + ' (convert to ' + conversion.to + ')') :
                                this.param);
                            if (this.param.varArgs) {
                                if (this.param.anyType) {
                                    code.push(prefix + 'if (arguments.length > ' + index + ') {');
                                    code.push(prefix + '  var varArgs = [];');
                                    code.push(prefix + '  for (var i = ' + index + '; i < arguments.length; i++) {');
                                    code.push(prefix + '    varArgs.push(arguments[i]);');
                                    code.push(prefix + '  }');
                                    code.push(this.signature.toCode(refs, prefix + '  '));
                                    code.push(prefix + '}');
                                }
                                else {
                                    var getTests = function (types, arg) {
                                        var tests = [];
                                        for (var i = 0; i < types.length; i++) {
                                            tests[i] = refs.add(getTypeTest(types[i]), 'test') + '(' + arg + ')';
                                        }
                                        return tests.join(' || ');
                                    }.bind(this);
                                    var allTypes = this.param.types;
                                    var exactTypes = [];
                                    for (var i = 0; i < allTypes.length; i++) {
                                        if (this.param.conversions[i] === undefined) {
                                            exactTypes.push(allTypes[i]);
                                        }
                                    }
                                    code.push(prefix + 'if (' + getTests(allTypes, 'arg' + index) + ') { ' + comment);
                                    code.push(prefix + '  var varArgs = [arg' + index + '];');
                                    code.push(prefix + '  for (var i = ' + (index + 1) + '; i < arguments.length; i++) {');
                                    code.push(prefix + '    if (' + getTests(exactTypes, 'arguments[i]') + ') {');
                                    code.push(prefix + '      varArgs.push(arguments[i]);');
                                    for (var i = 0; i < allTypes.length; i++) {
                                        var conversion_i = this.param.conversions[i];
                                        if (conversion_i) {
                                            var test = refs.add(getTypeTest(allTypes[i]), 'test');
                                            var convert = refs.add(conversion_i.convert, 'convert');
                                            code.push(prefix + '    }');
                                            code.push(prefix + '    else if (' + test + '(arguments[i])) {');
                                            code.push(prefix + '      varArgs.push(' + convert + '(arguments[i]));');
                                        }
                                    }
                                    code.push(prefix + '    } else {');
                                    code.push(prefix + '      throw createError(name, arguments.length, i, arguments[i], \'' + exactTypes.join(',') + '\');');
                                    code.push(prefix + '    }');
                                    code.push(prefix + '  }');
                                    code.push(this.signature.toCode(refs, prefix + '  '));
                                    code.push(prefix + '}');
                                }
                            }
                            else {
                                if (this.param.anyType) {
                                    code.push(prefix + '// type: any');
                                    code.push(this._innerCode(refs, prefix));
                                }
                                else {
                                    var type = this.param.types[0];
                                    var test = type !== 'any' ? refs.add(getTypeTest(type), 'test') : null;
                                    code.push(prefix + 'if (' + test + '(arg' + index + ')) { ' + comment);
                                    code.push(this._innerCode(refs, prefix + '  '));
                                    code.push(prefix + '}');
                                }
                            }
                        }
                        else {
                            code.push(this._innerCode(refs, prefix));
                        }
                        return code.join('\n');
                    };
                    Node.prototype._innerCode = function (refs, prefix) {
                        var code = [];
                        var i;
                        if (this.signature) {
                            code.push(prefix + 'if (arguments.length === ' + this.path.length + ') {');
                            code.push(this.signature.toCode(refs, prefix + '  '));
                            code.push(prefix + '}');
                        }
                        for (i = 0; i < this.childs.length; i++) {
                            code.push(this.childs[i].toCode(refs, prefix));
                        }
                        if (!this.fallThrough || (this.param && this.param.anyType)) {
                            var exceptions = this._exceptions(refs, prefix);
                            if (exceptions) {
                                code.push(exceptions);
                            }
                        }
                        return code.join('\n');
                    };
                    Node.prototype._exceptions = function (refs, prefix) {
                        var index = this.path.length;
                        if (this.childs.length === 0) {
                            return [
                                prefix + 'if (arguments.length > ' + index + ') {',
                                prefix + '  throw createError(name, arguments.length, ' + index + ', arguments[' + index + ']);',
                                prefix + '}'
                            ].join('\n');
                        }
                        else {
                            var keys = {};
                            var types = [];
                            for (var i = 0; i < this.childs.length; i++) {
                                var node = this.childs[i];
                                if (node.param) {
                                    for (var j = 0; j < node.param.types.length; j++) {
                                        var type = node.param.types[j];
                                        if (!(type in keys) && !node.param.conversions[j]) {
                                            keys[type] = true;
                                            types.push(type);
                                        }
                                    }
                                }
                            }
                            return prefix + 'throw createError(name, arguments.length, ' + index + ', arguments[' + index + '], \'' + types.join(',') + '\');';
                        }
                    };
                    function parseSignatures(rawSignatures) {
                        var signature;
                        var keys = {};
                        var signatures = [];
                        var i;
                        for (var types in rawSignatures) {
                            if (rawSignatures.hasOwnProperty(types)) {
                                var fn = rawSignatures[types];
                                signature = new Signature(types, fn);
                                if (signature.ignore()) {
                                    continue;
                                }
                                var expanded = signature.expand();
                                for (i = 0; i < expanded.length; i++) {
                                    var signature_i = expanded[i];
                                    var key = signature_i.toString();
                                    var existing = keys[key];
                                    if (!existing) {
                                        keys[key] = signature_i;
                                    }
                                    else {
                                        var cmp = Signature.compare(signature_i, existing);
                                        if (cmp < 0) {
                                            keys[key] = signature_i;
                                        }
                                        else if (cmp === 0) {
                                            throw new Error('Signature "' + key + '" is defined twice');
                                        }
                                    }
                                }
                            }
                        }
                        for (key in keys) {
                            if (keys.hasOwnProperty(key)) {
                                signatures.push(keys[key]);
                            }
                        }
                        signatures.sort(function (a, b) {
                            return Signature.compare(a, b);
                        });
                        for (i = 0; i < signatures.length; i++) {
                            signature = signatures[i];
                            if (signature.varArgs) {
                                var index = signature.params.length - 1;
                                var param = signature.params[index];
                                var t = 0;
                                while (t < param.types.length) {
                                    if (param.conversions[t]) {
                                        var type = param.types[t];
                                        for (var j = 0; j < signatures.length; j++) {
                                            var other = signatures[j];
                                            var p = other.params[index];
                                            if (other !== signature &&
                                                p &&
                                                contains(p.types, type) && !p.conversions[index]) {
                                                param.types.splice(t, 1);
                                                param.conversions.splice(t, 1);
                                                t--;
                                                break;
                                            }
                                        }
                                    }
                                    t++;
                                }
                            }
                        }
                        return signatures;
                    }
                    function filterAnyTypeSignatures(signatures) {
                        var filtered = [];
                        for (var i = 0; i < signatures.length; i++) {
                            if (signatures[i].anyType) {
                                filtered.push(signatures[i]);
                            }
                        }
                        return filtered;
                    }
                    function mapSignatures(signatures) {
                        var normalized = {};
                        for (var i = 0; i < signatures.length; i++) {
                            var signature = signatures[i];
                            if (signature.fn && !signature.hasConversions()) {
                                var params = signature.params.join(',');
                                normalized[params] = signature.fn;
                            }
                        }
                        return normalized;
                    }
                    function parseTree(signatures, path, anys) {
                        var i, signature;
                        var index = path.length;
                        var nodeSignature;
                        var filtered = [];
                        for (i = 0; i < signatures.length; i++) {
                            signature = signatures[i];
                            if (signature.params.length === index && !nodeSignature) {
                                nodeSignature = signature;
                            }
                            if (signature.params[index] != undefined) {
                                filtered.push(signature);
                            }
                        }
                        filtered.sort(function (a, b) {
                            return Param.compare(a.params[index], b.params[index]);
                        });
                        var entries = [];
                        for (i = 0; i < filtered.length; i++) {
                            signature = filtered[i];
                            var param = signature.params[index];
                            var existing = entries.filter(function (entry) {
                                return entry.param.overlapping(param);
                            })[0];
                            if (existing) {
                                if (existing.param.varArgs) {
                                    throw new Error('Conflicting types "' + existing.param + '" and "' + param + '"');
                                }
                                existing.signatures.push(signature);
                            }
                            else {
                                entries.push({
                                    param: param,
                                    signatures: [signature]
                                });
                            }
                        }
                        var matchingAnys = [];
                        for (i = 0; i < anys.length; i++) {
                            if (anys[i].paramsStartWith(path)) {
                                matchingAnys.push(anys[i]);
                            }
                        }
                        var fallThrough = false;
                        for (i = 0; i < matchingAnys.length; i++) {
                            if (!contains(signatures, matchingAnys[i])) {
                                fallThrough = true;
                                break;
                            }
                        }
                        var childs = new Array(entries.length);
                        for (i = 0; i < entries.length; i++) {
                            var entry = entries[i];
                            childs[i] = parseTree(entry.signatures, path.concat(entry.param), matchingAnys);
                        }
                        return new Node(path, nodeSignature, childs, fallThrough);
                    }
                    function getArgs(count) {
                        var args = [];
                        for (var i = 0; i < count; i++) {
                            args[i] = 'arg' + i;
                        }
                        return args;
                    }
                    function _typed(name, signatures) {
                        var refs = new Refs();
                        var _signatures = parseSignatures(signatures);
                        if (_signatures.length == 0) {
                            throw new Error('No signatures provided');
                        }
                        var anys = filterAnyTypeSignatures(_signatures);
                        var node = parseTree(_signatures, [], anys);
                        var code = [];
                        var _name = name || '';
                        var _args = getArgs(maxParams(_signatures));
                        code.push('function ' + _name + '(' + _args.join(', ') + ') {');
                        code.push('  "use strict";');
                        code.push('  var name = \'' + _name + '\';');
                        code.push(node.toCode(refs, '  ', false));
                        code.push('}');
                        var body = [
                            refs.toCode(),
                            'return ' + code.join('\n')
                        ].join('\n');
                        var factory = (new Function(refs.name, 'createError', body));
                        var fn = factory(refs, createError);
                        fn.signatures = mapSignatures(_signatures);
                        return fn;
                    }
                    function maxParams(signatures) {
                        var max = 0;
                        for (var i = 0; i < signatures.length; i++) {
                            var len = signatures[i].params.length;
                            if (len > max) {
                                max = len;
                            }
                        }
                        return max;
                    }
                    function getTypeOf(x) {
                        var obj;
                        for (var i = 0; i < typed.types.length; i++) {
                            var entry = typed.types[i];
                            if (entry.name === 'Object') {
                                obj = entry;
                            }
                            else {
                                if (entry.test(x))
                                    return entry.name;
                            }
                        }
                        if (obj && obj.test(x))
                            return obj.name;
                        return 'unknown';
                    }
                    function contains(array, item) {
                        return array.indexOf(item) !== -1;
                    }
                    function last(array) {
                        return array[array.length - 1];
                    }
                    var types = [
                        { name: 'number', test: function (x) { return typeof x === 'number'; } },
                        { name: 'string', test: function (x) { return typeof x === 'string'; } },
                        { name: 'boolean', test: function (x) { return typeof x === 'boolean'; } },
                        { name: 'Function', test: function (x) { return typeof x === 'function'; } },
                        { name: 'Array', test: Array.isArray },
                        { name: 'Date', test: function (x) { return x instanceof Date; } },
                        { name: 'RegExp', test: function (x) { return x instanceof RegExp; } },
                        { name: 'Object', test: function (x) { return typeof x === 'object'; } },
                        { name: 'null', test: function (x) { return x === null; } },
                        { name: 'undefined', test: function (x) { return x === undefined; } }
                    ];
                    var config = {};
                    var conversions = [];
                    var ignore = [];
                    var typed = {
                        config: config,
                        types: types,
                        conversions: conversions,
                        ignore: ignore
                    };
                    typed = _typed('typed', {
                        'Object': function (signatures) {
                            var fns = [];
                            for (var signature in signatures) {
                                if (signatures.hasOwnProperty(signature)) {
                                    fns.push(signatures[signature]);
                                }
                            }
                            var name = getName(fns);
                            return _typed(name, signatures);
                        },
                        'string, Object': _typed,
                        '...Function': function (fns) {
                            var err;
                            var name = getName(fns);
                            var signatures = {};
                            for (var i = 0; i < fns.length; i++) {
                                var fn = fns[i];
                                if (!(typeof fn.signatures === 'object')) {
                                    err = new TypeError('Function is no typed-function (index: ' + i + ')');
                                    err.data = { index: i };
                                    throw err;
                                }
                                for (var signature in fn.signatures) {
                                    if (fn.signatures.hasOwnProperty(signature)) {
                                        if (signatures.hasOwnProperty(signature)) {
                                            if (fn.signatures[signature] !== signatures[signature]) {
                                                err = new Error('Signature "' + signature + '" is defined twice');
                                                err.data = { signature: signature };
                                                throw err;
                                            }
                                        }
                                        else {
                                            signatures[signature] = fn.signatures[signature];
                                        }
                                    }
                                }
                            }
                            return _typed(name, signatures);
                        }
                    });
                    function find(fn, signature) {
                        if (!fn.signatures) {
                            throw new TypeError('Function is no typed-function');
                        }
                        var arr;
                        if (typeof signature === 'string') {
                            arr = signature.split(',');
                            for (var i = 0; i < arr.length; i++) {
                                arr[i] = arr[i].trim();
                            }
                        }
                        else if (Array.isArray(signature)) {
                            arr = signature;
                        }
                        else {
                            throw new TypeError('String array or a comma separated string expected');
                        }
                        var str = arr.join(',');
                        var match = fn.signatures[str];
                        if (match) {
                            return match;
                        }
                        throw new TypeError('Signature not found (signature: ' + (fn.name || 'unnamed') + '(' + arr.join(', ') + '))');
                    }
                    function convert(value, type) {
                        var from = getTypeOf(value);
                        if (type === from) {
                            return value;
                        }
                        for (var i = 0; i < typed.conversions.length; i++) {
                            var conversion = typed.conversions[i];
                            if (conversion.from === from && conversion.to === type) {
                                return conversion.convert(value);
                            }
                        }
                        throw new Error('Cannot convert from ' + from + ' to ' + type);
                    }
                    typed.config = config;
                    typed.types = types;
                    typed.conversions = conversions;
                    typed.ignore = ignore;
                    typed.create = create;
                    typed.find = find;
                    typed.convert = convert;
                    typed.addType = function (type) {
                        if (!type || typeof type.name !== 'string' || typeof type.test !== 'function') {
                            throw new TypeError('Object with properties {name: string, test: function} expected');
                        }
                        typed.types.push(type);
                    };
                    typed.addConversion = function (conversion) {
                        if (!conversion
                            || typeof conversion.from !== 'string'
                            || typeof conversion.to !== 'string'
                            || typeof conversion.convert !== 'function') {
                            throw new TypeError('Object with properties {from: string, to: string, convert: function} expected');
                        }
                        typed.conversions.push(conversion);
                    };
                    return typed;
                }
                return create();
            }));
        }),
        (function (module, exports) {
            function E() {
            }
            E.prototype = {
                on: function (name, callback, ctx) {
                    var e = this.e || (this.e = {});
                    (e[name] || (e[name] = [])).push({
                        fn: callback,
                        ctx: ctx
                    });
                    return this;
                },
                once: function (name, callback, ctx) {
                    var self = this;
                    function listener() {
                        self.off(name, listener);
                        callback.apply(ctx, arguments);
                    }
                    ;
                    listener._ = callback;
                    return this.on(name, listener, ctx);
                },
                emit: function (name) {
                    var data = [].slice.call(arguments, 1);
                    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();
                    var i = 0;
                    var len = evtArr.length;
                    for (i; i < len; i++) {
                        evtArr[i].fn.apply(evtArr[i].ctx, data);
                    }
                    return this;
                },
                off: function (name, callback) {
                    var e = this.e || (this.e = {});
                    var evts = e[name];
                    var liveEvents = [];
                    if (evts && callback) {
                        for (var i = 0, len = evts.length; i < len; i++) {
                            if (evts[i].fn !== callback && evts[i].fn._ !== callback)
                                liveEvents.push(evts[i]);
                        }
                    }
                    (liveEvents.length)
                        ? e[name] = liveEvents
                        : delete e[name];
                    return this;
                }
            };
            module.exports = E;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var lazy = __webpack_require__(5).lazy;
            var isFactory = __webpack_require__(5).isFactory;
            var traverse = __webpack_require__(5).traverse;
            var ArgumentsError = __webpack_require__(50);
            function factory(type, config, load, typed, math) {
                function math_import(object, options) {
                    var num = arguments.length;
                    if (num !== 1 && num !== 2) {
                        throw new ArgumentsError('import', num, 1, 2);
                    }
                    if (!options) {
                        options = {};
                    }
                    if (isFactory(object)) {
                        _importFactory(object, options);
                    }
                    else if (Array.isArray(object)) {
                        object.forEach(function (entry) {
                            math_import(entry, options);
                        });
                    }
                    else if (typeof object === 'object') {
                        for (var name in object) {
                            if (object.hasOwnProperty(name)) {
                                var value = object[name];
                                if (isSupportedType(value)) {
                                    _import(name, value, options);
                                }
                                else if (isFactory(object)) {
                                    _importFactory(object, options);
                                }
                                else {
                                    math_import(value, options);
                                }
                            }
                        }
                    }
                    else {
                        if (!options.silent) {
                            throw new TypeError('Factory, Object, or Array expected');
                        }
                    }
                }
                function _import(name, value, options) {
                    if (options.wrap && typeof value === 'function') {
                        value = _wrap(value);
                    }
                    if (isTypedFunction(math[name]) && isTypedFunction(value)) {
                        if (options.override) {
                            value = typed(name, value.signatures);
                        }
                        else {
                            value = typed(math[name], value);
                        }
                        math[name] = value;
                        _importTransform(name, value);
                        math.emit('import', name, function resolver() {
                            return value;
                        });
                        return;
                    }
                    if (math[name] === undefined || options.override) {
                        math[name] = value;
                        _importTransform(name, value);
                        math.emit('import', name, function resolver() {
                            return value;
                        });
                        return;
                    }
                    if (!options.silent) {
                        throw new Error('Cannot import "' + name + '": already exists');
                    }
                }
                function _importTransform(name, value) {
                    if (value && typeof value.transform === 'function') {
                        math.expression.transform[name] = value.transform;
                        if (allowedInExpressions(name)) {
                            math.expression.mathWithTransform[name] = value.transform;
                        }
                    }
                    else {
                        delete math.expression.transform[name];
                        if (allowedInExpressions(name)) {
                            math.expression.mathWithTransform[name] = value;
                        }
                    }
                }
                function _wrap(fn) {
                    var wrapper = function wrapper() {
                        var args = [];
                        for (var i = 0, len = arguments.length; i < len; i++) {
                            var arg = arguments[i];
                            args[i] = arg && arg.valueOf();
                        }
                        return fn.apply(math, args);
                    };
                    if (fn.transform) {
                        wrapper.transform = fn.transform;
                    }
                    return wrapper;
                }
                function _importFactory(factory, options) {
                    if (typeof factory.name === 'string') {
                        var name = factory.name;
                        var existingTransform = name in math.expression.transform;
                        var namespace = factory.path ? traverse(math, factory.path) : math;
                        var existing = namespace.hasOwnProperty(name) ? namespace[name] : undefined;
                        var resolver = function () {
                            var instance = load(factory);
                            if (instance && typeof instance.transform === 'function') {
                                throw new Error('Transforms cannot be attached to factory functions. ' +
                                    'Please create a separate function for it with exports.path="expression.transform"');
                            }
                            if (isTypedFunction(existing) && isTypedFunction(instance)) {
                                if (options.override) {
                                }
                                else {
                                    instance = typed(existing, instance);
                                }
                                return instance;
                            }
                            if (existing === undefined || options.override) {
                                return instance;
                            }
                            if (!options.silent) {
                                throw new Error('Cannot import "' + name + '": already exists');
                            }
                        };
                        if (factory.lazy !== false) {
                            lazy(namespace, name, resolver);
                            if (!existingTransform) {
                                if (factory.path === 'expression.transform' || factoryAllowedInExpressions(factory)) {
                                    lazy(math.expression.mathWithTransform, name, resolver);
                                }
                            }
                        }
                        else {
                            namespace[name] = resolver();
                            if (!existingTransform) {
                                if (factory.path === 'expression.transform' || factoryAllowedInExpressions(factory)) {
                                    math.expression.mathWithTransform[name] = resolver();
                                }
                            }
                        }
                        math.emit('import', name, resolver, factory.path);
                    }
                    else {
                        load(factory);
                    }
                }
                function isSupportedType(object) {
                    return typeof object === 'function'
                        || typeof object === 'number'
                        || typeof object === 'string'
                        || typeof object === 'boolean'
                        || object === null
                        || (object && type.isUnit(object))
                        || (object && type.isComplex(object))
                        || (object && type.isBigNumber(object))
                        || (object && type.isFraction(object))
                        || (object && type.isMatrix(object))
                        || (object && Array.isArray(object));
                }
                function isTypedFunction(fn) {
                    return typeof fn === 'function' && typeof fn.signatures === 'object';
                }
                function allowedInExpressions(name) {
                    return !unsafe.hasOwnProperty(name);
                }
                function factoryAllowedInExpressions(factory) {
                    return factory.path === undefined && !unsafe.hasOwnProperty(factory.name);
                }
                var unsafe = {
                    'expression': true,
                    'type': true,
                    'docs': true,
                    'error': true,
                    'json': true,
                    'chain': true
                };
                return math_import;
            }
            exports.math = true;
            exports.name = 'import';
            exports.factory = factory;
            exports.lazy = true;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var object = __webpack_require__(5);
            function factory(type, config, load, typed, math) {
                var MATRIX = ['Matrix', 'Array'];
                var NUMBER = ['number', 'BigNumber', 'Fraction'];
                function _config(options) {
                    if (options) {
                        var prev = object.map(config, object.clone);
                        validateOption(options, 'matrix', MATRIX);
                        validateOption(options, 'number', NUMBER);
                        object.deepExtend(config, options);
                        var curr = object.map(config, object.clone);
                        var changes = object.map(options, object.clone);
                        math.emit('config', curr, prev, changes);
                        return curr;
                    }
                    else {
                        return object.map(config, object.clone);
                    }
                }
                _config.MATRIX = MATRIX;
                _config.NUMBER = NUMBER;
                return _config;
            }
            function contains(array, item) {
                return array.indexOf(item) !== -1;
            }
            function findIndex(array, item) {
                return array
                    .map(function (i) {
                    return i.toLowerCase();
                })
                    .indexOf(item.toLowerCase());
            }
            function validateOption(options, name, values) {
                if (options[name] !== undefined && !contains(values, options[name])) {
                    var index = findIndex(values, options[name]);
                    if (index !== -1) {
                        console.warn('Warning: Wrong casing for configuration option "' + name + '", should be "' + values[index] + '" instead of "' + options[name] + '".');
                        options[name] = values[index];
                    }
                    else {
                        console.warn('Warning: Unknown value "' + options[name] + '" for configuration option "' + name + '". Available options: ' + values.map(JSON.stringify).join(', ') + '.');
                    }
                }
            }
            exports.name = 'config';
            exports.math = true;
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            module.exports = [
                __webpack_require__(157),
                __webpack_require__(189),
                __webpack_require__(191),
                __webpack_require__(403),
                __webpack_require__(546),
                __webpack_require__(548)
            ];
        }),
        (function (module, exports, __webpack_require__) {
            module.exports = [
                __webpack_require__(158),
                __webpack_require__(162),
                __webpack_require__(163),
                __webpack_require__(167),
                __webpack_require__(170),
                __webpack_require__(173),
                __webpack_require__(74),
                __webpack_require__(181),
                __webpack_require__(182),
                __webpack_require__(183)
            ];
        }),
        (function (module, exports, __webpack_require__) {
            module.exports = [
                __webpack_require__(159),
                __webpack_require__(161)
            ];
        }),
        (function (module, exports, __webpack_require__) {
            var Decimal = __webpack_require__(160);
            function factory(type, config, load, typed, math) {
                var BigNumber = Decimal.clone({ precision: config.precision });
                BigNumber.prototype.type = 'BigNumber';
                BigNumber.prototype.isBigNumber = true;
                BigNumber.prototype.toJSON = function () {
                    return {
                        mathjs: 'BigNumber',
                        value: this.toString()
                    };
                };
                BigNumber.fromJSON = function (json) {
                    return new BigNumber(json.value);
                };
                math.on('config', function (curr, prev) {
                    if (curr.precision !== prev.precision) {
                        BigNumber.config({ precision: curr.precision });
                    }
                });
                return BigNumber;
            }
            exports.name = 'BigNumber';
            exports.path = 'type';
            exports.factory = factory;
            exports.math = true;
        }),
        (function (module, exports, __webpack_require__) {
            var __WEBPACK_AMD_DEFINE_RESULT__;
            ;
            (function (globalScope) {
                'use strict';
                var EXP_LIMIT = 9e15, MAX_DIGITS = 1e9, NUMERALS = '0123456789abcdef', LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058', PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789', Decimal = {
                    precision: 20,
                    rounding: 4,
                    modulo: 1,
                    toExpNeg: -7,
                    toExpPos: 21,
                    minE: -EXP_LIMIT,
                    maxE: EXP_LIMIT,
                    crypto: false
                }, inexact, noConflict, quadrant, external = true, decimalError = '[DecimalError] ', invalidArgument = decimalError + 'Invalid argument: ', precisionLimitExceeded = decimalError + 'Precision limit exceeded', cryptoUnavailable = decimalError + 'crypto unavailable', mathfloor = Math.floor, mathpow = Math.pow, isBinary = /^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i, isHex = /^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i, isOctal = /^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i, isDecimal = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i, BASE = 1e7, LOG_BASE = 7, MAX_SAFE_INTEGER = 9007199254740991, LN10_PRECISION = LN10.length - 1, PI_PRECISION = PI.length - 1, P = {};
                P.absoluteValue = P.abs = function () {
                    var x = new this.constructor(this);
                    if (x.s < 0)
                        x.s = 1;
                    return finalise(x);
                };
                P.ceil = function () {
                    return finalise(new this.constructor(this), this.e + 1, 2);
                };
                P.comparedTo = P.cmp = function (y) {
                    var i, j, xdL, ydL, x = this, xd = x.d, yd = (y = new x.constructor(y)).d, xs = x.s, ys = y.s;
                    if (!xd || !yd) {
                        return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;
                    }
                    if (!xd[0] || !yd[0])
                        return xd[0] ? xs : yd[0] ? -ys : 0;
                    if (xs !== ys)
                        return xs;
                    if (x.e !== y.e)
                        return x.e > y.e ^ xs < 0 ? 1 : -1;
                    xdL = xd.length;
                    ydL = yd.length;
                    for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {
                        if (xd[i] !== yd[i])
                            return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;
                    }
                    return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;
                };
                P.cosine = P.cos = function () {
                    var pr, rm, x = this, Ctor = x.constructor;
                    if (!x.d)
                        return new Ctor(NaN);
                    if (!x.d[0])
                        return new Ctor(1);
                    pr = Ctor.precision;
                    rm = Ctor.rounding;
                    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
                    Ctor.rounding = 1;
                    x = cosine(Ctor, toLessThanHalfPi(Ctor, x));
                    Ctor.precision = pr;
                    Ctor.rounding = rm;
                    return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);
                };
                P.cubeRoot = P.cbrt = function () {
                    var e, m, n, r, rep, s, sd, t, t3, t3plusx, x = this, Ctor = x.constructor;
                    if (!x.isFinite() || x.isZero())
                        return new Ctor(x);
                    external = false;
                    s = x.s * Math.pow(x.s * x, 1 / 3);
                    if (!s || Math.abs(s) == 1 / 0) {
                        n = digitsToString(x.d);
                        e = x.e;
                        if (s = (e - n.length + 1) % 3)
                            n += (s == 1 || s == -2 ? '0' : '00');
                        s = Math.pow(n, 1 / 3);
                        e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));
                        if (s == 1 / 0) {
                            n = '5e' + e;
                        }
                        else {
                            n = s.toExponential();
                            n = n.slice(0, n.indexOf('e') + 1) + e;
                        }
                        r = new Ctor(n);
                        r.s = x.s;
                    }
                    else {
                        r = new Ctor(s.toString());
                    }
                    sd = (e = Ctor.precision) + 3;
                    for (;;) {
                        t = r;
                        t3 = t.times(t).times(t);
                        t3plusx = t3.plus(x);
                        r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);
                        if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
                            n = n.slice(sd - 3, sd + 1);
                            if (n == '9999' || !rep && n == '4999') {
                                if (!rep) {
                                    finalise(t, e + 1, 0);
                                    if (t.times(t).times(t).eq(x)) {
                                        r = t;
                                        break;
                                    }
                                }
                                sd += 4;
                                rep = 1;
                            }
                            else {
                                if (!+n || !+n.slice(1) && n.charAt(0) == '5') {
                                    finalise(r, e + 1, 1);
                                    m = !r.times(r).times(r).eq(x);
                                }
                                break;
                            }
                        }
                    }
                    external = true;
                    return finalise(r, e, Ctor.rounding, m);
                };
                P.decimalPlaces = P.dp = function () {
                    var w, d = this.d, n = NaN;
                    if (d) {
                        w = d.length - 1;
                        n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;
                        w = d[w];
                        if (w)
                            for (; w % 10 == 0; w /= 10)
                                n--;
                        if (n < 0)
                            n = 0;
                    }
                    return n;
                };
                P.dividedBy = P.div = function (y) {
                    return divide(this, new this.constructor(y));
                };
                P.dividedToIntegerBy = P.divToInt = function (y) {
                    var x = this, Ctor = x.constructor;
                    return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);
                };
                P.equals = P.eq = function (y) {
                    return this.cmp(y) === 0;
                };
                P.floor = function () {
                    return finalise(new this.constructor(this), this.e + 1, 3);
                };
                P.greaterThan = P.gt = function (y) {
                    return this.cmp(y) > 0;
                };
                P.greaterThanOrEqualTo = P.gte = function (y) {
                    var k = this.cmp(y);
                    return k == 1 || k === 0;
                };
                P.hyperbolicCosine = P.cosh = function () {
                    var k, n, pr, rm, len, x = this, Ctor = x.constructor, one = new Ctor(1);
                    if (!x.isFinite())
                        return new Ctor(x.s ? 1 / 0 : NaN);
                    if (x.isZero())
                        return one;
                    pr = Ctor.precision;
                    rm = Ctor.rounding;
                    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
                    Ctor.rounding = 1;
                    len = x.d.length;
                    if (len < 32) {
                        k = Math.ceil(len / 3);
                        n = Math.pow(4, -k).toString();
                    }
                    else {
                        k = 16;
                        n = '2.3283064365386962890625e-10';
                    }
                    x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);
                    var cosh2_x, i = k, d8 = new Ctor(8);
                    for (; i--;) {
                        cosh2_x = x.times(x);
                        x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));
                    }
                    return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);
                };
                P.hyperbolicSine = P.sinh = function () {
                    var k, pr, rm, len, x = this, Ctor = x.constructor;
                    if (!x.isFinite() || x.isZero())
                        return new Ctor(x);
                    pr = Ctor.precision;
                    rm = Ctor.rounding;
                    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
                    Ctor.rounding = 1;
                    len = x.d.length;
                    if (len < 3) {
                        x = taylorSeries(Ctor, 2, x, x, true);
                    }
                    else {
                        k = 1.4 * Math.sqrt(len);
                        k = k > 16 ? 16 : k | 0;
                        x = x.times(Math.pow(5, -k));
                        x = taylorSeries(Ctor, 2, x, x, true);
                        var sinh2_x, d5 = new Ctor(5), d16 = new Ctor(16), d20 = new Ctor(20);
                        for (; k--;) {
                            sinh2_x = x.times(x);
                            x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));
                        }
                    }
                    Ctor.precision = pr;
                    Ctor.rounding = rm;
                    return finalise(x, pr, rm, true);
                };
                P.hyperbolicTangent = P.tanh = function () {
                    var pr, rm, x = this, Ctor = x.constructor;
                    if (!x.isFinite())
                        return new Ctor(x.s);
                    if (x.isZero())
                        return new Ctor(x);
                    pr = Ctor.precision;
                    rm = Ctor.rounding;
                    Ctor.precision = pr + 7;
                    Ctor.rounding = 1;
                    return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);
                };
                P.inverseCosine = P.acos = function () {
                    var halfPi, x = this, Ctor = x.constructor, k = x.abs().cmp(1), pr = Ctor.precision, rm = Ctor.rounding;
                    if (k !== -1) {
                        return k === 0
                            ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)
                            : new Ctor(NaN);
                    }
                    if (x.isZero())
                        return getPi(Ctor, pr + 4, rm).times(0.5);
                    Ctor.precision = pr + 6;
                    Ctor.rounding = 1;
                    x = x.asin();
                    halfPi = getPi(Ctor, pr + 4, rm).times(0.5);
                    Ctor.precision = pr;
                    Ctor.rounding = rm;
                    return halfPi.minus(x);
                };
                P.inverseHyperbolicCosine = P.acosh = function () {
                    var pr, rm, x = this, Ctor = x.constructor;
                    if (x.lte(1))
                        return new Ctor(x.eq(1) ? 0 : NaN);
                    if (!x.isFinite())
                        return new Ctor(x);
                    pr = Ctor.precision;
                    rm = Ctor.rounding;
                    Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;
                    Ctor.rounding = 1;
                    external = false;
                    x = x.times(x).minus(1).sqrt().plus(x);
                    external = true;
                    Ctor.precision = pr;
                    Ctor.rounding = rm;
                    return x.ln();
                };
                P.inverseHyperbolicSine = P.asinh = function () {
                    var pr, rm, x = this, Ctor = x.constructor;
                    if (!x.isFinite() || x.isZero())
                        return new Ctor(x);
                    pr = Ctor.precision;
                    rm = Ctor.rounding;
                    Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;
                    Ctor.rounding = 1;
                    external = false;
                    x = x.times(x).plus(1).sqrt().plus(x);
                    external = true;
                    Ctor.precision = pr;
                    Ctor.rounding = rm;
                    return x.ln();
                };
                P.inverseHyperbolicTangent = P.atanh = function () {
                    var pr, rm, wpr, xsd, x = this, Ctor = x.constructor;
                    if (!x.isFinite())
                        return new Ctor(NaN);
                    if (x.e >= 0)
                        return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);
                    pr = Ctor.precision;
                    rm = Ctor.rounding;
                    xsd = x.sd();
                    if (Math.max(xsd, pr) < 2 * -x.e - 1)
                        return finalise(new Ctor(x), pr, rm, true);
                    Ctor.precision = wpr = xsd - x.e;
                    x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);
                    Ctor.precision = pr + 4;
                    Ctor.rounding = 1;
                    x = x.ln();
                    Ctor.precision = pr;
                    Ctor.rounding = rm;
                    return x.times(0.5);
                };
                P.inverseSine = P.asin = function () {
                    var halfPi, k, pr, rm, x = this, Ctor = x.constructor;
                    if (x.isZero())
                        return new Ctor(x);
                    k = x.abs().cmp(1);
                    pr = Ctor.precision;
                    rm = Ctor.rounding;
                    if (k !== -1) {
                        if (k === 0) {
                            halfPi = getPi(Ctor, pr + 4, rm).times(0.5);
                            halfPi.s = x.s;
                            return halfPi;
                        }
                        return new Ctor(NaN);
                    }
                    Ctor.precision = pr + 6;
                    Ctor.rounding = 1;
                    x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();
                    Ctor.precision = pr;
                    Ctor.rounding = rm;
                    return x.times(2);
                };
                P.inverseTangent = P.atan = function () {
                    var i, j, k, n, px, t, r, wpr, x2, x = this, Ctor = x.constructor, pr = Ctor.precision, rm = Ctor.rounding;
                    if (!x.isFinite()) {
                        if (!x.s)
                            return new Ctor(NaN);
                        if (pr + 4 <= PI_PRECISION) {
                            r = getPi(Ctor, pr + 4, rm).times(0.5);
                            r.s = x.s;
                            return r;
                        }
                    }
                    else if (x.isZero()) {
                        return new Ctor(x);
                    }
                    else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {
                        r = getPi(Ctor, pr + 4, rm).times(0.25);
                        r.s = x.s;
                        return r;
                    }
                    Ctor.precision = wpr = pr + 10;
                    Ctor.rounding = 1;
                    k = Math.min(28, wpr / LOG_BASE + 2 | 0);
                    for (i = k; i; --i)
                        x = x.div(x.times(x).plus(1).sqrt().plus(1));
                    external = false;
                    j = Math.ceil(wpr / LOG_BASE);
                    n = 1;
                    x2 = x.times(x);
                    r = new Ctor(x);
                    px = x;
                    for (; i !== -1;) {
                        px = px.times(x2);
                        t = r.minus(px.div(n += 2));
                        px = px.times(x2);
                        r = t.plus(px.div(n += 2));
                        if (r.d[j] !== void 0)
                            for (i = j; r.d[i] === t.d[i] && i--;)
                                ;
                    }
                    if (k)
                        r = r.times(2 << (k - 1));
                    external = true;
                    return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);
                };
                P.isFinite = function () {
                    return !!this.d;
                };
                P.isInteger = P.isInt = function () {
                    return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;
                };
                P.isNaN = function () {
                    return !this.s;
                };
                P.isNegative = P.isNeg = function () {
                    return this.s < 0;
                };
                P.isPositive = P.isPos = function () {
                    return this.s > 0;
                };
                P.isZero = function () {
                    return !!this.d && this.d[0] === 0;
                };
                P.lessThan = P.lt = function (y) {
                    return this.cmp(y) < 0;
                };
                P.lessThanOrEqualTo = P.lte = function (y) {
                    return this.cmp(y) < 1;
                };
                P.logarithm = P.log = function (base) {
                    var isBase10, d, denominator, k, inf, num, sd, r, arg = this, Ctor = arg.constructor, pr = Ctor.precision, rm = Ctor.rounding, guard = 5;
                    if (base == null) {
                        base = new Ctor(10);
                        isBase10 = true;
                    }
                    else {
                        base = new Ctor(base);
                        d = base.d;
                        if (base.s < 0 || !d || !d[0] || base.eq(1))
                            return new Ctor(NaN);
                        isBase10 = base.eq(10);
                    }
                    d = arg.d;
                    if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {
                        return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);
                    }
                    if (isBase10) {
                        if (d.length > 1) {
                            inf = true;
                        }
                        else {
                            for (k = d[0]; k % 10 === 0;)
                                k /= 10;
                            inf = k !== 1;
                        }
                    }
                    external = false;
                    sd = pr + guard;
                    num = naturalLogarithm(arg, sd);
                    denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);
                    r = divide(num, denominator, sd, 1);
                    if (checkRoundingDigits(r.d, k = pr, rm)) {
                        do {
                            sd += 10;
                            num = naturalLogarithm(arg, sd);
                            denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);
                            r = divide(num, denominator, sd, 1);
                            if (!inf) {
                                if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {
                                    r = finalise(r, pr + 1, 0);
                                }
                                break;
                            }
                        } while (checkRoundingDigits(r.d, k += 10, rm));
                    }
                    external = true;
                    return finalise(r, pr, rm);
                };
                P.minus = P.sub = function (y) {
                    var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd, x = this, Ctor = x.constructor;
                    y = new Ctor(y);
                    if (!x.d || !y.d) {
                        if (!x.s || !y.s)
                            y = new Ctor(NaN);
                        else if (x.d)
                            y.s = -y.s;
                        else
                            y = new Ctor(y.d || x.s !== y.s ? x : NaN);
                        return y;
                    }
                    if (x.s != y.s) {
                        y.s = -y.s;
                        return x.plus(y);
                    }
                    xd = x.d;
                    yd = y.d;
                    pr = Ctor.precision;
                    rm = Ctor.rounding;
                    if (!xd[0] || !yd[0]) {
                        if (yd[0])
                            y.s = -y.s;
                        else if (xd[0])
                            y = new Ctor(x);
                        else
                            return new Ctor(rm === 3 ? -0 : 0);
                        return external ? finalise(y, pr, rm) : y;
                    }
                    e = mathfloor(y.e / LOG_BASE);
                    xe = mathfloor(x.e / LOG_BASE);
                    xd = xd.slice();
                    k = xe - e;
                    if (k) {
                        xLTy = k < 0;
                        if (xLTy) {
                            d = xd;
                            k = -k;
                            len = yd.length;
                        }
                        else {
                            d = yd;
                            e = xe;
                            len = xd.length;
                        }
                        i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;
                        if (k > i) {
                            k = i;
                            d.length = 1;
                        }
                        d.reverse();
                        for (i = k; i--;)
                            d.push(0);
                        d.reverse();
                    }
                    else {
                        i = xd.length;
                        len = yd.length;
                        xLTy = i < len;
                        if (xLTy)
                            len = i;
                        for (i = 0; i < len; i++) {
                            if (xd[i] != yd[i]) {
                                xLTy = xd[i] < yd[i];
                                break;
                            }
                        }
                        k = 0;
                    }
                    if (xLTy) {
                        d = xd;
                        xd = yd;
                        yd = d;
                        y.s = -y.s;
                    }
                    len = xd.length;
                    for (i = yd.length - len; i > 0; --i)
                        xd[len++] = 0;
                    for (i = yd.length; i > k;) {
                        if (xd[--i] < yd[i]) {
                            for (j = i; j && xd[--j] === 0;)
                                xd[j] = BASE - 1;
                            --xd[j];
                            xd[i] += BASE;
                        }
                        xd[i] -= yd[i];
                    }
                    for (; xd[--len] === 0;)
                        xd.pop();
                    for (; xd[0] === 0; xd.shift())
                        --e;
                    if (!xd[0])
                        return new Ctor(rm === 3 ? -0 : 0);
                    y.d = xd;
                    y.e = getBase10Exponent(xd, e);
                    return external ? finalise(y, pr, rm) : y;
                };
                P.modulo = P.mod = function (y) {
                    var q, x = this, Ctor = x.constructor;
                    y = new Ctor(y);
                    if (!x.d || !y.s || y.d && !y.d[0])
                        return new Ctor(NaN);
                    if (!y.d || x.d && !x.d[0]) {
                        return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);
                    }
                    external = false;
                    if (Ctor.modulo == 9) {
                        q = divide(x, y.abs(), 0, 3, 1);
                        q.s *= y.s;
                    }
                    else {
                        q = divide(x, y, 0, Ctor.modulo, 1);
                    }
                    q = q.times(y);
                    external = true;
                    return x.minus(q);
                };
                P.naturalExponential = P.exp = function () {
                    return naturalExponential(this);
                };
                P.naturalLogarithm = P.ln = function () {
                    return naturalLogarithm(this);
                };
                P.negated = P.neg = function () {
                    var x = new this.constructor(this);
                    x.s = -x.s;
                    return finalise(x);
                };
                P.plus = P.add = function (y) {
                    var carry, d, e, i, k, len, pr, rm, xd, yd, x = this, Ctor = x.constructor;
                    y = new Ctor(y);
                    if (!x.d || !y.d) {
                        if (!x.s || !y.s)
                            y = new Ctor(NaN);
                        else if (!x.d)
                            y = new Ctor(y.d || x.s === y.s ? x : NaN);
                        return y;
                    }
                    if (x.s != y.s) {
                        y.s = -y.s;
                        return x.minus(y);
                    }
                    xd = x.d;
                    yd = y.d;
                    pr = Ctor.precision;
                    rm = Ctor.rounding;
                    if (!xd[0] || !yd[0]) {
                        if (!yd[0])
                            y = new Ctor(x);
                        return external ? finalise(y, pr, rm) : y;
                    }
                    k = mathfloor(x.e / LOG_BASE);
                    e = mathfloor(y.e / LOG_BASE);
                    xd = xd.slice();
                    i = k - e;
                    if (i) {
                        if (i < 0) {
                            d = xd;
                            i = -i;
                            len = yd.length;
                        }
                        else {
                            d = yd;
                            e = k;
                            len = xd.length;
                        }
                        k = Math.ceil(pr / LOG_BASE);
                        len = k > len ? k + 1 : len + 1;
                        if (i > len) {
                            i = len;
                            d.length = 1;
                        }
                        d.reverse();
                        for (; i--;)
                            d.push(0);
                        d.reverse();
                    }
                    len = xd.length;
                    i = yd.length;
                    if (len - i < 0) {
                        i = len;
                        d = yd;
                        yd = xd;
                        xd = d;
                    }
                    for (carry = 0; i;) {
                        carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;
                        xd[i] %= BASE;
                    }
                    if (carry) {
                        xd.unshift(carry);
                        ++e;
                    }
                    for (len = xd.length; xd[--len] == 0;)
                        xd.pop();
                    y.d = xd;
                    y.e = getBase10Exponent(xd, e);
                    return external ? finalise(y, pr, rm) : y;
                };
                P.precision = P.sd = function (z) {
                    var k, x = this;
                    if (z !== void 0 && z !== !!z && z !== 1 && z !== 0)
                        throw Error(invalidArgument + z);
                    if (x.d) {
                        k = getPrecision(x.d);
                        if (z && x.e + 1 > k)
                            k = x.e + 1;
                    }
                    else {
                        k = NaN;
                    }
                    return k;
                };
                P.round = function () {
                    var x = this, Ctor = x.constructor;
                    return finalise(new Ctor(x), x.e + 1, Ctor.rounding);
                };
                P.sine = P.sin = function () {
                    var pr, rm, x = this, Ctor = x.constructor;
                    if (!x.isFinite())
                        return new Ctor(NaN);
                    if (x.isZero())
                        return new Ctor(x);
                    pr = Ctor.precision;
                    rm = Ctor.rounding;
                    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
                    Ctor.rounding = 1;
                    x = sine(Ctor, toLessThanHalfPi(Ctor, x));
                    Ctor.precision = pr;
                    Ctor.rounding = rm;
                    return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);
                };
                P.squareRoot = P.sqrt = function () {
                    var m, n, sd, r, rep, t, x = this, d = x.d, e = x.e, s = x.s, Ctor = x.constructor;
                    if (s !== 1 || !d || !d[0]) {
                        return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);
                    }
                    external = false;
                    s = Math.sqrt(+x);
                    if (s == 0 || s == 1 / 0) {
                        n = digitsToString(d);
                        if ((n.length + e) % 2 == 0)
                            n += '0';
                        s = Math.sqrt(n);
                        e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);
                        if (s == 1 / 0) {
                            n = '1e' + e;
                        }
                        else {
                            n = s.toExponential();
                            n = n.slice(0, n.indexOf('e') + 1) + e;
                        }
                        r = new Ctor(n);
                    }
                    else {
                        r = new Ctor(s.toString());
                    }
                    sd = (e = Ctor.precision) + 3;
                    for (;;) {
                        t = r;
                        r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);
                        if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
                            n = n.slice(sd - 3, sd + 1);
                            if (n == '9999' || !rep && n == '4999') {
                                if (!rep) {
                                    finalise(t, e + 1, 0);
                                    if (t.times(t).eq(x)) {
                                        r = t;
                                        break;
                                    }
                                }
                                sd += 4;
                                rep = 1;
                            }
                            else {
                                if (!+n || !+n.slice(1) && n.charAt(0) == '5') {
                                    finalise(r, e + 1, 1);
                                    m = !r.times(r).eq(x);
                                }
                                break;
                            }
                        }
                    }
                    external = true;
                    return finalise(r, e, Ctor.rounding, m);
                };
                P.tangent = P.tan = function () {
                    var pr, rm, x = this, Ctor = x.constructor;
                    if (!x.isFinite())
                        return new Ctor(NaN);
                    if (x.isZero())
                        return new Ctor(x);
                    pr = Ctor.precision;
                    rm = Ctor.rounding;
                    Ctor.precision = pr + 10;
                    Ctor.rounding = 1;
                    x = x.sin();
                    x.s = 1;
                    x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);
                    Ctor.precision = pr;
                    Ctor.rounding = rm;
                    return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);
                };
                P.times = P.mul = function (y) {
                    var carry, e, i, k, r, rL, t, xdL, ydL, x = this, Ctor = x.constructor, xd = x.d, yd = (y = new Ctor(y)).d;
                    y.s *= x.s;
                    if (!xd || !xd[0] || !yd || !yd[0]) {
                        return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd
                            ? NaN
                            : !xd || !yd ? y.s / 0 : y.s * 0);
                    }
                    e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);
                    xdL = xd.length;
                    ydL = yd.length;
                    if (xdL < ydL) {
                        r = xd;
                        xd = yd;
                        yd = r;
                        rL = xdL;
                        xdL = ydL;
                        ydL = rL;
                    }
                    r = [];
                    rL = xdL + ydL;
                    for (i = rL; i--;)
                        r.push(0);
                    for (i = ydL; --i >= 0;) {
                        carry = 0;
                        for (k = xdL + i; k > i;) {
                            t = r[k] + yd[i] * xd[k - i - 1] + carry;
                            r[k--] = t % BASE | 0;
                            carry = t / BASE | 0;
                        }
                        r[k] = (r[k] + carry) % BASE | 0;
                    }
                    for (; !r[--rL];)
                        r.pop();
                    if (carry)
                        ++e;
                    else
                        r.shift();
                    y.d = r;
                    y.e = getBase10Exponent(r, e);
                    return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;
                };
                P.toBinary = function (sd, rm) {
                    return toStringBinary(this, 2, sd, rm);
                };
                P.toDecimalPlaces = P.toDP = function (dp, rm) {
                    var x = this, Ctor = x.constructor;
                    x = new Ctor(x);
                    if (dp === void 0)
                        return x;
                    checkInt32(dp, 0, MAX_DIGITS);
                    if (rm === void 0)
                        rm = Ctor.rounding;
                    else
                        checkInt32(rm, 0, 8);
                    return finalise(x, dp + x.e + 1, rm);
                };
                P.toExponential = function (dp, rm) {
                    var str, x = this, Ctor = x.constructor;
                    if (dp === void 0) {
                        str = finiteToString(x, true);
                    }
                    else {
                        checkInt32(dp, 0, MAX_DIGITS);
                        if (rm === void 0)
                            rm = Ctor.rounding;
                        else
                            checkInt32(rm, 0, 8);
                        x = finalise(new Ctor(x), dp + 1, rm);
                        str = finiteToString(x, true, dp + 1);
                    }
                    return x.isNeg() && !x.isZero() ? '-' + str : str;
                };
                P.toFixed = function (dp, rm) {
                    var str, y, x = this, Ctor = x.constructor;
                    if (dp === void 0) {
                        str = finiteToString(x);
                    }
                    else {
                        checkInt32(dp, 0, MAX_DIGITS);
                        if (rm === void 0)
                            rm = Ctor.rounding;
                        else
                            checkInt32(rm, 0, 8);
                        y = finalise(new Ctor(x), dp + x.e + 1, rm);
                        str = finiteToString(y, false, dp + y.e + 1);
                    }
                    return x.isNeg() && !x.isZero() ? '-' + str : str;
                };
                P.toFraction = function (maxD) {
                    var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r, x = this, xd = x.d, Ctor = x.constructor;
                    if (!xd)
                        return new Ctor(x);
                    n1 = d0 = new Ctor(1);
                    d1 = n0 = new Ctor(0);
                    d = new Ctor(d1);
                    e = d.e = getPrecision(xd) - x.e - 1;
                    k = e % LOG_BASE;
                    d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);
                    if (maxD == null) {
                        maxD = e > 0 ? d : n1;
                    }
                    else {
                        n = new Ctor(maxD);
                        if (!n.isInt() || n.lt(n1))
                            throw Error(invalidArgument + n);
                        maxD = n.gt(d) ? (e > 0 ? d : n1) : n;
                    }
                    external = false;
                    n = new Ctor(digitsToString(xd));
                    pr = Ctor.precision;
                    Ctor.precision = e = xd.length * LOG_BASE * 2;
                    for (;;) {
                        q = divide(n, d, 0, 1, 1);
                        d2 = d0.plus(q.times(d1));
                        if (d2.cmp(maxD) == 1)
                            break;
                        d0 = d1;
                        d1 = d2;
                        d2 = n1;
                        n1 = n0.plus(q.times(d2));
                        n0 = d2;
                        d2 = d;
                        d = n.minus(q.times(d2));
                        n = d2;
                    }
                    d2 = divide(maxD.minus(d0), d1, 0, 1, 1);
                    n0 = n0.plus(d2.times(n1));
                    d0 = d0.plus(d2.times(d1));
                    n0.s = n1.s = x.s;
                    r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1
                        ? [n1, d1] : [n0, d0];
                    Ctor.precision = pr;
                    external = true;
                    return r;
                };
                P.toHexadecimal = P.toHex = function (sd, rm) {
                    return toStringBinary(this, 16, sd, rm);
                };
                P.toNearest = function (y, rm) {
                    var x = this, Ctor = x.constructor;
                    x = new Ctor(x);
                    if (y == null) {
                        if (!x.d)
                            return x;
                        y = new Ctor(1);
                        rm = Ctor.rounding;
                    }
                    else {
                        y = new Ctor(y);
                        if (rm !== void 0)
                            checkInt32(rm, 0, 8);
                        if (!x.d)
                            return y.s ? x : y;
                        if (!y.d) {
                            if (y.s)
                                y.s = x.s;
                            return y;
                        }
                    }
                    if (y.d[0]) {
                        external = false;
                        if (rm < 4)
                            rm = [4, 5, 7, 8][rm];
                        x = divide(x, y, 0, rm, 1).times(y);
                        external = true;
                        finalise(x);
                    }
                    else {
                        y.s = x.s;
                        x = y;
                    }
                    return x;
                };
                P.toNumber = function () {
                    return +this;
                };
                P.toOctal = function (sd, rm) {
                    return toStringBinary(this, 8, sd, rm);
                };
                P.toPower = P.pow = function (y) {
                    var e, k, pr, r, rm, s, x = this, Ctor = x.constructor, yn = +(y = new Ctor(y));
                    if (!x.d || !y.d || !x.d[0] || !y.d[0])
                        return new Ctor(mathpow(+x, yn));
                    x = new Ctor(x);
                    if (x.eq(1))
                        return x;
                    pr = Ctor.precision;
                    rm = Ctor.rounding;
                    if (y.eq(1))
                        return finalise(x, pr, rm);
                    e = mathfloor(y.e / LOG_BASE);
                    if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {
                        r = intPow(Ctor, x, k, pr);
                        return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);
                    }
                    s = x.s;
                    if (s < 0) {
                        if (e < y.d.length - 1)
                            return new Ctor(NaN);
                        if ((y.d[e] & 1) == 0)
                            s = 1;
                        if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {
                            x.s = s;
                            return x;
                        }
                    }
                    k = mathpow(+x, yn);
                    e = k == 0 || !isFinite(k)
                        ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))
                        : new Ctor(k + '').e;
                    if (e > Ctor.maxE + 1 || e < Ctor.minE - 1)
                        return new Ctor(e > 0 ? s / 0 : 0);
                    external = false;
                    Ctor.rounding = x.s = 1;
                    k = Math.min(12, (e + '').length);
                    r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);
                    if (r.d) {
                        r = finalise(r, pr + 5, 1);
                        if (checkRoundingDigits(r.d, pr, rm)) {
                            e = pr + 10;
                            r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);
                            if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {
                                r = finalise(r, pr + 1, 0);
                            }
                        }
                    }
                    r.s = s;
                    external = true;
                    Ctor.rounding = rm;
                    return finalise(r, pr, rm);
                };
                P.toPrecision = function (sd, rm) {
                    var str, x = this, Ctor = x.constructor;
                    if (sd === void 0) {
                        str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
                    }
                    else {
                        checkInt32(sd, 1, MAX_DIGITS);
                        if (rm === void 0)
                            rm = Ctor.rounding;
                        else
                            checkInt32(rm, 0, 8);
                        x = finalise(new Ctor(x), sd, rm);
                        str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);
                    }
                    return x.isNeg() && !x.isZero() ? '-' + str : str;
                };
                P.toSignificantDigits = P.toSD = function (sd, rm) {
                    var x = this, Ctor = x.constructor;
                    if (sd === void 0) {
                        sd = Ctor.precision;
                        rm = Ctor.rounding;
                    }
                    else {
                        checkInt32(sd, 1, MAX_DIGITS);
                        if (rm === void 0)
                            rm = Ctor.rounding;
                        else
                            checkInt32(rm, 0, 8);
                    }
                    return finalise(new Ctor(x), sd, rm);
                };
                P.toString = function () {
                    var x = this, Ctor = x.constructor, str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
                    return x.isNeg() && !x.isZero() ? '-' + str : str;
                };
                P.truncated = P.trunc = function () {
                    return finalise(new this.constructor(this), this.e + 1, 1);
                };
                P.valueOf = P.toJSON = function () {
                    var x = this, Ctor = x.constructor, str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
                    return x.isNeg() ? '-' + str : str;
                };
                function digitsToString(d) {
                    var i, k, ws, indexOfLastWord = d.length - 1, str = '', w = d[0];
                    if (indexOfLastWord > 0) {
                        str += w;
                        for (i = 1; i < indexOfLastWord; i++) {
                            ws = d[i] + '';
                            k = LOG_BASE - ws.length;
                            if (k)
                                str += getZeroString(k);
                            str += ws;
                        }
                        w = d[i];
                        ws = w + '';
                        k = LOG_BASE - ws.length;
                        if (k)
                            str += getZeroString(k);
                    }
                    else if (w === 0) {
                        return '0';
                    }
                    for (; w % 10 === 0;)
                        w /= 10;
                    return str + w;
                }
                function checkInt32(i, min, max) {
                    if (i !== ~~i || i < min || i > max) {
                        throw Error(invalidArgument + i);
                    }
                }
                function checkRoundingDigits(d, i, rm, repeating) {
                    var di, k, r, rd;
                    for (k = d[0]; k >= 10; k /= 10)
                        --i;
                    if (--i < 0) {
                        i += LOG_BASE;
                        di = 0;
                    }
                    else {
                        di = Math.ceil((i + 1) / LOG_BASE);
                        i %= LOG_BASE;
                    }
                    k = mathpow(10, LOG_BASE - i);
                    rd = d[di] % k | 0;
                    if (repeating == null) {
                        if (i < 3) {
                            if (i == 0)
                                rd = rd / 100 | 0;
                            else if (i == 1)
                                rd = rd / 10 | 0;
                            r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;
                        }
                        else {
                            r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&
                                (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||
                                (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;
                        }
                    }
                    else {
                        if (i < 4) {
                            if (i == 0)
                                rd = rd / 1000 | 0;
                            else if (i == 1)
                                rd = rd / 100 | 0;
                            else if (i == 2)
                                rd = rd / 10 | 0;
                            r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;
                        }
                        else {
                            r = ((repeating || rm < 4) && rd + 1 == k ||
                                (!repeating && rm > 3) && rd + 1 == k / 2) &&
                                (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;
                        }
                    }
                    return r;
                }
                function convertBase(str, baseIn, baseOut) {
                    var j, arr = [0], arrL, i = 0, strL = str.length;
                    for (; i < strL;) {
                        for (arrL = arr.length; arrL--;)
                            arr[arrL] *= baseIn;
                        arr[0] += NUMERALS.indexOf(str.charAt(i++));
                        for (j = 0; j < arr.length; j++) {
                            if (arr[j] > baseOut - 1) {
                                if (arr[j + 1] === void 0)
                                    arr[j + 1] = 0;
                                arr[j + 1] += arr[j] / baseOut | 0;
                                arr[j] %= baseOut;
                            }
                        }
                    }
                    return arr.reverse();
                }
                function cosine(Ctor, x) {
                    var k, y, len = x.d.length;
                    if (len < 32) {
                        k = Math.ceil(len / 3);
                        y = Math.pow(4, -k).toString();
                    }
                    else {
                        k = 16;
                        y = '2.3283064365386962890625e-10';
                    }
                    Ctor.precision += k;
                    x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));
                    for (var i = k; i--;) {
                        var cos2x = x.times(x);
                        x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);
                    }
                    Ctor.precision -= k;
                    return x;
                }
                var divide = (function () {
                    function multiplyInteger(x, k, base) {
                        var temp, carry = 0, i = x.length;
                        for (x = x.slice(); i--;) {
                            temp = x[i] * k + carry;
                            x[i] = temp % base | 0;
                            carry = temp / base | 0;
                        }
                        if (carry)
                            x.unshift(carry);
                        return x;
                    }
                    function compare(a, b, aL, bL) {
                        var i, r;
                        if (aL != bL) {
                            r = aL > bL ? 1 : -1;
                        }
                        else {
                            for (i = r = 0; i < aL; i++) {
                                if (a[i] != b[i]) {
                                    r = a[i] > b[i] ? 1 : -1;
                                    break;
                                }
                            }
                        }
                        return r;
                    }
                    function subtract(a, b, aL, base) {
                        var i = 0;
                        for (; aL--;) {
                            a[aL] -= i;
                            i = a[aL] < b[aL] ? 1 : 0;
                            a[aL] = i * base + a[aL] - b[aL];
                        }
                        for (; !a[0] && a.length > 1;)
                            a.shift();
                    }
                    return function (x, y, pr, rm, dp, base) {
                        var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0, yL, yz, Ctor = x.constructor, sign = x.s == y.s ? 1 : -1, xd = x.d, yd = y.d;
                        if (!xd || !xd[0] || !yd || !yd[0]) {
                            return new Ctor(!x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :
                                xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);
                        }
                        if (base) {
                            logBase = 1;
                            e = x.e - y.e;
                        }
                        else {
                            base = BASE;
                            logBase = LOG_BASE;
                            e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);
                        }
                        yL = yd.length;
                        xL = xd.length;
                        q = new Ctor(sign);
                        qd = q.d = [];
                        for (i = 0; yd[i] == (xd[i] || 0); i++)
                            ;
                        if (yd[i] > (xd[i] || 0))
                            e--;
                        if (pr == null) {
                            sd = pr = Ctor.precision;
                            rm = Ctor.rounding;
                        }
                        else if (dp) {
                            sd = pr + (x.e - y.e) + 1;
                        }
                        else {
                            sd = pr;
                        }
                        if (sd < 0) {
                            qd.push(1);
                            more = true;
                        }
                        else {
                            sd = sd / logBase + 2 | 0;
                            i = 0;
                            if (yL == 1) {
                                k = 0;
                                yd = yd[0];
                                sd++;
                                for (; (i < xL || k) && sd--; i++) {
                                    t = k * base + (xd[i] || 0);
                                    qd[i] = t / yd | 0;
                                    k = t % yd | 0;
                                }
                                more = k || i < xL;
                            }
                            else {
                                k = base / (yd[0] + 1) | 0;
                                if (k > 1) {
                                    yd = multiplyInteger(yd, k, base);
                                    xd = multiplyInteger(xd, k, base);
                                    yL = yd.length;
                                    xL = xd.length;
                                }
                                xi = yL;
                                rem = xd.slice(0, yL);
                                remL = rem.length;
                                for (; remL < yL;)
                                    rem[remL++] = 0;
                                yz = yd.slice();
                                yz.unshift(0);
                                yd0 = yd[0];
                                if (yd[1] >= base / 2)
                                    ++yd0;
                                do {
                                    k = 0;
                                    cmp = compare(yd, rem, yL, remL);
                                    if (cmp < 0) {
                                        rem0 = rem[0];
                                        if (yL != remL)
                                            rem0 = rem0 * base + (rem[1] || 0);
                                        k = rem0 / yd0 | 0;
                                        if (k > 1) {
                                            if (k >= base)
                                                k = base - 1;
                                            prod = multiplyInteger(yd, k, base);
                                            prodL = prod.length;
                                            remL = rem.length;
                                            cmp = compare(prod, rem, prodL, remL);
                                            if (cmp == 1) {
                                                k--;
                                                subtract(prod, yL < prodL ? yz : yd, prodL, base);
                                            }
                                        }
                                        else {
                                            if (k == 0)
                                                cmp = k = 1;
                                            prod = yd.slice();
                                        }
                                        prodL = prod.length;
                                        if (prodL < remL)
                                            prod.unshift(0);
                                        subtract(rem, prod, remL, base);
                                        if (cmp == -1) {
                                            remL = rem.length;
                                            cmp = compare(yd, rem, yL, remL);
                                            if (cmp < 1) {
                                                k++;
                                                subtract(rem, yL < remL ? yz : yd, remL, base);
                                            }
                                        }
                                        remL = rem.length;
                                    }
                                    else if (cmp === 0) {
                                        k++;
                                        rem = [0];
                                    }
                                    qd[i++] = k;
                                    if (cmp && rem[0]) {
                                        rem[remL++] = xd[xi] || 0;
                                    }
                                    else {
                                        rem = [xd[xi]];
                                        remL = 1;
                                    }
                                } while ((xi++ < xL || rem[0] !== void 0) && sd--);
                                more = rem[0] !== void 0;
                            }
                            if (!qd[0])
                                qd.shift();
                        }
                        if (logBase == 1) {
                            q.e = e;
                            inexact = more;
                        }
                        else {
                            for (i = 1, k = qd[0]; k >= 10; k /= 10)
                                i++;
                            q.e = i + e * logBase - 1;
                            finalise(q, dp ? pr + q.e + 1 : pr, rm, more);
                        }
                        return q;
                    };
                })();
                function finalise(x, sd, rm, isTruncated) {
                    var digits, i, j, k, rd, roundUp, w, xd, xdi, Ctor = x.constructor;
                    out: if (sd != null) {
                        xd = x.d;
                        if (!xd)
                            return x;
                        for (digits = 1, k = xd[0]; k >= 10; k /= 10)
                            digits++;
                        i = sd - digits;
                        if (i < 0) {
                            i += LOG_BASE;
                            j = sd;
                            w = xd[xdi = 0];
                            rd = w / mathpow(10, digits - j - 1) % 10 | 0;
                        }
                        else {
                            xdi = Math.ceil((i + 1) / LOG_BASE);
                            k = xd.length;
                            if (xdi >= k) {
                                if (isTruncated) {
                                    for (; k++ <= xdi;)
                                        xd.push(0);
                                    w = rd = 0;
                                    digits = 1;
                                    i %= LOG_BASE;
                                    j = i - LOG_BASE + 1;
                                }
                                else {
                                    break out;
                                }
                            }
                            else {
                                w = k = xd[xdi];
                                for (digits = 1; k >= 10; k /= 10)
                                    digits++;
                                i %= LOG_BASE;
                                j = i - LOG_BASE + digits;
                                rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;
                            }
                        }
                        isTruncated = isTruncated || sd < 0 ||
                            xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));
                        roundUp = rm < 4
                            ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
                            : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&
                                ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||
                                rm == (x.s < 0 ? 8 : 7));
                        if (sd < 1 || !xd[0]) {
                            xd.length = 0;
                            if (roundUp) {
                                sd -= x.e + 1;
                                xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);
                                x.e = -sd || 0;
                            }
                            else {
                                xd[0] = x.e = 0;
                            }
                            return x;
                        }
                        if (i == 0) {
                            xd.length = xdi;
                            k = 1;
                            xdi--;
                        }
                        else {
                            xd.length = xdi + 1;
                            k = mathpow(10, LOG_BASE - i);
                            xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;
                        }
                        if (roundUp) {
                            for (;;) {
                                if (xdi == 0) {
                                    for (i = 1, j = xd[0]; j >= 10; j /= 10)
                                        i++;
                                    j = xd[0] += k;
                                    for (k = 1; j >= 10; j /= 10)
                                        k++;
                                    if (i != k) {
                                        x.e++;
                                        if (xd[0] == BASE)
                                            xd[0] = 1;
                                    }
                                    break;
                                }
                                else {
                                    xd[xdi] += k;
                                    if (xd[xdi] != BASE)
                                        break;
                                    xd[xdi--] = 0;
                                    k = 1;
                                }
                            }
                        }
                        for (i = xd.length; xd[--i] === 0;)
                            xd.pop();
                    }
                    if (external) {
                        if (x.e > Ctor.maxE) {
                            x.d = null;
                            x.e = NaN;
                        }
                        else if (x.e < Ctor.minE) {
                            x.e = 0;
                            x.d = [0];
                        }
                    }
                    return x;
                }
                function finiteToString(x, isExp, sd) {
                    if (!x.isFinite())
                        return nonFiniteToString(x);
                    var k, e = x.e, str = digitsToString(x.d), len = str.length;
                    if (isExp) {
                        if (sd && (k = sd - len) > 0) {
                            str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);
                        }
                        else if (len > 1) {
                            str = str.charAt(0) + '.' + str.slice(1);
                        }
                        str = str + (x.e < 0 ? 'e' : 'e+') + x.e;
                    }
                    else if (e < 0) {
                        str = '0.' + getZeroString(-e - 1) + str;
                        if (sd && (k = sd - len) > 0)
                            str += getZeroString(k);
                    }
                    else if (e >= len) {
                        str += getZeroString(e + 1 - len);
                        if (sd && (k = sd - e - 1) > 0)
                            str = str + '.' + getZeroString(k);
                    }
                    else {
                        if ((k = e + 1) < len)
                            str = str.slice(0, k) + '.' + str.slice(k);
                        if (sd && (k = sd - len) > 0) {
                            if (e + 1 === len)
                                str += '.';
                            str += getZeroString(k);
                        }
                    }
                    return str;
                }
                function getBase10Exponent(digits, e) {
                    var w = digits[0];
                    for (e *= LOG_BASE; w >= 10; w /= 10)
                        e++;
                    return e;
                }
                function getLn10(Ctor, sd, pr) {
                    if (sd > LN10_PRECISION) {
                        external = true;
                        if (pr)
                            Ctor.precision = pr;
                        throw Error(precisionLimitExceeded);
                    }
                    return finalise(new Ctor(LN10), sd, 1, true);
                }
                function getPi(Ctor, sd, rm) {
                    if (sd > PI_PRECISION)
                        throw Error(precisionLimitExceeded);
                    return finalise(new Ctor(PI), sd, rm, true);
                }
                function getPrecision(digits) {
                    var w = digits.length - 1, len = w * LOG_BASE + 1;
                    w = digits[w];
                    if (w) {
                        for (; w % 10 == 0; w /= 10)
                            len--;
                        for (w = digits[0]; w >= 10; w /= 10)
                            len++;
                    }
                    return len;
                }
                function getZeroString(k) {
                    var zs = '';
                    for (; k--;)
                        zs += '0';
                    return zs;
                }
                function intPow(Ctor, x, n, pr) {
                    var isTruncated, r = new Ctor(1), k = Math.ceil(pr / LOG_BASE + 4);
                    external = false;
                    for (;;) {
                        if (n % 2) {
                            r = r.times(x);
                            if (truncate(r.d, k))
                                isTruncated = true;
                        }
                        n = mathfloor(n / 2);
                        if (n === 0) {
                            n = r.d.length - 1;
                            if (isTruncated && r.d[n] === 0)
                                ++r.d[n];
                            break;
                        }
                        x = x.times(x);
                        truncate(x.d, k);
                    }
                    external = true;
                    return r;
                }
                function isOdd(n) {
                    return n.d[n.d.length - 1] & 1;
                }
                function maxOrMin(Ctor, args, ltgt) {
                    var y, x = new Ctor(args[0]), i = 0;
                    for (; ++i < args.length;) {
                        y = new Ctor(args[i]);
                        if (!y.s) {
                            x = y;
                            break;
                        }
                        else if (x[ltgt](y)) {
                            x = y;
                        }
                    }
                    return x;
                }
                function naturalExponential(x, sd) {
                    var denominator, guard, j, pow, sum, t, wpr, rep = 0, i = 0, k = 0, Ctor = x.constructor, rm = Ctor.rounding, pr = Ctor.precision;
                    if (!x.d || !x.d[0] || x.e > 17) {
                        return new Ctor(x.d
                            ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0
                            : x.s ? x.s < 0 ? 0 : x : 0 / 0);
                    }
                    if (sd == null) {
                        external = false;
                        wpr = pr;
                    }
                    else {
                        wpr = sd;
                    }
                    t = new Ctor(0.03125);
                    while (x.e > -2) {
                        x = x.times(t);
                        k += 5;
                    }
                    guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;
                    wpr += guard;
                    denominator = pow = sum = new Ctor(1);
                    Ctor.precision = wpr;
                    for (;;) {
                        pow = finalise(pow.times(x), wpr, 1);
                        denominator = denominator.times(++i);
                        t = sum.plus(divide(pow, denominator, wpr, 1));
                        if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
                            j = k;
                            while (j--)
                                sum = finalise(sum.times(sum), wpr, 1);
                            if (sd == null) {
                                if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {
                                    Ctor.precision = wpr += 10;
                                    denominator = pow = t = new Ctor(1);
                                    i = 0;
                                    rep++;
                                }
                                else {
                                    return finalise(sum, Ctor.precision = pr, rm, external = true);
                                }
                            }
                            else {
                                Ctor.precision = pr;
                                return sum;
                            }
                        }
                        sum = t;
                    }
                }
                function naturalLogarithm(y, sd) {
                    var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2, n = 1, guard = 10, x = y, xd = x.d, Ctor = x.constructor, rm = Ctor.rounding, pr = Ctor.precision;
                    if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {
                        return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);
                    }
                    if (sd == null) {
                        external = false;
                        wpr = pr;
                    }
                    else {
                        wpr = sd;
                    }
                    Ctor.precision = wpr += guard;
                    c = digitsToString(xd);
                    c0 = c.charAt(0);
                    if (Math.abs(e = x.e) < 1.5e15) {
                        while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {
                            x = x.times(y);
                            c = digitsToString(x.d);
                            c0 = c.charAt(0);
                            n++;
                        }
                        e = x.e;
                        if (c0 > 1) {
                            x = new Ctor('0.' + c);
                            e++;
                        }
                        else {
                            x = new Ctor(c0 + '.' + c.slice(1));
                        }
                    }
                    else {
                        t = getLn10(Ctor, wpr + 2, pr).times(e + '');
                        x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);
                        Ctor.precision = pr;
                        return sd == null ? finalise(x, pr, rm, external = true) : x;
                    }
                    x1 = x;
                    sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);
                    x2 = finalise(x.times(x), wpr, 1);
                    denominator = 3;
                    for (;;) {
                        numerator = finalise(numerator.times(x2), wpr, 1);
                        t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));
                        if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
                            sum = sum.times(2);
                            if (e !== 0)
                                sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));
                            sum = divide(sum, new Ctor(n), wpr, 1);
                            if (sd == null) {
                                if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {
                                    Ctor.precision = wpr += guard;
                                    t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);
                                    x2 = finalise(x.times(x), wpr, 1);
                                    denominator = rep = 1;
                                }
                                else {
                                    return finalise(sum, Ctor.precision = pr, rm, external = true);
                                }
                            }
                            else {
                                Ctor.precision = pr;
                                return sum;
                            }
                        }
                        sum = t;
                        denominator += 2;
                    }
                }
                function nonFiniteToString(x) {
                    return String(x.s * x.s / 0);
                }
                function parseDecimal(x, str) {
                    var e, i, len;
                    if ((e = str.indexOf('.')) > -1)
                        str = str.replace('.', '');
                    if ((i = str.search(/e/i)) > 0) {
                        if (e < 0)
                            e = i;
                        e += +str.slice(i + 1);
                        str = str.substring(0, i);
                    }
                    else if (e < 0) {
                        e = str.length;
                    }
                    for (i = 0; str.charCodeAt(i) === 48; i++)
                        ;
                    for (len = str.length; str.charCodeAt(len - 1) === 48; --len)
                        ;
                    str = str.slice(i, len);
                    if (str) {
                        len -= i;
                        x.e = e = e - i - 1;
                        x.d = [];
                        i = (e + 1) % LOG_BASE;
                        if (e < 0)
                            i += LOG_BASE;
                        if (i < len) {
                            if (i)
                                x.d.push(+str.slice(0, i));
                            for (len -= LOG_BASE; i < len;)
                                x.d.push(+str.slice(i, i += LOG_BASE));
                            str = str.slice(i);
                            i = LOG_BASE - str.length;
                        }
                        else {
                            i -= len;
                        }
                        for (; i--;)
                            str += '0';
                        x.d.push(+str);
                        if (external) {
                            if (x.e > x.constructor.maxE) {
                                x.d = null;
                                x.e = NaN;
                            }
                            else if (x.e < x.constructor.minE) {
                                x.e = 0;
                                x.d = [0];
                            }
                        }
                    }
                    else {
                        x.e = 0;
                        x.d = [0];
                    }
                    return x;
                }
                function parseOther(x, str) {
                    var base, Ctor, divisor, i, isFloat, len, p, xd, xe;
                    if (str === 'Infinity' || str === 'NaN') {
                        if (!+str)
                            x.s = NaN;
                        x.e = NaN;
                        x.d = null;
                        return x;
                    }
                    if (isHex.test(str)) {
                        base = 16;
                        str = str.toLowerCase();
                    }
                    else if (isBinary.test(str)) {
                        base = 2;
                    }
                    else if (isOctal.test(str)) {
                        base = 8;
                    }
                    else {
                        throw Error(invalidArgument + str);
                    }
                    i = str.search(/p/i);
                    if (i > 0) {
                        p = +str.slice(i + 1);
                        str = str.substring(2, i);
                    }
                    else {
                        str = str.slice(2);
                    }
                    i = str.indexOf('.');
                    isFloat = i >= 0;
                    Ctor = x.constructor;
                    if (isFloat) {
                        str = str.replace('.', '');
                        len = str.length;
                        i = len - i;
                        divisor = intPow(Ctor, new Ctor(base), i, i * 2);
                    }
                    xd = convertBase(str, base, BASE);
                    xe = xd.length - 1;
                    for (i = xe; xd[i] === 0; --i)
                        xd.pop();
                    if (i < 0)
                        return new Ctor(x.s * 0);
                    x.e = getBase10Exponent(xd, xe);
                    x.d = xd;
                    external = false;
                    if (isFloat)
                        x = divide(x, divisor, len * 4);
                    if (p)
                        x = x.times(Math.abs(p) < 54 ? Math.pow(2, p) : Decimal.pow(2, p));
                    external = true;
                    return x;
                }
                function sine(Ctor, x) {
                    var k, len = x.d.length;
                    if (len < 3)
                        return taylorSeries(Ctor, 2, x, x);
                    k = 1.4 * Math.sqrt(len);
                    k = k > 16 ? 16 : k | 0;
                    x = x.times(Math.pow(5, -k));
                    x = taylorSeries(Ctor, 2, x, x);
                    var sin2_x, d5 = new Ctor(5), d16 = new Ctor(16), d20 = new Ctor(20);
                    for (; k--;) {
                        sin2_x = x.times(x);
                        x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));
                    }
                    return x;
                }
                function taylorSeries(Ctor, n, x, y, isHyperbolic) {
                    var j, t, u, x2, i = 1, pr = Ctor.precision, k = Math.ceil(pr / LOG_BASE);
                    external = false;
                    x2 = x.times(x);
                    u = new Ctor(y);
                    for (;;) {
                        t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);
                        u = isHyperbolic ? y.plus(t) : y.minus(t);
                        y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);
                        t = u.plus(y);
                        if (t.d[k] !== void 0) {
                            for (j = k; t.d[j] === u.d[j] && j--;)
                                ;
                            if (j == -1)
                                break;
                        }
                        j = u;
                        u = y;
                        y = t;
                        t = j;
                        i++;
                    }
                    external = true;
                    t.d.length = k + 1;
                    return t;
                }
                function toLessThanHalfPi(Ctor, x) {
                    var t, isNeg = x.s < 0, pi = getPi(Ctor, Ctor.precision, 1), halfPi = pi.times(0.5);
                    x = x.abs();
                    if (x.lte(halfPi)) {
                        quadrant = isNeg ? 4 : 1;
                        return x;
                    }
                    t = x.divToInt(pi);
                    if (t.isZero()) {
                        quadrant = isNeg ? 3 : 2;
                    }
                    else {
                        x = x.minus(t.times(pi));
                        if (x.lte(halfPi)) {
                            quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);
                            return x;
                        }
                        quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);
                    }
                    return x.minus(pi).abs();
                }
                function toStringBinary(x, baseOut, sd, rm) {
                    var base, e, i, k, len, roundUp, str, xd, y, Ctor = x.constructor, isExp = sd !== void 0;
                    if (isExp) {
                        checkInt32(sd, 1, MAX_DIGITS);
                        if (rm === void 0)
                            rm = Ctor.rounding;
                        else
                            checkInt32(rm, 0, 8);
                    }
                    else {
                        sd = Ctor.precision;
                        rm = Ctor.rounding;
                    }
                    if (!x.isFinite()) {
                        str = nonFiniteToString(x);
                    }
                    else {
                        str = finiteToString(x);
                        i = str.indexOf('.');
                        if (isExp) {
                            base = 2;
                            if (baseOut == 16) {
                                sd = sd * 4 - 3;
                            }
                            else if (baseOut == 8) {
                                sd = sd * 3 - 2;
                            }
                        }
                        else {
                            base = baseOut;
                        }
                        if (i >= 0) {
                            str = str.replace('.', '');
                            y = new Ctor(1);
                            y.e = str.length - i;
                            y.d = convertBase(finiteToString(y), 10, base);
                            y.e = y.d.length;
                        }
                        xd = convertBase(str, 10, base);
                        e = len = xd.length;
                        for (; xd[--len] == 0;)
                            xd.pop();
                        if (!xd[0]) {
                            str = isExp ? '0p+0' : '0';
                        }
                        else {
                            if (i < 0) {
                                e--;
                            }
                            else {
                                x = new Ctor(x);
                                x.d = xd;
                                x.e = e;
                                x = divide(x, y, sd, rm, 0, base);
                                xd = x.d;
                                e = x.e;
                                roundUp = inexact;
                            }
                            i = xd[sd];
                            k = base / 2;
                            roundUp = roundUp || xd[sd + 1] !== void 0;
                            roundUp = rm < 4
                                ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))
                                : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||
                                    rm === (x.s < 0 ? 8 : 7));
                            xd.length = sd;
                            if (roundUp) {
                                for (; ++xd[--sd] > base - 1;) {
                                    xd[sd] = 0;
                                    if (!sd) {
                                        ++e;
                                        xd.unshift(1);
                                    }
                                }
                            }
                            for (len = xd.length; !xd[len - 1]; --len)
                                ;
                            for (i = 0, str = ''; i < len; i++)
                                str += NUMERALS.charAt(xd[i]);
                            if (isExp) {
                                if (len > 1) {
                                    if (baseOut == 16 || baseOut == 8) {
                                        i = baseOut == 16 ? 4 : 3;
                                        for (--len; len % i; len++)
                                            str += '0';
                                        xd = convertBase(str, base, baseOut);
                                        for (len = xd.length; !xd[len - 1]; --len)
                                            ;
                                        for (i = 1, str = '1.'; i < len; i++)
                                            str += NUMERALS.charAt(xd[i]);
                                    }
                                    else {
                                        str = str.charAt(0) + '.' + str.slice(1);
                                    }
                                }
                                str = str + (e < 0 ? 'p' : 'p+') + e;
                            }
                            else if (e < 0) {
                                for (; ++e;)
                                    str = '0' + str;
                                str = '0.' + str;
                            }
                            else {
                                if (++e > len)
                                    for (e -= len; e--;)
                                        str += '0';
                                else if (e < len)
                                    str = str.slice(0, e) + '.' + str.slice(e);
                            }
                        }
                        str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;
                    }
                    return x.s < 0 ? '-' + str : str;
                }
                function truncate(arr, len) {
                    if (arr.length > len) {
                        arr.length = len;
                        return true;
                    }
                }
                function abs(x) {
                    return new this(x).abs();
                }
                function acos(x) {
                    return new this(x).acos();
                }
                function acosh(x) {
                    return new this(x).acosh();
                }
                function add(x, y) {
                    return new this(x).plus(y);
                }
                function asin(x) {
                    return new this(x).asin();
                }
                function asinh(x) {
                    return new this(x).asinh();
                }
                function atan(x) {
                    return new this(x).atan();
                }
                function atanh(x) {
                    return new this(x).atanh();
                }
                function atan2(y, x) {
                    y = new this(y);
                    x = new this(x);
                    var r, pr = this.precision, rm = this.rounding, wpr = pr + 4;
                    if (!y.s || !x.s) {
                        r = new this(NaN);
                    }
                    else if (!y.d && !x.d) {
                        r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);
                        r.s = y.s;
                    }
                    else if (!x.d || y.isZero()) {
                        r = x.s < 0 ? getPi(this, pr, rm) : new this(0);
                        r.s = y.s;
                    }
                    else if (!y.d || x.isZero()) {
                        r = getPi(this, wpr, 1).times(0.5);
                        r.s = y.s;
                    }
                    else if (x.s < 0) {
                        this.precision = wpr;
                        this.rounding = 1;
                        r = this.atan(divide(y, x, wpr, 1));
                        x = getPi(this, wpr, 1);
                        this.precision = pr;
                        this.rounding = rm;
                        r = y.s < 0 ? r.minus(x) : r.plus(x);
                    }
                    else {
                        r = this.atan(divide(y, x, wpr, 1));
                    }
                    return r;
                }
                function cbrt(x) {
                    return new this(x).cbrt();
                }
                function ceil(x) {
                    return finalise(x = new this(x), x.e + 1, 2);
                }
                function config(obj) {
                    if (!obj || typeof obj !== 'object')
                        throw Error(decimalError + 'Object expected');
                    var i, p, v, ps = [
                        'precision', 1, MAX_DIGITS,
                        'rounding', 0, 8,
                        'toExpNeg', -EXP_LIMIT, 0,
                        'toExpPos', 0, EXP_LIMIT,
                        'maxE', 0, EXP_LIMIT,
                        'minE', -EXP_LIMIT, 0,
                        'modulo', 0, 9
                    ];
                    for (i = 0; i < ps.length; i += 3) {
                        if ((v = obj[p = ps[i]]) !== void 0) {
                            if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2])
                                this[p] = v;
                            else
                                throw Error(invalidArgument + p + ': ' + v);
                        }
                    }
                    if ((v = obj[p = 'crypto']) !== void 0) {
                        if (v === true || v === false || v === 0 || v === 1) {
                            if (v) {
                                if (typeof crypto != 'undefined' && crypto &&
                                    (crypto.getRandomValues || crypto.randomBytes)) {
                                    this[p] = true;
                                }
                                else {
                                    throw Error(cryptoUnavailable);
                                }
                            }
                            else {
                                this[p] = false;
                            }
                        }
                        else {
                            throw Error(invalidArgument + p + ': ' + v);
                        }
                    }
                    return this;
                }
                function cos(x) {
                    return new this(x).cos();
                }
                function cosh(x) {
                    return new this(x).cosh();
                }
                function clone(obj) {
                    var i, p, ps;
                    function Decimal(v) {
                        var e, i, t, x = this;
                        if (!(x instanceof Decimal))
                            return new Decimal(v);
                        x.constructor = Decimal;
                        if (v instanceof Decimal) {
                            x.s = v.s;
                            x.e = v.e;
                            x.d = (v = v.d) ? v.slice() : v;
                            return;
                        }
                        t = typeof v;
                        if (t === 'number') {
                            if (v === 0) {
                                x.s = 1 / v < 0 ? -1 : 1;
                                x.e = 0;
                                x.d = [0];
                                return;
                            }
                            if (v < 0) {
                                v = -v;
                                x.s = -1;
                            }
                            else {
                                x.s = 1;
                            }
                            if (v === ~~v && v < 1e7) {
                                for (e = 0, i = v; i >= 10; i /= 10)
                                    e++;
                                x.e = e;
                                x.d = [v];
                                return;
                            }
                            else if (v * 0 !== 0) {
                                if (!v)
                                    x.s = NaN;
                                x.e = NaN;
                                x.d = null;
                                return;
                            }
                            return parseDecimal(x, v.toString());
                        }
                        else if (t !== 'string') {
                            throw Error(invalidArgument + v);
                        }
                        if (v.charCodeAt(0) === 45) {
                            v = v.slice(1);
                            x.s = -1;
                        }
                        else {
                            x.s = 1;
                        }
                        return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);
                    }
                    Decimal.prototype = P;
                    Decimal.ROUND_UP = 0;
                    Decimal.ROUND_DOWN = 1;
                    Decimal.ROUND_CEIL = 2;
                    Decimal.ROUND_FLOOR = 3;
                    Decimal.ROUND_HALF_UP = 4;
                    Decimal.ROUND_HALF_DOWN = 5;
                    Decimal.ROUND_HALF_EVEN = 6;
                    Decimal.ROUND_HALF_CEIL = 7;
                    Decimal.ROUND_HALF_FLOOR = 8;
                    Decimal.EUCLID = 9;
                    Decimal.config = Decimal.set = config;
                    Decimal.clone = clone;
                    Decimal.abs = abs;
                    Decimal.acos = acos;
                    Decimal.acosh = acosh;
                    Decimal.add = add;
                    Decimal.asin = asin;
                    Decimal.asinh = asinh;
                    Decimal.atan = atan;
                    Decimal.atanh = atanh;
                    Decimal.atan2 = atan2;
                    Decimal.cbrt = cbrt;
                    Decimal.ceil = ceil;
                    Decimal.cos = cos;
                    Decimal.cosh = cosh;
                    Decimal.div = div;
                    Decimal.exp = exp;
                    Decimal.floor = floor;
                    Decimal.hypot = hypot;
                    Decimal.ln = ln;
                    Decimal.log = log;
                    Decimal.log10 = log10;
                    Decimal.log2 = log2;
                    Decimal.max = max;
                    Decimal.min = min;
                    Decimal.mod = mod;
                    Decimal.mul = mul;
                    Decimal.pow = pow;
                    Decimal.random = random;
                    Decimal.round = round;
                    Decimal.sign = sign;
                    Decimal.sin = sin;
                    Decimal.sinh = sinh;
                    Decimal.sqrt = sqrt;
                    Decimal.sub = sub;
                    Decimal.tan = tan;
                    Decimal.tanh = tanh;
                    Decimal.trunc = trunc;
                    if (obj === void 0)
                        obj = {};
                    if (obj) {
                        ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];
                        for (i = 0; i < ps.length;)
                            if (!obj.hasOwnProperty(p = ps[i++]))
                                obj[p] = this[p];
                    }
                    Decimal.config(obj);
                    return Decimal;
                }
                function div(x, y) {
                    return new this(x).div(y);
                }
                function exp(x) {
                    return new this(x).exp();
                }
                function floor(x) {
                    return finalise(x = new this(x), x.e + 1, 3);
                }
                function hypot() {
                    var i, n, t = new this(0);
                    external = false;
                    for (i = 0; i < arguments.length;) {
                        n = new this(arguments[i++]);
                        if (!n.d) {
                            if (n.s) {
                                external = true;
                                return new this(1 / 0);
                            }
                            t = n;
                        }
                        else if (t.d) {
                            t = t.plus(n.times(n));
                        }
                    }
                    external = true;
                    return t.sqrt();
                }
                function ln(x) {
                    return new this(x).ln();
                }
                function log(x, y) {
                    return new this(x).log(y);
                }
                function log2(x) {
                    return new this(x).log(2);
                }
                function log10(x) {
                    return new this(x).log(10);
                }
                function max() {
                    return maxOrMin(this, arguments, 'lt');
                }
                function min() {
                    return maxOrMin(this, arguments, 'gt');
                }
                function mod(x, y) {
                    return new this(x).mod(y);
                }
                function mul(x, y) {
                    return new this(x).mul(y);
                }
                function pow(x, y) {
                    return new this(x).pow(y);
                }
                function random(sd) {
                    var d, e, k, n, i = 0, r = new this(1), rd = [];
                    if (sd === void 0)
                        sd = this.precision;
                    else
                        checkInt32(sd, 1, MAX_DIGITS);
                    k = Math.ceil(sd / LOG_BASE);
                    if (!this.crypto) {
                        for (; i < k;)
                            rd[i++] = Math.random() * 1e7 | 0;
                    }
                    else if (crypto.getRandomValues) {
                        d = crypto.getRandomValues(new Uint32Array(k));
                        for (; i < k;) {
                            n = d[i];
                            if (n >= 4.29e9) {
                                d[i] = crypto.getRandomValues(new Uint32Array(1))[0];
                            }
                            else {
                                rd[i++] = n % 1e7;
                            }
                        }
                    }
                    else if (crypto.randomBytes) {
                        d = crypto.randomBytes(k *= 4);
                        for (; i < k;) {
                            n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);
                            if (n >= 2.14e9) {
                                crypto.randomBytes(4).copy(d, i);
                            }
                            else {
                                rd.push(n % 1e7);
                                i += 4;
                            }
                        }
                        i = k / 4;
                    }
                    else {
                        throw Error(cryptoUnavailable);
                    }
                    k = rd[--i];
                    sd %= LOG_BASE;
                    if (k && sd) {
                        n = mathpow(10, LOG_BASE - sd);
                        rd[i] = (k / n | 0) * n;
                    }
                    for (; rd[i] === 0; i--)
                        rd.pop();
                    if (i < 0) {
                        e = 0;
                        rd = [0];
                    }
                    else {
                        e = -1;
                        for (; rd[0] === 0; e -= LOG_BASE)
                            rd.shift();
                        for (k = 1, n = rd[0]; n >= 10; n /= 10)
                            k++;
                        if (k < LOG_BASE)
                            e -= LOG_BASE - k;
                    }
                    r.e = e;
                    r.d = rd;
                    return r;
                }
                function round(x) {
                    return finalise(x = new this(x), x.e + 1, this.rounding);
                }
                function sign(x) {
                    x = new this(x);
                    return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;
                }
                function sin(x) {
                    return new this(x).sin();
                }
                function sinh(x) {
                    return new this(x).sinh();
                }
                function sqrt(x) {
                    return new this(x).sqrt();
                }
                function sub(x, y) {
                    return new this(x).sub(y);
                }
                function tan(x) {
                    return new this(x).tan();
                }
                function tanh(x) {
                    return new this(x).tanh();
                }
                function trunc(x) {
                    return finalise(x = new this(x), x.e + 1, 1);
                }
                Decimal = clone(Decimal);
                LN10 = new Decimal(LN10);
                PI = new Decimal(PI);
                if (true) {
                    !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
                        return Decimal;
                    }.call(exports, __webpack_require__, exports, module),
                        __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
                }
                else if (typeof module != 'undefined' && module.exports) {
                    module.exports = Decimal['default'] = Decimal.Decimal = Decimal;
                }
                else {
                    if (!globalScope) {
                        globalScope = typeof self != 'undefined' && self && self.self == self
                            ? self : Function('return this')();
                    }
                    noConflict = globalScope.Decimal;
                    Decimal.noConflict = function () {
                        globalScope.Decimal = noConflict;
                        return Decimal;
                    };
                    globalScope.Decimal = Decimal;
                }
            })(this);
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            function factory(type, config, load, typed) {
                var bignumber = typed('bignumber', {
                    '': function () {
                        return new type.BigNumber(0);
                    },
                    'number': function (x) {
                        return new type.BigNumber(x + '');
                    },
                    'string': function (x) {
                        return new type.BigNumber(x);
                    },
                    'BigNumber': function (x) {
                        return x;
                    },
                    'Fraction': function (x) {
                        return new type.BigNumber(x.n).div(x.d);
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, bignumber);
                    }
                });
                bignumber.toTex = {
                    0: '0',
                    1: '\\left(${args[0]}\\right)'
                };
                return bignumber;
            }
            exports.name = 'bignumber';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            function factory(type, config, load, typed) {
                var bool = typed('bool', {
                    '': function () {
                        return false;
                    },
                    'boolean': function (x) {
                        return x;
                    },
                    'number': function (x) {
                        return !!x;
                    },
                    'BigNumber': function (x) {
                        return !x.isZero();
                    },
                    'string': function (x) {
                        var lcase = x.toLowerCase();
                        if (lcase === 'true') {
                            return true;
                        }
                        else if (lcase === 'false') {
                            return false;
                        }
                        var num = Number(x);
                        if (x != '' && !isNaN(num)) {
                            return !!num;
                        }
                        throw new Error('Cannot convert "' + x + '" to a boolean');
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, bool);
                    }
                });
                return bool;
            }
            exports.name = 'boolean';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            module.exports = [
                __webpack_require__(164),
                __webpack_require__(166)
            ];
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var format = __webpack_require__(9).format;
            var lazy = __webpack_require__(5).lazy;
            function factory(type, config, load, typed, math) {
                function Chain(value) {
                    if (!(this instanceof Chain)) {
                        throw new SyntaxError('Constructor must be called with the new operator');
                    }
                    if (type.isChain(value)) {
                        this.value = value.value;
                    }
                    else {
                        this.value = value;
                    }
                }
                Chain.prototype.type = 'Chain';
                Chain.prototype.isChain = true;
                Chain.prototype.done = function () {
                    return this.value;
                };
                Chain.prototype.valueOf = function () {
                    return this.value;
                };
                Chain.prototype.toString = function () {
                    return format(this.value);
                };
                function createProxy(name, fn) {
                    if (typeof fn === 'function') {
                        Chain.prototype[name] = chainify(fn);
                    }
                }
                function createLazyProxy(name, resolver) {
                    lazy(Chain.prototype, name, function outerResolver() {
                        var fn = resolver();
                        if (typeof fn === 'function') {
                            return chainify(fn);
                        }
                        return undefined;
                    });
                }
                function chainify(fn) {
                    return function () {
                        var args = [this.value];
                        for (var i = 0; i < arguments.length; i++) {
                            args[i + 1] = arguments[i];
                        }
                        return new Chain(fn.apply(fn, args));
                    };
                }
                Chain.createProxy = function (arg0, arg1) {
                    if (typeof arg0 === 'string') {
                        createProxy(arg0, arg1);
                    }
                    else {
                        for (var prop in arg0) {
                            if (arg0.hasOwnProperty(prop)) {
                                createProxy(prop, arg0[prop]);
                            }
                        }
                    }
                };
                Chain.createProxy(math);
                math.on('import', function (name, resolver, path) {
                    if (path === undefined) {
                        createLazyProxy(name, resolver);
                    }
                });
                return Chain;
            }
            exports.name = 'Chain';
            exports.path = 'type';
            exports.factory = factory;
            exports.math = true;
            exports.lazy = false;
        }),
        (function (module, exports) {
            exports.format = function (value, options) {
                if (typeof options === 'function') {
                    return options(value);
                }
                if (!value.isFinite()) {
                    return value.isNaN() ? 'NaN' : (value.gt(0) ? 'Infinity' : '-Infinity');
                }
                var notation = 'auto';
                var precision = undefined;
                if (options !== undefined) {
                    if (options.notation) {
                        notation = options.notation;
                    }
                    if (typeof options === 'number') {
                        precision = options;
                    }
                    else if (options.precision) {
                        precision = options.precision;
                    }
                }
                switch (notation) {
                    case 'fixed':
                        return exports.toFixed(value, precision);
                    case 'exponential':
                        return exports.toExponential(value, precision);
                    case 'auto':
                        var lower = 1e-3;
                        var upper = 1e5;
                        if (options && options.exponential) {
                            if (options.exponential.lower !== undefined) {
                                lower = options.exponential.lower;
                            }
                            if (options.exponential.upper !== undefined) {
                                upper = options.exponential.upper;
                            }
                        }
                        var oldConfig = {
                            toExpNeg: value.constructor.toExpNeg,
                            toExpPos: value.constructor.toExpPos
                        };
                        value.constructor.config({
                            toExpNeg: Math.round(Math.log(lower) / Math.LN10),
                            toExpPos: Math.round(Math.log(upper) / Math.LN10)
                        });
                        if (value.isZero())
                            return '0';
                        var str;
                        var abs = value.abs();
                        if (abs.gte(lower) && abs.lt(upper)) {
                            str = value.toSignificantDigits(precision).toFixed();
                        }
                        else {
                            str = exports.toExponential(value, precision);
                        }
                        return str.replace(/((\.\d*?)(0+))($|e)/, function () {
                            var digits = arguments[2];
                            var e = arguments[4];
                            return (digits !== '.') ? digits + e : e;
                        });
                    default:
                        throw new Error('Unknown notation "' + notation + '". ' +
                            'Choose "auto", "exponential", or "fixed".');
                }
            };
            exports.toExponential = function (value, precision) {
                if (precision !== undefined) {
                    return value.toExponential(precision - 1);
                }
                else {
                    return value.toExponential();
                }
            };
            exports.toFixed = function (value, precision) {
                return value.toFixed(precision || 0);
            };
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load, typed) {
                return typed('chain', {
                    '': function () {
                        return new type.Chain();
                    },
                    'any': function (value) {
                        return new type.Chain(value);
                    }
                });
            }
            exports.name = 'chain';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            module.exports = [
                __webpack_require__(91),
                __webpack_require__(169)
            ];
        }),
        (function (module, exports, __webpack_require__) {
            var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
            (function (root) {
                'use strict';
                var P = { 're': 0, 'im': 0 };
                var cosh = function (x) {
                    return (Math.exp(x) + Math.exp(-x)) * 0.5;
                };
                var sinh = function (x) {
                    return (Math.exp(x) - Math.exp(-x)) * 0.5;
                };
                var hypot = function (x, y) {
                    var a = Math.abs(x);
                    var b = Math.abs(y);
                    if (a < 3000 && b < 3000) {
                        return Math.sqrt(a * a + b * b);
                    }
                    if (a < b) {
                        a = b;
                        b = x / y;
                    }
                    else {
                        b = y / x;
                    }
                    return a * Math.sqrt(1 + b * b);
                };
                var parser_exit = function () {
                    throw SyntaxError('Invalid Param');
                };
                function logHypot(a, b) {
                    var _a = Math.abs(a);
                    var _b = Math.abs(b);
                    if (a === 0) {
                        return Math.log(_b);
                    }
                    if (b === 0) {
                        return Math.log(_a);
                    }
                    if (_a < 3000 && _b < 3000) {
                        return Math.log(a * a + b * b) * 0.5;
                    }
                    return Math.log(a / Math.cos(Math.atan2(b, a)));
                }
                var parse = function (a, b) {
                    if (a === undefined || a === null) {
                        P['re'] =
                            P['im'] = 0;
                    }
                    else if (b !== undefined) {
                        P['re'] = a;
                        P['im'] = b;
                    }
                    else
                        switch (typeof a) {
                            case 'object':
                                if ('im' in a && 're' in a) {
                                    P['re'] = a['re'];
                                    P['im'] = a['im'];
                                }
                                else if ('abs' in a && 'arg' in a) {
                                    P['re'] = a['abs'] * Math.cos(a['arg']);
                                    P['im'] = a['abs'] * Math.sin(a['arg']);
                                }
                                else if ('r' in a && 'phi' in a) {
                                    P['re'] = a['r'] * Math.cos(a['phi']);
                                    P['im'] = a['r'] * Math.sin(a['phi']);
                                }
                                else if (a.length === 2) {
                                    P['re'] = a[0];
                                    P['im'] = a[1];
                                }
                                else {
                                    parser_exit();
                                }
                                break;
                            case 'string':
                                P['im'] =
                                    P['re'] = 0;
                                var tokens = a.match(/\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g);
                                var plus = 1;
                                var minus = 0;
                                if (tokens === null) {
                                    parser_exit();
                                }
                                for (var i = 0; i < tokens.length; i++) {
                                    var c = tokens[i];
                                    if (c === ' ' || c === '\t' || c === '\n') {
                                    }
                                    else if (c === '+') {
                                        plus++;
                                    }
                                    else if (c === '-') {
                                        minus++;
                                    }
                                    else if (c === 'i' || c === 'I') {
                                        if (plus + minus === 0) {
                                            parser_exit();
                                        }
                                        if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1])) {
                                            P['im'] += parseFloat((minus % 2 ? '-' : '') + tokens[i + 1]);
                                            i++;
                                        }
                                        else {
                                            P['im'] += parseFloat((minus % 2 ? '-' : '') + '1');
                                        }
                                        plus = minus = 0;
                                    }
                                    else {
                                        if (plus + minus === 0 || isNaN(c)) {
                                            parser_exit();
                                        }
                                        if (tokens[i + 1] === 'i' || tokens[i + 1] === 'I') {
                                            P['im'] += parseFloat((minus % 2 ? '-' : '') + c);
                                            i++;
                                        }
                                        else {
                                            P['re'] += parseFloat((minus % 2 ? '-' : '') + c);
                                        }
                                        plus = minus = 0;
                                    }
                                }
                                if (plus + minus > 0) {
                                    parser_exit();
                                }
                                break;
                            case 'number':
                                P['im'] = 0;
                                P['re'] = a;
                                break;
                            default:
                                parser_exit();
                        }
                    if (isNaN(P['re']) || isNaN(P['im'])) {
                    }
                };
                function Complex(a, b) {
                    if (!(this instanceof Complex)) {
                        return new Complex(a, b);
                    }
                    parse(a, b);
                    this['re'] = P['re'];
                    this['im'] = P['im'];
                }
                Complex.prototype = {
                    're': 0,
                    'im': 0,
                    'sign': function () {
                        var abs = this['abs']();
                        return new Complex(this['re'] / abs, this['im'] / abs);
                    },
                    'add': function (a, b) {
                        parse(a, b);
                        return new Complex(this['re'] + P['re'], this['im'] + P['im']);
                    },
                    'sub': function (a, b) {
                        parse(a, b);
                        return new Complex(this['re'] - P['re'], this['im'] - P['im']);
                    },
                    'mul': function (a, b) {
                        parse(a, b);
                        if (P['im'] === 0 && this['im'] === 0) {
                            return new Complex(this['re'] * P['re'], 0);
                        }
                        return new Complex(this['re'] * P['re'] - this['im'] * P['im'], this['re'] * P['im'] + this['im'] * P['re']);
                    },
                    'div': function (a, b) {
                        parse(a, b);
                        a = this['re'];
                        b = this['im'];
                        var c = P['re'];
                        var d = P['im'];
                        var t, x;
                        if (0 === d) {
                            if (0 === c) {
                                return new Complex((a !== 0) ? (a / 0) : 0, (b !== 0) ? (b / 0) : 0);
                            }
                            else {
                                return new Complex(a / c, b / c);
                            }
                        }
                        if (Math.abs(c) < Math.abs(d)) {
                            x = c / d;
                            t = c * x + d;
                            return new Complex((a * x + b) / t, (b * x - a) / t);
                        }
                        else {
                            x = d / c;
                            t = d * x + c;
                            return new Complex((a + b * x) / t, (b - a * x) / t);
                        }
                    },
                    'pow': function (a, b) {
                        parse(a, b);
                        a = this['re'];
                        b = this['im'];
                        if (a === 0 && b === 0) {
                            return Complex['ZERO'];
                        }
                        if (P['im'] === 0) {
                            if (b === 0 && a >= 0) {
                                return new Complex(Math.pow(a, P['re']), 0);
                            }
                            else if (a === 0) {
                                switch ((P['re'] % 4 + 4) % 4) {
                                    case 0:
                                        return new Complex(Math.pow(b, P['re']), 0);
                                    case 1:
                                        return new Complex(0, Math.pow(b, P['re']));
                                    case 2:
                                        return new Complex(-Math.pow(b, P['re']), 0);
                                    case 3:
                                        return new Complex(0, -Math.pow(b, P['re']));
                                }
                            }
                        }
                        var arg = Math.atan2(b, a);
                        var loh = logHypot(a, b);
                        a = Math.exp(P['re'] * loh - P['im'] * arg);
                        b = P['im'] * loh + P['re'] * arg;
                        return new Complex(a * Math.cos(b), a * Math.sin(b));
                    },
                    'sqrt': function () {
                        var a = this['re'];
                        var b = this['im'];
                        var r = this['abs']();
                        var re, im;
                        if (a >= 0) {
                            if (b === 0) {
                                return new Complex(Math.sqrt(a), 0);
                            }
                            re = 0.5 * Math.sqrt(2.0 * (r + a));
                        }
                        else {
                            re = Math.abs(b) / Math.sqrt(2 * (r - a));
                        }
                        if (a <= 0) {
                            im = 0.5 * Math.sqrt(2.0 * (r - a));
                        }
                        else {
                            im = Math.abs(b) / Math.sqrt(2 * (r + a));
                        }
                        return new Complex(re, b < 0 ? -im : im);
                    },
                    'exp': function () {
                        var tmp = Math.exp(this['re']);
                        if (this['im'] === 0) {
                        }
                        return new Complex(tmp * Math.cos(this['im']), tmp * Math.sin(this['im']));
                    },
                    'log': function () {
                        var a = this['re'];
                        var b = this['im'];
                        if (b === 0 && a > 0) {
                        }
                        return new Complex(logHypot(a, b), Math.atan2(b, a));
                    },
                    'abs': function () {
                        return hypot(this['re'], this['im']);
                    },
                    'arg': function () {
                        return Math.atan2(this['im'], this['re']);
                    },
                    'sin': function () {
                        var a = this['re'];
                        var b = this['im'];
                        return new Complex(Math.sin(a) * cosh(b), Math.cos(a) * sinh(b));
                    },
                    'cos': function () {
                        var a = this['re'];
                        var b = this['im'];
                        return new Complex(Math.cos(a) * cosh(b), -Math.sin(a) * sinh(b));
                    },
                    'tan': function () {
                        var a = 2 * this['re'];
                        var b = 2 * this['im'];
                        var d = Math.cos(a) + cosh(b);
                        return new Complex(Math.sin(a) / d, sinh(b) / d);
                    },
                    'cot': function () {
                        var a = 2 * this['re'];
                        var b = 2 * this['im'];
                        var d = Math.cos(a) - cosh(b);
                        return new Complex(-Math.sin(a) / d, sinh(b) / d);
                    },
                    'sec': function () {
                        var a = this['re'];
                        var b = this['im'];
                        var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);
                        return new Complex(Math.cos(a) * cosh(b) / d, Math.sin(a) * sinh(b) / d);
                    },
                    'csc': function () {
                        var a = this['re'];
                        var b = this['im'];
                        var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a);
                        return new Complex(Math.sin(a) * cosh(b) / d, -Math.cos(a) * sinh(b) / d);
                    },
                    'asin': function () {
                        var a = this['re'];
                        var b = this['im'];
                        var t1 = new Complex(b * b - a * a + 1, -2 * a * b)['sqrt']();
                        var t2 = new Complex(t1['re'] - b, t1['im'] + a)['log']();
                        return new Complex(t2['im'], -t2['re']);
                    },
                    'acos': function () {
                        var a = this['re'];
                        var b = this['im'];
                        var t1 = new Complex(b * b - a * a + 1, -2 * a * b)['sqrt']();
                        var t2 = new Complex(t1['re'] - b, t1['im'] + a)['log']();
                        return new Complex(Math.PI / 2 - t2['im'], t2['re']);
                    },
                    'atan': function () {
                        var a = this['re'];
                        var b = this['im'];
                        if (a === 0) {
                            if (b === 1) {
                                return new Complex(0, Infinity);
                            }
                            if (b === -1) {
                                return new Complex(0, -Infinity);
                            }
                        }
                        var d = a * a + (1.0 - b) * (1.0 - b);
                        var t1 = new Complex((1 - b * b - a * a) / d, -2 * a / d).log();
                        return new Complex(-0.5 * t1['im'], 0.5 * t1['re']);
                    },
                    'acot': function () {
                        var a = this['re'];
                        var b = this['im'];
                        if (b === 0) {
                            return new Complex(Math.atan2(1, a), 0);
                        }
                        var d = a * a + b * b;
                        return (d !== 0)
                            ? new Complex(a / d, -b / d).atan()
                            : new Complex((a !== 0) ? a / 0 : 0, (b !== 0) ? -b / 0 : 0).atan();
                    },
                    'asec': function () {
                        var a = this['re'];
                        var b = this['im'];
                        if (a === 0 && b === 0) {
                            return new Complex(0, Infinity);
                        }
                        var d = a * a + b * b;
                        return (d !== 0)
                            ? new Complex(a / d, -b / d).acos()
                            : new Complex((a !== 0) ? a / 0 : 0, (b !== 0) ? -b / 0 : 0).acos();
                    },
                    'acsc': function () {
                        var a = this['re'];
                        var b = this['im'];
                        if (a === 0 && b === 0) {
                            return new Complex(Math.PI / 2, Infinity);
                        }
                        var d = a * a + b * b;
                        return (d !== 0)
                            ? new Complex(a / d, -b / d).asin()
                            : new Complex((a !== 0) ? a / 0 : 0, (b !== 0) ? -b / 0 : 0).asin();
                    },
                    'sinh': function () {
                        var a = this['re'];
                        var b = this['im'];
                        return new Complex(sinh(a) * Math.cos(b), cosh(a) * Math.sin(b));
                    },
                    'cosh': function () {
                        var a = this['re'];
                        var b = this['im'];
                        return new Complex(cosh(a) * Math.cos(b), sinh(a) * Math.sin(b));
                    },
                    'tanh': function () {
                        var a = 2 * this['re'];
                        var b = 2 * this['im'];
                        var d = cosh(a) + Math.cos(b);
                        return new Complex(sinh(a) / d, Math.sin(b) / d);
                    },
                    'coth': function () {
                        var a = 2 * this['re'];
                        var b = 2 * this['im'];
                        var d = cosh(a) - Math.cos(b);
                        return new Complex(sinh(a) / d, -Math.sin(b) / d);
                    },
                    'csch': function () {
                        var a = this['re'];
                        var b = this['im'];
                        var d = Math.cos(2 * b) - cosh(2 * a);
                        return new Complex(-2 * sinh(a) * Math.cos(b) / d, 2 * cosh(a) * Math.sin(b) / d);
                    },
                    'sech': function () {
                        var a = this['re'];
                        var b = this['im'];
                        var d = Math.cos(2 * b) + cosh(2 * a);
                        return new Complex(2 * cosh(a) * Math.cos(b) / d, -2 * sinh(a) * Math.sin(b) / d);
                    },
                    'asinh': function () {
                        var tmp = this['im'];
                        this['im'] = -this['re'];
                        this['re'] = tmp;
                        var res = this['asin']();
                        this['re'] = -this['im'];
                        this['im'] = tmp;
                        tmp = res['re'];
                        res['re'] = -res['im'];
                        res['im'] = tmp;
                        return res;
                    },
                    'acosh': function () {
                        var tmp;
                        var res = this['acos']();
                        if (res['im'] <= 0) {
                            tmp = res['re'];
                            res['re'] = -res['im'];
                            res['im'] = tmp;
                        }
                        else {
                            tmp = res['im'];
                            res['im'] = -res['re'];
                            res['re'] = tmp;
                        }
                        return res;
                    },
                    'atanh': function () {
                        var a = this['re'];
                        var b = this['im'];
                        var noIM = a > 1 && b === 0;
                        var oneMinus = 1 - a;
                        var onePlus = 1 + a;
                        var d = oneMinus * oneMinus + b * b;
                        var x = (d !== 0)
                            ? new Complex((onePlus * oneMinus - b * b) / d, (b * oneMinus + onePlus * b) / d)
                            : new Complex((a !== -1) ? (a / 0) : 0, (b !== 0) ? (b / 0) : 0);
                        var temp = x['re'];
                        x['re'] = logHypot(x['re'], x['im']) / 2;
                        x['im'] = Math.atan2(x['im'], temp) / 2;
                        if (noIM) {
                            x['im'] = -x['im'];
                        }
                        return x;
                    },
                    'acoth': function () {
                        var a = this['re'];
                        var b = this['im'];
                        if (a === 0 && b === 0) {
                            return new Complex(0, Math.PI / 2);
                        }
                        var d = a * a + b * b;
                        return (d !== 0)
                            ? new Complex(a / d, -b / d).atanh()
                            : new Complex((a !== 0) ? a / 0 : 0, (b !== 0) ? -b / 0 : 0).atanh();
                    },
                    'acsch': function () {
                        var a = this['re'];
                        var b = this['im'];
                        if (b === 0) {
                            return new Complex((a !== 0)
                                ? Math.log(a + Math.sqrt(a * a + 1))
                                : Infinity, 0);
                        }
                        var d = a * a + b * b;
                        return (d !== 0)
                            ? new Complex(a / d, -b / d).asinh()
                            : new Complex((a !== 0) ? a / 0 : 0, (b !== 0) ? -b / 0 : 0).asinh();
                    },
                    'asech': function () {
                        var a = this['re'];
                        var b = this['im'];
                        if (a === 0 && b === 0) {
                            return new Complex(Infinity, 0);
                        }
                        var d = a * a + b * b;
                        return (d !== 0)
                            ? new Complex(a / d, -b / d).acosh()
                            : new Complex((a !== 0) ? a / 0 : 0, (b !== 0) ? -b / 0 : 0).acosh();
                    },
                    'inverse': function () {
                        var a = this['re'];
                        var b = this['im'];
                        var d = a * a + b * b;
                        return new Complex(a !== 0 ? a / d : 0, b !== 0 ? -b / d : 0);
                    },
                    'conjugate': function () {
                        return new Complex(this['re'], -this['im']);
                    },
                    'neg': function () {
                        return new Complex(-this['re'], -this['im']);
                    },
                    'ceil': function (places) {
                        places = Math.pow(10, places || 0);
                        return new Complex(Math.ceil(this['re'] * places) / places, Math.ceil(this['im'] * places) / places);
                    },
                    'floor': function (places) {
                        places = Math.pow(10, places || 0);
                        return new Complex(Math.floor(this['re'] * places) / places, Math.floor(this['im'] * places) / places);
                    },
                    'round': function (places) {
                        places = Math.pow(10, places || 0);
                        return new Complex(Math.round(this['re'] * places) / places, Math.round(this['im'] * places) / places);
                    },
                    'equals': function (a, b) {
                        parse(a, b);
                        return Math.abs(P['re'] - this['re']) <= Complex['EPSILON'] &&
                            Math.abs(P['im'] - this['im']) <= Complex['EPSILON'];
                    },
                    'clone': function () {
                        return new Complex(this['re'], this['im']);
                    },
                    'toString': function () {
                        var a = this['re'];
                        var b = this['im'];
                        var ret = '';
                        if (isNaN(a) || isNaN(b)) {
                            return 'NaN';
                        }
                        if (a !== 0) {
                            ret += a;
                        }
                        if (b !== 0) {
                            if (a !== 0) {
                                ret += b < 0 ? ' - ' : ' + ';
                            }
                            else if (b < 0) {
                                ret += '-';
                            }
                            b = Math.abs(b);
                            if (1 !== b) {
                                ret += b;
                            }
                            ret += 'i';
                        }
                        if (!ret)
                            return '0';
                        return ret;
                    },
                    'toVector': function () {
                        return [this['re'], this['im']];
                    },
                    'valueOf': function () {
                        if (this['im'] === 0) {
                            return this['re'];
                        }
                        return null;
                    },
                    'isNaN': function () {
                        return isNaN(this['re']) || isNaN(this['im']);
                    },
                    'isFinite': function () {
                        return isFinite(this['re']) && isFinite(this['im']);
                    }
                };
                Complex['ZERO'] = new Complex(0, 0);
                Complex['ONE'] = new Complex(1, 0);
                Complex['I'] = new Complex(0, 1);
                Complex['PI'] = new Complex(Math.PI, 0);
                Complex['E'] = new Complex(Math.E, 0);
                Complex['EPSILON'] = 1e-16;
                if (true) {
                    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
                        return Complex;
                    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
                        __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
                }
                else if (typeof exports === 'object') {
                    module['exports'] = Complex;
                }
                else {
                    root['Complex'] = Complex;
                }
            })(this);
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            function factory(type, config, load, typed) {
                var latex = __webpack_require__(4);
                var complex = typed('complex', {
                    '': function () {
                        return type.Complex.ZERO;
                    },
                    'number': function (x) {
                        return new type.Complex(x, 0);
                    },
                    'number, number': function (re, im) {
                        return new type.Complex(re, im);
                    },
                    'BigNumber, BigNumber': function (re, im) {
                        return new type.Complex(re.toNumber(), im.toNumber());
                    },
                    'Complex': function (x) {
                        return x.clone();
                    },
                    'string': function (x) {
                        return type.Complex(x);
                    },
                    'Object': function (x) {
                        if ('re' in x && 'im' in x) {
                            return new type.Complex(x.re, x.im);
                        }
                        if ('r' in x && 'phi' in x) {
                            return new type.Complex(x);
                        }
                        throw new Error('Expected object with either properties re and im, or properties r and phi.');
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, complex);
                    }
                });
                complex.toTex = {
                    0: '0',
                    1: '\\left(${args[0]}\\right)',
                    2: '\\left(\\left(${args[0]}\\right)+'
                        + latex.symbols['i'] + '\\cdot\\left(${args[1]}\\right)\\right)'
                };
                return complex;
            }
            exports.name = 'complex';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            module.exports = [
                __webpack_require__(171),
                __webpack_require__(92)
            ];
        }),
        (function (module, exports, __webpack_require__) {
            var Fraction = __webpack_require__(172);
            Fraction.prototype.type = 'Fraction';
            Fraction.prototype.isFraction = true;
            Fraction.prototype.toJSON = function () {
                return {
                    mathjs: 'Fraction',
                    n: this.s * this.n,
                    d: this.d
                };
            };
            Fraction.fromJSON = function (json) {
                return new Fraction(json);
            };
            function factory(type, config, load, typed) {
                return Fraction;
            }
            exports.name = 'Fraction';
            exports.path = 'type';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
            (function (root) {
                "use strict";
                var MAX_CYCLE_LEN = 2000;
                var P = {
                    "s": 1,
                    "n": 0,
                    "d": 1
                };
                function createError(name) {
                    var errorConstructor = function () {
                        var temp = Error.apply(this, arguments);
                        temp.name = this.name = name;
                        this.stack = temp.stack;
                        this.message = temp.message;
                    };
                    var IntermediateInheritor = function () { };
                    IntermediateInheritor.prototype = Error.prototype;
                    errorConstructor.prototype = new IntermediateInheritor();
                    return errorConstructor;
                }
                var DivisionByZero = Fraction['DivisionByZero'] = createError('DivisionByZero');
                var InvalidParameter = Fraction['InvalidParameter'] = createError('InvalidParameter');
                function assign(n, s) {
                    if (isNaN(n = parseInt(n, 10))) {
                        throwInvalidParam();
                    }
                    return n * s;
                }
                function throwInvalidParam() {
                    throw new InvalidParameter();
                }
                var parse = function (p1, p2) {
                    var n = 0, d = 1, s = 1;
                    var v = 0, w = 0, x = 0, y = 1, z = 1;
                    var A = 0, B = 1;
                    var C = 1, D = 1;
                    var N = 10000000;
                    var M;
                    if (p1 === undefined || p1 === null) {
                    }
                    else if (p2 !== undefined) {
                        n = p1;
                        d = p2;
                        s = n * d;
                    }
                    else
                        switch (typeof p1) {
                            case "object":
                                {
                                    if ("d" in p1 && "n" in p1) {
                                        n = p1["n"];
                                        d = p1["d"];
                                        if ("s" in p1)
                                            n *= p1["s"];
                                    }
                                    else if (0 in p1) {
                                        n = p1[0];
                                        if (1 in p1)
                                            d = p1[1];
                                    }
                                    else {
                                        throwInvalidParam();
                                    }
                                    s = n * d;
                                    break;
                                }
                            case "number":
                                {
                                    if (p1 < 0) {
                                        s = p1;
                                        p1 = -p1;
                                    }
                                    if (p1 % 1 === 0) {
                                        n = p1;
                                    }
                                    else if (p1 > 0) {
                                        if (p1 >= 1) {
                                            z = Math.pow(10, Math.floor(1 + Math.log(p1) / Math.LN10));
                                            p1 /= z;
                                        }
                                        while (B <= N && D <= N) {
                                            M = (A + C) / (B + D);
                                            if (p1 === M) {
                                                if (B + D <= N) {
                                                    n = A + C;
                                                    d = B + D;
                                                }
                                                else if (D > B) {
                                                    n = C;
                                                    d = D;
                                                }
                                                else {
                                                    n = A;
                                                    d = B;
                                                }
                                                break;
                                            }
                                            else {
                                                if (p1 > M) {
                                                    A += C;
                                                    B += D;
                                                }
                                                else {
                                                    C += A;
                                                    D += B;
                                                }
                                                if (B > N) {
                                                    n = C;
                                                    d = D;
                                                }
                                                else {
                                                    n = A;
                                                    d = B;
                                                }
                                            }
                                        }
                                        n *= z;
                                    }
                                    else if (isNaN(p1) || isNaN(p2)) {
                                        d = n = NaN;
                                    }
                                    break;
                                }
                            case "string":
                                {
                                    B = p1.match(/\d+|./g);
                                    if (B[A] === '-') {
                                        s = -1;
                                        A++;
                                    }
                                    else if (B[A] === '+') {
                                        A++;
                                    }
                                    if (B.length === A + 1) {
                                        w = assign(B[A++], s);
                                    }
                                    else if (B[A + 1] === '.' || B[A] === '.') {
                                        if (B[A] !== '.') {
                                            v = assign(B[A++], s);
                                        }
                                        A++;
                                        if (A + 1 === B.length || B[A + 1] === '(' && B[A + 3] === ')' || B[A + 1] === "'" && B[A + 3] === "'") {
                                            w = assign(B[A], s);
                                            y = Math.pow(10, B[A].length);
                                            A++;
                                        }
                                        if (B[A] === '(' && B[A + 2] === ')' || B[A] === "'" && B[A + 2] === "'") {
                                            x = assign(B[A + 1], s);
                                            z = Math.pow(10, B[A + 1].length) - 1;
                                            A += 3;
                                        }
                                    }
                                    else if (B[A + 1] === '/' || B[A + 1] === ':') {
                                        w = assign(B[A], s);
                                        y = assign(B[A + 2], 1);
                                        A += 3;
                                    }
                                    else if (B[A + 3] === '/' && B[A + 1] === ' ') {
                                        v = assign(B[A], s);
                                        w = assign(B[A + 2], s);
                                        y = assign(B[A + 4], 1);
                                        A += 5;
                                    }
                                    if (B.length <= A) {
                                        d = y * z;
                                        s =
                                            n = x + d * v + z * w;
                                        break;
                                    }
                                }
                            default:
                                throwInvalidParam();
                        }
                    if (d === 0) {
                        throw new DivisionByZero();
                    }
                    P["s"] = s < 0 ? -1 : 1;
                    P["n"] = Math.abs(n);
                    P["d"] = Math.abs(d);
                };
                var modpow = function (b, e, m) {
                    for (var r = 1; e > 0; b = (b * b) % m, e >>= 1) {
                        if (e & 1) {
                            r = (r * b) % m;
                        }
                    }
                    return r;
                };
                var cycleLen = function (n, d) {
                    for (; d % 2 === 0; d /= 2) { }
                    for (; d % 5 === 0; d /= 5) { }
                    if (d === 1)
                        return 0;
                    var rem = 10 % d;
                    for (var t = 1; rem !== 1; t++) {
                        rem = rem * 10 % d;
                        if (t > MAX_CYCLE_LEN)
                            return 0;
                    }
                    return t;
                };
                var cycleStart = function (n, d, len) {
                    var rem1 = 1;
                    var rem2 = modpow(10, len, d);
                    for (var t = 0; t < 300; t++) {
                        if (rem1 === rem2)
                            return t;
                        rem1 = rem1 * 10 % d;
                        rem2 = rem2 * 10 % d;
                    }
                    return 0;
                };
                var gcd = function (a, b) {
                    if (!a)
                        return b;
                    if (!b)
                        return a;
                    while (1) {
                        a %= b;
                        if (!a)
                            return b;
                        b %= a;
                        if (!b)
                            return a;
                    }
                };
                function Fraction(a, b) {
                    if (!(this instanceof Fraction)) {
                        return new Fraction(a, b);
                    }
                    parse(a, b);
                    if (Fraction['REDUCE']) {
                        a = gcd(P["d"], P["n"]);
                    }
                    else {
                        a = 1;
                    }
                    this["s"] = P["s"];
                    this["n"] = P["n"] / a;
                    this["d"] = P["d"] / a;
                }
                Fraction['REDUCE'] = 1;
                Fraction.prototype = {
                    "s": 1,
                    "n": 0,
                    "d": 1,
                    "abs": function () {
                        return new Fraction(this["n"], this["d"]);
                    },
                    "neg": function () {
                        return new Fraction(-this["s"] * this["n"], this["d"]);
                    },
                    "add": function (a, b) {
                        parse(a, b);
                        return new Fraction(this["s"] * this["n"] * P["d"] + P["s"] * this["d"] * P["n"], this["d"] * P["d"]);
                    },
                    "sub": function (a, b) {
                        parse(a, b);
                        return new Fraction(this["s"] * this["n"] * P["d"] - P["s"] * this["d"] * P["n"], this["d"] * P["d"]);
                    },
                    "mul": function (a, b) {
                        parse(a, b);
                        return new Fraction(this["s"] * P["s"] * this["n"] * P["n"], this["d"] * P["d"]);
                    },
                    "div": function (a, b) {
                        parse(a, b);
                        return new Fraction(this["s"] * P["s"] * this["n"] * P["d"], this["d"] * P["n"]);
                    },
                    "clone": function () {
                        return new Fraction(this);
                    },
                    "mod": function (a, b) {
                        if (isNaN(this['n']) || isNaN(this['d'])) {
                            return new Fraction(NaN);
                        }
                        if (a === undefined) {
                            return new Fraction(this["s"] * this["n"] % this["d"], 1);
                        }
                        parse(a, b);
                        if (0 === P["n"] && 0 === this["d"]) {
                            Fraction(0, 0);
                        }
                        return new Fraction((this["s"] * P["d"] * this["n"]) % (P["n"] * this["d"]), P["d"] * this["d"]);
                    },
                    "gcd": function (a, b) {
                        parse(a, b);
                        return new Fraction(gcd(P["n"], this["n"]), P["d"] * this["d"] / gcd(P["d"], this["d"]));
                    },
                    "lcm": function (a, b) {
                        parse(a, b);
                        if (P["n"] === 0 && this["n"] === 0) {
                            return new Fraction;
                        }
                        return new Fraction(P["n"] * this["n"] / gcd(P["n"], this["n"]), gcd(P["d"], this["d"]));
                    },
                    "ceil": function (places) {
                        places = Math.pow(10, places || 0);
                        if (isNaN(this["n"]) || isNaN(this["d"])) {
                            return new Fraction(NaN);
                        }
                        return new Fraction(Math.ceil(places * this["s"] * this["n"] / this["d"]), places);
                    },
                    "floor": function (places) {
                        places = Math.pow(10, places || 0);
                        if (isNaN(this["n"]) || isNaN(this["d"])) {
                            return new Fraction(NaN);
                        }
                        return new Fraction(Math.floor(places * this["s"] * this["n"] / this["d"]), places);
                    },
                    "round": function (places) {
                        places = Math.pow(10, places || 0);
                        if (isNaN(this["n"]) || isNaN(this["d"])) {
                            return new Fraction(NaN);
                        }
                        return new Fraction(Math.round(places * this["s"] * this["n"] / this["d"]), places);
                    },
                    "inverse": function () {
                        return new Fraction(this["s"] * this["d"], this["n"]);
                    },
                    "pow": function (m) {
                        if (m < 0) {
                            return new Fraction(Math.pow(this['s'] * this["d"], -m), Math.pow(this["n"], -m));
                        }
                        else {
                            return new Fraction(Math.pow(this['s'] * this["n"], m), Math.pow(this["d"], m));
                        }
                    },
                    "equals": function (a, b) {
                        parse(a, b);
                        return this["s"] * this["n"] * P["d"] === P["s"] * P["n"] * this["d"];
                    },
                    "compare": function (a, b) {
                        parse(a, b);
                        var t = (this["s"] * this["n"] * P["d"] - P["s"] * P["n"] * this["d"]);
                        return (0 < t) - (t < 0);
                    },
                    "divisible": function (a, b) {
                        parse(a, b);
                        return !(!(P["n"] * this["d"]) || ((this["n"] * P["d"]) % (P["n"] * this["d"])));
                    },
                    'valueOf': function () {
                        return this["s"] * this["n"] / this["d"];
                    },
                    'toFraction': function (excludeWhole) {
                        var whole, str = "";
                        var n = this["n"];
                        var d = this["d"];
                        if (this["s"] < 0) {
                            str += '-';
                        }
                        if (d === 1) {
                            str += n;
                        }
                        else {
                            if (excludeWhole && (whole = Math.floor(n / d)) > 0) {
                                str += whole;
                                str += " ";
                                n %= d;
                            }
                            str += n;
                            str += '/';
                            str += d;
                        }
                        return str;
                    },
                    'toLatex': function (excludeWhole) {
                        var whole, str = "";
                        var n = this["n"];
                        var d = this["d"];
                        if (this["s"] < 0) {
                            str += '-';
                        }
                        if (d === 1) {
                            str += n;
                        }
                        else {
                            if (excludeWhole && (whole = Math.floor(n / d)) > 0) {
                                str += whole;
                                n %= d;
                            }
                            str += "\\frac{";
                            str += n;
                            str += '}{';
                            str += d;
                            str += '}';
                        }
                        return str;
                    },
                    'toContinued': function () {
                        var t;
                        var a = this['n'];
                        var b = this['d'];
                        var res = [];
                        do {
                            res.push(Math.floor(a / b));
                            t = a % b;
                            a = b;
                            b = t;
                        } while (a !== 1);
                        return res;
                    },
                    'toString': function () {
                        var g;
                        var N = this["n"];
                        var D = this["d"];
                        if (isNaN(N) || isNaN(D)) {
                            return "NaN";
                        }
                        if (!Fraction['REDUCE']) {
                            g = gcd(N, D);
                            N /= g;
                            D /= g;
                        }
                        var dec = 15;
                        var cycLen = cycleLen(N, D);
                        var cycOff = cycleStart(N, D, cycLen);
                        var str = this['s'] === -1 ? "-" : "";
                        str += N / D | 0;
                        N %= D;
                        N *= 10;
                        if (N)
                            str += ".";
                        if (cycLen) {
                            for (var i = cycOff; i--;) {
                                str += N / D | 0;
                                N %= D;
                                N *= 10;
                            }
                            str += "(";
                            for (var i = cycLen; i--;) {
                                str += N / D | 0;
                                N %= D;
                                N *= 10;
                            }
                            str += ")";
                        }
                        else {
                            for (var i = dec; N && i--;) {
                                str += N / D | 0;
                                N %= D;
                                N *= 10;
                            }
                        }
                        return str;
                    }
                };
                if (true) {
                    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
                        return Fraction;
                    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
                        __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
                }
                else if (typeof exports === "object") {
                    module["exports"] = Fraction;
                }
                else {
                    root['Fraction'] = Fraction;
                }
            })(this);
        }),
        (function (module, exports, __webpack_require__) {
            module.exports = [
                __webpack_require__(72),
                __webpack_require__(43),
                __webpack_require__(175),
                __webpack_require__(176),
                __webpack_require__(177),
                __webpack_require__(178),
                __webpack_require__(27),
                __webpack_require__(93),
                __webpack_require__(179),
                __webpack_require__(0),
                __webpack_require__(180)
            ];
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            exports.isBoolean = function (value) {
                return typeof value == 'boolean';
            };
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var util = __webpack_require__(25);
            var DimensionError = __webpack_require__(10);
            var array = util.array;
            var object = util.object;
            var string = util.string;
            var number = util.number;
            var isArray = Array.isArray;
            var isNumber = number.isNumber;
            var isInteger = number.isInteger;
            var isString = string.isString;
            var validateIndex = array.validateIndex;
            function factory(type, config, load, typed) {
                var Matrix = load(__webpack_require__(72));
                var equalScalar = load(__webpack_require__(11));
                function SparseMatrix(data, datatype) {
                    if (!(this instanceof SparseMatrix))
                        throw new SyntaxError('Constructor must be called with the new operator');
                    if (datatype && !isString(datatype))
                        throw new Error('Invalid datatype: ' + datatype);
                    if (type.isMatrix(data)) {
                        _createFromMatrix(this, data, datatype);
                    }
                    else if (data && isArray(data.index) && isArray(data.ptr) && isArray(data.size)) {
                        this._values = data.values;
                        this._index = data.index;
                        this._ptr = data.ptr;
                        this._size = data.size;
                        this._datatype = datatype || data.datatype;
                    }
                    else if (isArray(data)) {
                        _createFromArray(this, data, datatype);
                    }
                    else if (data) {
                        throw new TypeError('Unsupported type of data (' + util.types.type(data) + ')');
                    }
                    else {
                        this._values = [];
                        this._index = [];
                        this._ptr = [0];
                        this._size = [0, 0];
                        this._datatype = datatype;
                    }
                }
                var _createFromMatrix = function (matrix, source, datatype) {
                    if (source.type === 'SparseMatrix') {
                        matrix._values = source._values ? object.clone(source._values) : undefined;
                        matrix._index = object.clone(source._index);
                        matrix._ptr = object.clone(source._ptr);
                        matrix._size = object.clone(source._size);
                        matrix._datatype = datatype || source._datatype;
                    }
                    else {
                        _createFromArray(matrix, source.valueOf(), datatype || source._datatype);
                    }
                };
                var _createFromArray = function (matrix, data, datatype) {
                    matrix._values = [];
                    matrix._index = [];
                    matrix._ptr = [];
                    matrix._datatype = datatype;
                    var rows = data.length;
                    var columns = 0;
                    var eq = equalScalar;
                    var zero = 0;
                    if (isString(datatype)) {
                        eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar;
                        zero = typed.convert(0, datatype);
                    }
                    if (rows > 0) {
                        var j = 0;
                        do {
                            matrix._ptr.push(matrix._index.length);
                            for (var i = 0; i < rows; i++) {
                                var row = data[i];
                                if (isArray(row)) {
                                    if (j === 0 && columns < row.length)
                                        columns = row.length;
                                    if (j < row.length) {
                                        var v = row[j];
                                        if (!eq(v, zero)) {
                                            matrix._values.push(v);
                                            matrix._index.push(i);
                                        }
                                    }
                                }
                                else {
                                    if (j === 0 && columns < 1)
                                        columns = 1;
                                    if (!eq(row, zero)) {
                                        matrix._values.push(row);
                                        matrix._index.push(i);
                                    }
                                }
                            }
                            j++;
                        } while (j < columns);
                    }
                    matrix._ptr.push(matrix._index.length);
                    matrix._size = [rows, columns];
                };
                SparseMatrix.prototype = new Matrix();
                SparseMatrix.prototype.type = 'SparseMatrix';
                SparseMatrix.prototype.isSparseMatrix = true;
                SparseMatrix.prototype.storage = function () {
                    return 'sparse';
                };
                SparseMatrix.prototype.datatype = function () {
                    return this._datatype;
                };
                SparseMatrix.prototype.create = function (data, datatype) {
                    return new SparseMatrix(data, datatype);
                };
                SparseMatrix.prototype.density = function () {
                    var rows = this._size[0];
                    var columns = this._size[1];
                    return rows !== 0 && columns !== 0 ? (this._index.length / (rows * columns)) : 0;
                };
                SparseMatrix.prototype.subset = function (index, replacement, defaultValue) {
                    if (!this._values)
                        throw new Error('Cannot invoke subset on a Pattern only matrix');
                    switch (arguments.length) {
                        case 1:
                            return _getsubset(this, index);
                        case 2:
                        case 3:
                            return _setsubset(this, index, replacement, defaultValue);
                        default:
                            throw new SyntaxError('Wrong number of arguments');
                    }
                };
                var _getsubset = function (matrix, idx) {
                    if (!type.isIndex(idx)) {
                        throw new TypeError('Invalid index');
                    }
                    var isScalar = idx.isScalar();
                    if (isScalar) {
                        return matrix.get(idx.min());
                    }
                    var size = idx.size();
                    if (size.length != matrix._size.length) {
                        throw new DimensionError(size.length, matrix._size.length);
                    }
                    var i, ii, k, kk;
                    var min = idx.min();
                    var max = idx.max();
                    for (i = 0, ii = matrix._size.length; i < ii; i++) {
                        validateIndex(min[i], matrix._size[i]);
                        validateIndex(max[i], matrix._size[i]);
                    }
                    var mvalues = matrix._values;
                    var mindex = matrix._index;
                    var mptr = matrix._ptr;
                    var rows = idx.dimension(0);
                    var columns = idx.dimension(1);
                    var w = [];
                    var pv = [];
                    rows.forEach(function (i, r) {
                        pv[i] = r[0];
                        w[i] = true;
                    });
                    var values = mvalues ? [] : undefined;
                    var index = [];
                    var ptr = [];
                    columns.forEach(function (j) {
                        ptr.push(index.length);
                        for (k = mptr[j], kk = mptr[j + 1]; k < kk; k++) {
                            i = mindex[k];
                            if (w[i] === true) {
                                index.push(pv[i]);
                                if (values)
                                    values.push(mvalues[k]);
                            }
                        }
                    });
                    ptr.push(index.length);
                    return new SparseMatrix({
                        values: values,
                        index: index,
                        ptr: ptr,
                        size: size,
                        datatype: matrix._datatype
                    });
                };
                var _setsubset = function (matrix, index, submatrix, defaultValue) {
                    if (!index || index.isIndex !== true) {
                        throw new TypeError('Invalid index');
                    }
                    var iSize = index.size(), isScalar = index.isScalar();
                    var sSize;
                    if (type.isMatrix(submatrix)) {
                        sSize = submatrix.size();
                        submatrix = submatrix.toArray();
                    }
                    else {
                        sSize = array.size(submatrix);
                    }
                    if (isScalar) {
                        if (sSize.length !== 0) {
                            throw new TypeError('Scalar expected');
                        }
                        matrix.set(index.min(), submatrix, defaultValue);
                    }
                    else {
                        if (iSize.length !== 1 && iSize.length !== 2) {
                            throw new DimensionError(iSize.length, matrix._size.length, '<');
                        }
                        if (sSize.length < iSize.length) {
                            var i = 0;
                            var outer = 0;
                            while (iSize[i] === 1 && sSize[i] === 1) {
                                i++;
                            }
                            while (iSize[i] === 1) {
                                outer++;
                                i++;
                            }
                            submatrix = array.unsqueeze(submatrix, iSize.length, outer, sSize);
                        }
                        if (!object.deepEqual(iSize, sSize)) {
                            throw new DimensionError(iSize, sSize, '>');
                        }
                        var x0 = index.min()[0];
                        var y0 = index.min()[1];
                        var m = sSize[0];
                        var n = sSize[1];
                        for (var x = 0; x < m; x++) {
                            for (var y = 0; y < n; y++) {
                                var v = submatrix[x][y];
                                matrix.set([x + x0, y + y0], v, defaultValue);
                            }
                        }
                    }
                    return matrix;
                };
                SparseMatrix.prototype.get = function (index) {
                    if (!isArray(index))
                        throw new TypeError('Array expected');
                    if (index.length != this._size.length)
                        throw new DimensionError(index.length, this._size.length);
                    if (!this._values)
                        throw new Error('Cannot invoke get on a Pattern only matrix');
                    var i = index[0];
                    var j = index[1];
                    validateIndex(i, this._size[0]);
                    validateIndex(j, this._size[1]);
                    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index);
                    if (k < this._ptr[j + 1] && this._index[k] === i)
                        return this._values[k];
                    return 0;
                };
                SparseMatrix.prototype.set = function (index, v, defaultValue) {
                    if (!isArray(index))
                        throw new TypeError('Array expected');
                    if (index.length != this._size.length)
                        throw new DimensionError(index.length, this._size.length);
                    if (!this._values)
                        throw new Error('Cannot invoke set on a Pattern only matrix');
                    var i = index[0];
                    var j = index[1];
                    var rows = this._size[0];
                    var columns = this._size[1];
                    var eq = equalScalar;
                    var zero = 0;
                    if (isString(this._datatype)) {
                        eq = typed.find(equalScalar, [this._datatype, this._datatype]) || equalScalar;
                        zero = typed.convert(0, this._datatype);
                    }
                    if (i > rows - 1 || j > columns - 1) {
                        _resize(this, Math.max(i + 1, rows), Math.max(j + 1, columns), defaultValue);
                        rows = this._size[0];
                        columns = this._size[1];
                    }
                    validateIndex(i, rows);
                    validateIndex(j, columns);
                    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index);
                    if (k < this._ptr[j + 1] && this._index[k] === i) {
                        if (!eq(v, zero)) {
                            this._values[k] = v;
                        }
                        else {
                            _remove(k, j, this._values, this._index, this._ptr);
                        }
                    }
                    else {
                        _insert(k, i, j, v, this._values, this._index, this._ptr);
                    }
                    return this;
                };
                var _getValueIndex = function (i, top, bottom, index) {
                    if (bottom - top === 0)
                        return bottom;
                    for (var r = top; r < bottom; r++) {
                        if (index[r] === i)
                            return r;
                    }
                    return top;
                };
                var _remove = function (k, j, values, index, ptr) {
                    values.splice(k, 1);
                    index.splice(k, 1);
                    for (var x = j + 1; x < ptr.length; x++)
                        ptr[x]--;
                };
                var _insert = function (k, i, j, v, values, index, ptr) {
                    values.splice(k, 0, v);
                    index.splice(k, 0, i);
                    for (var x = j + 1; x < ptr.length; x++)
                        ptr[x]++;
                };
                SparseMatrix.prototype.resize = function (size, defaultValue, copy) {
                    if (!isArray(size))
                        throw new TypeError('Array expected');
                    if (size.length !== 2)
                        throw new Error('Only two dimensions matrix are supported');
                    size.forEach(function (value) {
                        if (!number.isNumber(value) || !number.isInteger(value) || value < 0) {
                            throw new TypeError('Invalid size, must contain positive integers ' +
                                '(size: ' + string.format(size) + ')');
                        }
                    });
                    var m = copy ? this.clone() : this;
                    return _resize(m, size[0], size[1], defaultValue);
                };
                var _resize = function (matrix, rows, columns, defaultValue) {
                    var value = defaultValue || 0;
                    var eq = equalScalar;
                    var zero = 0;
                    if (isString(matrix._datatype)) {
                        eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar;
                        zero = typed.convert(0, matrix._datatype);
                        value = typed.convert(value, matrix._datatype);
                    }
                    var ins = !eq(value, zero);
                    var r = matrix._size[0];
                    var c = matrix._size[1];
                    var i, j, k;
                    if (columns > c) {
                        for (j = c; j < columns; j++) {
                            matrix._ptr[j] = matrix._values.length;
                            if (ins) {
                                for (i = 0; i < r; i++) {
                                    matrix._values.push(value);
                                    matrix._index.push(i);
                                }
                            }
                        }
                        matrix._ptr[columns] = matrix._values.length;
                    }
                    else if (columns < c) {
                        matrix._ptr.splice(columns + 1, c - columns);
                        matrix._values.splice(matrix._ptr[columns], matrix._values.length);
                        matrix._index.splice(matrix._ptr[columns], matrix._index.length);
                    }
                    c = columns;
                    if (rows > r) {
                        if (ins) {
                            var n = 0;
                            for (j = 0; j < c; j++) {
                                matrix._ptr[j] = matrix._ptr[j] + n;
                                k = matrix._ptr[j + 1] + n;
                                var p = 0;
                                for (i = r; i < rows; i++, p++) {
                                    matrix._values.splice(k + p, 0, value);
                                    matrix._index.splice(k + p, 0, i);
                                    n++;
                                }
                            }
                            matrix._ptr[c] = matrix._values.length;
                        }
                    }
                    else if (rows < r) {
                        var d = 0;
                        for (j = 0; j < c; j++) {
                            matrix._ptr[j] = matrix._ptr[j] - d;
                            var k0 = matrix._ptr[j];
                            var k1 = matrix._ptr[j + 1] - d;
                            for (k = k0; k < k1; k++) {
                                i = matrix._index[k];
                                if (i > rows - 1) {
                                    matrix._values.splice(k, 1);
                                    matrix._index.splice(k, 1);
                                    d++;
                                }
                            }
                        }
                        matrix._ptr[j] = matrix._values.length;
                    }
                    matrix._size[0] = rows;
                    matrix._size[1] = columns;
                    return matrix;
                };
                SparseMatrix.prototype.reshape = function (size, copy) {
                    if (!isArray(size))
                        throw new TypeError('Array expected');
                    if (size.length !== 2)
                        throw new Error('Sparse matrices can only be reshaped in two dimensions');
                    size.forEach(function (value) {
                        if (!number.isNumber(value) || !number.isInteger(value) || value < 0) {
                            throw new TypeError('Invalid size, must contain positive integers ' +
                                '(size: ' + string.format(size) + ')');
                        }
                    });
                    if (this._size[0] * this._size[1] !== size[0] * size[1]) {
                        throw new Error('Reshaping sparse matrix will result in the wrong number of elements');
                    }
                    var m = copy ? this.clone() : this;
                    if (this._size[0] === size[0] && this._size[1] === size[1]) {
                        return m;
                    }
                    var colIndex = [];
                    for (var i = 0; i < m._ptr.length; i++) {
                        for (var j = 0; j < m._ptr[i + 1] - m._ptr[i]; j++) {
                            colIndex.push(i);
                        }
                    }
                    var values = m._values.slice();
                    var rowIndex = m._index.slice();
                    for (var i = 0; i < m._index.length; i++) {
                        var r1 = rowIndex[i];
                        var c1 = colIndex[i];
                        var flat = r1 * m._size[1] + c1;
                        colIndex[i] = flat % size[1];
                        rowIndex[i] = Math.floor(flat / size[1]);
                    }
                    m._values.length = 0;
                    m._index.length = 0;
                    m._ptr.length = size[1] + 1;
                    m._size = size.slice();
                    for (var i = 0; i < m._ptr.length; i++) {
                        m._ptr[i] = 0;
                    }
                    for (var h = 0; h < values.length; h++) {
                        var i = rowIndex[h];
                        var j = colIndex[h];
                        var v = values[h];
                        var k = _getValueIndex(i, m._ptr[j], m._ptr[j + 1], m._index);
                        _insert(k, i, j, v, m._values, m._index, m._ptr);
                    }
                    return m;
                };
                SparseMatrix.prototype.clone = function () {
                    var m = new SparseMatrix({
                        values: this._values ? object.clone(this._values) : undefined,
                        index: object.clone(this._index),
                        ptr: object.clone(this._ptr),
                        size: object.clone(this._size),
                        datatype: this._datatype
                    });
                    return m;
                };
                SparseMatrix.prototype.size = function () {
                    return this._size.slice(0);
                };
                SparseMatrix.prototype.map = function (callback, skipZeros) {
                    if (!this._values)
                        throw new Error('Cannot invoke map on a Pattern only matrix');
                    var me = this;
                    var rows = this._size[0];
                    var columns = this._size[1];
                    var invoke = function (v, i, j) {
                        return callback(v, [i, j], me);
                    };
                    return _map(this, 0, rows - 1, 0, columns - 1, invoke, skipZeros);
                };
                var _map = function (matrix, minRow, maxRow, minColumn, maxColumn, callback, skipZeros) {
                    var values = [];
                    var index = [];
                    var ptr = [];
                    var eq = equalScalar;
                    var zero = 0;
                    if (isString(matrix._datatype)) {
                        eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar;
                        zero = typed.convert(0, matrix._datatype);
                    }
                    var invoke = function (v, x, y) {
                        v = callback(v, x, y);
                        if (!eq(v, zero)) {
                            values.push(v);
                            index.push(x);
                        }
                    };
                    for (var j = minColumn; j <= maxColumn; j++) {
                        ptr.push(values.length);
                        var k0 = matrix._ptr[j];
                        var k1 = matrix._ptr[j + 1];
                        var p = minRow;
                        for (var k = k0; k < k1; k++) {
                            var i = matrix._index[k];
                            if (i >= minRow && i <= maxRow) {
                                if (!skipZeros) {
                                    for (var x = p; x < i; x++)
                                        invoke(0, x - minRow, j - minColumn);
                                }
                                invoke(matrix._values[k], i - minRow, j - minColumn);
                            }
                            p = i + 1;
                        }
                        if (!skipZeros) {
                            for (var y = p; y <= maxRow; y++)
                                invoke(0, y - minRow, j - minColumn);
                        }
                    }
                    ptr.push(values.length);
                    return new SparseMatrix({
                        values: values,
                        index: index,
                        ptr: ptr,
                        size: [maxRow - minRow + 1, maxColumn - minColumn + 1]
                    });
                };
                SparseMatrix.prototype.forEach = function (callback, skipZeros) {
                    if (!this._values)
                        throw new Error('Cannot invoke forEach on a Pattern only matrix');
                    var me = this;
                    var rows = this._size[0];
                    var columns = this._size[1];
                    for (var j = 0; j < columns; j++) {
                        var k0 = this._ptr[j];
                        var k1 = this._ptr[j + 1];
                        var p = 0;
                        for (var k = k0; k < k1; k++) {
                            var i = this._index[k];
                            if (!skipZeros) {
                                for (var x = p; x < i; x++)
                                    callback(0, [x, j], me);
                            }
                            callback(this._values[k], [i, j], me);
                            p = i + 1;
                        }
                        if (!skipZeros) {
                            for (var y = p; y < rows; y++)
                                callback(0, [y, j], me);
                        }
                    }
                };
                SparseMatrix.prototype.toArray = function () {
                    return _toArray(this._values, this._index, this._ptr, this._size, true);
                };
                SparseMatrix.prototype.valueOf = function () {
                    return _toArray(this._values, this._index, this._ptr, this._size, false);
                };
                var _toArray = function (values, index, ptr, size, copy) {
                    var rows = size[0];
                    var columns = size[1];
                    var a = [];
                    var i, j;
                    for (i = 0; i < rows; i++) {
                        a[i] = [];
                        for (j = 0; j < columns; j++)
                            a[i][j] = 0;
                    }
                    for (j = 0; j < columns; j++) {
                        var k0 = ptr[j];
                        var k1 = ptr[j + 1];
                        for (var k = k0; k < k1; k++) {
                            i = index[k];
                            a[i][j] = values ? (copy ? object.clone(values[k]) : values[k]) : 1;
                        }
                    }
                    return a;
                };
                SparseMatrix.prototype.format = function (options) {
                    var rows = this._size[0];
                    var columns = this._size[1];
                    var density = this.density();
                    var str = 'Sparse Matrix [' + string.format(rows, options) + ' x ' + string.format(columns, options) + '] density: ' + string.format(density, options) + '\n';
                    for (var j = 0; j < columns; j++) {
                        var k0 = this._ptr[j];
                        var k1 = this._ptr[j + 1];
                        for (var k = k0; k < k1; k++) {
                            var i = this._index[k];
                            str += '\n    (' + string.format(i, options) + ', ' + string.format(j, options) + ') ==> ' + (this._values ? string.format(this._values[k], options) : 'X');
                        }
                    }
                    return str;
                };
                SparseMatrix.prototype.toString = function () {
                    return string.format(this.toArray());
                };
                SparseMatrix.prototype.toJSON = function () {
                    return {
                        mathjs: 'SparseMatrix',
                        values: this._values,
                        index: this._index,
                        ptr: this._ptr,
                        size: this._size,
                        datatype: this._datatype
                    };
                };
                SparseMatrix.prototype.diagonal = function (k) {
                    if (k) {
                        if (type.isBigNumber(k))
                            k = k.toNumber();
                        if (!isNumber(k) || !isInteger(k)) {
                            throw new TypeError('The parameter k must be an integer number');
                        }
                    }
                    else {
                        k = 0;
                    }
                    var kSuper = k > 0 ? k : 0;
                    var kSub = k < 0 ? -k : 0;
                    var rows = this._size[0];
                    var columns = this._size[1];
                    var n = Math.min(rows - kSub, columns - kSuper);
                    var values = [];
                    var index = [];
                    var ptr = [];
                    ptr[0] = 0;
                    for (var j = kSuper; j < columns && values.length < n; j++) {
                        var k0 = this._ptr[j];
                        var k1 = this._ptr[j + 1];
                        for (var x = k0; x < k1; x++) {
                            var i = this._index[x];
                            if (i === j - kSuper + kSub) {
                                values.push(this._values[x]);
                                index[values.length - 1] = i - kSub;
                                break;
                            }
                        }
                    }
                    ptr.push(values.length);
                    return new SparseMatrix({
                        values: values,
                        index: index,
                        ptr: ptr,
                        size: [n, 1]
                    });
                };
                SparseMatrix.fromJSON = function (json) {
                    return new SparseMatrix(json);
                };
                SparseMatrix.diagonal = function (size, value, k, defaultValue, datatype) {
                    if (!isArray(size))
                        throw new TypeError('Array expected, size parameter');
                    if (size.length !== 2)
                        throw new Error('Only two dimensions matrix are supported');
                    size = size.map(function (s) {
                        if (type.isBigNumber(s)) {
                            s = s.toNumber();
                        }
                        if (!isNumber(s) || !isInteger(s) || s < 1) {
                            throw new Error('Size values must be positive integers');
                        }
                        return s;
                    });
                    if (k) {
                        if (type.isBigNumber(k))
                            k = k.toNumber();
                        if (!isNumber(k) || !isInteger(k)) {
                            throw new TypeError('The parameter k must be an integer number');
                        }
                    }
                    else {
                        k = 0;
                    }
                    var eq = equalScalar;
                    var zero = 0;
                    if (isString(datatype)) {
                        eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar;
                        zero = typed.convert(0, datatype);
                    }
                    var kSuper = k > 0 ? k : 0;
                    var kSub = k < 0 ? -k : 0;
                    var rows = size[0];
                    var columns = size[1];
                    var n = Math.min(rows - kSub, columns - kSuper);
                    var _value;
                    if (isArray(value)) {
                        if (value.length !== n) {
                            throw new Error('Invalid value array length');
                        }
                        _value = function (i) {
                            return value[i];
                        };
                    }
                    else if (type.isMatrix(value)) {
                        var ms = value.size();
                        if (ms.length !== 1 || ms[0] !== n) {
                            throw new Error('Invalid matrix length');
                        }
                        _value = function (i) {
                            return value.get([i]);
                        };
                    }
                    else {
                        _value = function () {
                            return value;
                        };
                    }
                    var values = [];
                    var index = [];
                    var ptr = [];
                    for (var j = 0; j < columns; j++) {
                        ptr.push(values.length);
                        var i = j - kSuper;
                        if (i >= 0 && i < n) {
                            var v = _value(i);
                            if (!eq(v, zero)) {
                                index.push(i + kSub);
                                values.push(v);
                            }
                        }
                    }
                    ptr.push(values.length);
                    return new SparseMatrix({
                        values: values,
                        index: index,
                        ptr: ptr,
                        size: [rows, columns]
                    });
                };
                SparseMatrix.prototype.swapRows = function (i, j) {
                    if (!isNumber(i) || !isInteger(i) || !isNumber(j) || !isInteger(j)) {
                        throw new Error('Row index must be positive integers');
                    }
                    if (this._size.length !== 2) {
                        throw new Error('Only two dimensional matrix is supported');
                    }
                    validateIndex(i, this._size[0]);
                    validateIndex(j, this._size[0]);
                    SparseMatrix._swapRows(i, j, this._size[1], this._values, this._index, this._ptr);
                    return this;
                };
                SparseMatrix._forEachRow = function (j, values, index, ptr, callback) {
                    var k0 = ptr[j];
                    var k1 = ptr[j + 1];
                    for (var k = k0; k < k1; k++) {
                        callback(index[k], values[k]);
                    }
                };
                SparseMatrix._swapRows = function (x, y, columns, values, index, ptr) {
                    for (var j = 0; j < columns; j++) {
                        var k0 = ptr[j];
                        var k1 = ptr[j + 1];
                        var kx = _getValueIndex(x, k0, k1, index);
                        var ky = _getValueIndex(y, k0, k1, index);
                        if (kx < k1 && ky < k1 && index[kx] === x && index[ky] === y) {
                            if (values) {
                                var v = values[kx];
                                values[kx] = values[ky];
                                values[ky] = v;
                            }
                            continue;
                        }
                        if (kx < k1 && index[kx] === x && (ky >= k1 || index[ky] !== y)) {
                            var vx = values ? values[kx] : undefined;
                            index.splice(ky, 0, y);
                            if (values)
                                values.splice(ky, 0, vx);
                            index.splice(ky <= kx ? kx + 1 : kx, 1);
                            if (values)
                                values.splice(ky <= kx ? kx + 1 : kx, 1);
                            continue;
                        }
                        if (ky < k1 && index[ky] === y && (kx >= k1 || index[kx] !== x)) {
                            var vy = values ? values[ky] : undefined;
                            index.splice(kx, 0, x);
                            if (values)
                                values.splice(kx, 0, vy);
                            index.splice(kx <= ky ? ky + 1 : ky, 1);
                            if (values)
                                values.splice(kx <= ky ? ky + 1 : ky, 1);
                        }
                    }
                };
                type.Matrix._storage.sparse = SparseMatrix;
                return SparseMatrix;
            }
            exports.name = 'SparseMatrix';
            exports.path = 'type';
            exports.factory = factory;
            exports.lazy = false;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load) {
                var add = load(__webpack_require__(18));
                var equalScalar = load(__webpack_require__(11));
                function Spa() {
                    if (!(this instanceof Spa))
                        throw new SyntaxError('Constructor must be called with the new operator');
                    this._values = [];
                    this._heap = new type.FibonacciHeap();
                }
                Spa.prototype.type = 'Spa';
                Spa.prototype.isSpa = true;
                Spa.prototype.set = function (i, v) {
                    if (!this._values[i]) {
                        var node = this._heap.insert(i, v);
                        this._values[i] = node;
                    }
                    else {
                        this._values[i].value = v;
                    }
                };
                Spa.prototype.get = function (i) {
                    var node = this._values[i];
                    if (node)
                        return node.value;
                    return 0;
                };
                Spa.prototype.accumulate = function (i, v) {
                    var node = this._values[i];
                    if (!node) {
                        node = this._heap.insert(i, v);
                        this._values[i] = node;
                    }
                    else {
                        node.value = add(node.value, v);
                    }
                };
                Spa.prototype.forEach = function (from, to, callback) {
                    var heap = this._heap;
                    var values = this._values;
                    var nodes = [];
                    var node = heap.extractMinimum();
                    if (node)
                        nodes.push(node);
                    while (node && node.key <= to) {
                        if (node.key >= from) {
                            if (!equalScalar(node.value, 0)) {
                                callback(node.key, node.value, this);
                            }
                        }
                        node = heap.extractMinimum();
                        if (node)
                            nodes.push(node);
                    }
                    for (var i = 0; i < nodes.length; i++) {
                        var n = nodes[i];
                        node = heap.insert(n.key, n.value);
                        values[node.key] = node;
                    }
                };
                Spa.prototype.swap = function (i, j) {
                    var nodei = this._values[i];
                    var nodej = this._values[j];
                    if (!nodei && nodej) {
                        nodei = this._heap.insert(i, nodej.value);
                        this._heap.remove(nodej);
                        this._values[i] = nodei;
                        this._values[j] = undefined;
                    }
                    else if (nodei && !nodej) {
                        nodej = this._heap.insert(j, nodei.value);
                        this._heap.remove(nodei);
                        this._values[j] = nodej;
                        this._values[i] = undefined;
                    }
                    else if (nodei && nodej) {
                        var v = nodei.value;
                        nodei.value = nodej.value;
                        nodej.value = v;
                    }
                };
                return Spa;
            }
            exports.name = 'Spa';
            exports.path = 'type';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load, typed) {
                var smaller = load(__webpack_require__(44));
                var larger = load(__webpack_require__(34));
                var oneOverLogPhi = 1.0 / Math.log((1.0 + Math.sqrt(5.0)) / 2.0);
                function FibonacciHeap() {
                    if (!(this instanceof FibonacciHeap))
                        throw new SyntaxError('Constructor must be called with the new operator');
                    this._minimum = null;
                    this._size = 0;
                }
                FibonacciHeap.prototype.type = 'FibonacciHeap';
                FibonacciHeap.prototype.isFibonacciHeap = true;
                FibonacciHeap.prototype.insert = function (key, value) {
                    var node = {
                        key: key,
                        value: value,
                        degree: 0
                    };
                    if (this._minimum) {
                        var minimum = this._minimum;
                        node.left = minimum;
                        node.right = minimum.right;
                        minimum.right = node;
                        node.right.left = node;
                        if (smaller(key, minimum.key)) {
                            this._minimum = node;
                        }
                    }
                    else {
                        node.left = node;
                        node.right = node;
                        this._minimum = node;
                    }
                    this._size++;
                    return node;
                };
                FibonacciHeap.prototype.size = function () {
                    return this._size;
                };
                FibonacciHeap.prototype.clear = function () {
                    this._minimum = null;
                    this._size = 0;
                };
                FibonacciHeap.prototype.isEmpty = function () {
                    return this._size === 0;
                };
                FibonacciHeap.prototype.extractMinimum = function () {
                    var node = this._minimum;
                    if (node === null)
                        return node;
                    var minimum = this._minimum;
                    var numberOfChildren = node.degree;
                    var x = node.child;
                    while (numberOfChildren > 0) {
                        var tempRight = x.right;
                        x.left.right = x.right;
                        x.right.left = x.left;
                        x.left = minimum;
                        x.right = minimum.right;
                        minimum.right = x;
                        x.right.left = x;
                        x.parent = null;
                        x = tempRight;
                        numberOfChildren--;
                    }
                    node.left.right = node.right;
                    node.right.left = node.left;
                    if (node == node.right) {
                        minimum = null;
                    }
                    else {
                        minimum = node.right;
                        minimum = _findMinimumNode(minimum, this._size);
                    }
                    this._size--;
                    this._minimum = minimum;
                    return node;
                };
                FibonacciHeap.prototype.remove = function (node) {
                    this._minimum = _decreaseKey(this._minimum, node, -1);
                    this.extractMinimum();
                };
                var _decreaseKey = function (minimum, node, key) {
                    node.key = key;
                    var parent = node.parent;
                    if (parent && smaller(node.key, parent.key)) {
                        _cut(minimum, node, parent);
                        _cascadingCut(minimum, parent);
                    }
                    if (smaller(node.key, minimum.key))
                        minimum = node;
                    return minimum;
                };
                var _cut = function (minimum, node, parent) {
                    node.left.right = node.right;
                    node.right.left = node.left;
                    parent.degree--;
                    if (parent.child == node)
                        parent.child = node.right;
                    if (parent.degree === 0)
                        parent.child = null;
                    node.left = minimum;
                    node.right = minimum.right;
                    minimum.right = node;
                    node.right.left = node;
                    node.parent = null;
                    node.mark = false;
                };
                var _cascadingCut = function (minimum, node) {
                    var parent = node.parent;
                    if (!parent)
                        return;
                    if (!node.mark) {
                        node.mark = true;
                    }
                    else {
                        _cut(minimum, node, parent);
                        _cascadingCut(parent);
                    }
                };
                var _linkNodes = function (node, parent) {
                    node.left.right = node.right;
                    node.right.left = node.left;
                    node.parent = parent;
                    if (!parent.child) {
                        parent.child = node;
                        node.right = node;
                        node.left = node;
                    }
                    else {
                        node.left = parent.child;
                        node.right = parent.child.right;
                        parent.child.right = node;
                        node.right.left = node;
                    }
                    parent.degree++;
                    node.mark = false;
                };
                var _findMinimumNode = function (minimum, size) {
                    var arraySize = Math.floor(Math.log(size) * oneOverLogPhi) + 1;
                    var array = new Array(arraySize);
                    var numRoots = 0;
                    var x = minimum;
                    if (x) {
                        numRoots++;
                        x = x.right;
                        while (x !== minimum) {
                            numRoots++;
                            x = x.right;
                        }
                    }
                    var y;
                    while (numRoots > 0) {
                        var d = x.degree;
                        var next = x.right;
                        while (true) {
                            y = array[d];
                            if (!y)
                                break;
                            if (larger(x.key, y.key)) {
                                var temp = y;
                                y = x;
                                x = temp;
                            }
                            _linkNodes(y, x);
                            array[d] = null;
                            d++;
                        }
                        array[d] = x;
                        x = next;
                        numRoots--;
                    }
                    minimum = null;
                    for (var i = 0; i < arraySize; i++) {
                        y = array[i];
                        if (!y)
                            continue;
                        if (minimum) {
                            y.left.right = y.right;
                            y.right.left = y.left;
                            y.left = minimum;
                            y.right = minimum.right;
                            minimum.right = y;
                            y.right.left = y;
                            if (smaller(y.key, minimum.key))
                                minimum = y;
                        }
                        else
                            minimum = y;
                    }
                    return minimum;
                };
                return FibonacciHeap;
            }
            exports.name = 'FibonacciHeap';
            exports.path = 'type';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var util = __webpack_require__(25);
            var string = util.string;
            var object = util.object;
            var isArray = Array.isArray;
            var isString = string.isString;
            function factory(type, config, load) {
                var DenseMatrix = load(__webpack_require__(43));
                var smaller = load(__webpack_require__(44));
                function ImmutableDenseMatrix(data, datatype) {
                    if (!(this instanceof ImmutableDenseMatrix))
                        throw new SyntaxError('Constructor must be called with the new operator');
                    if (datatype && !isString(datatype))
                        throw new Error('Invalid datatype: ' + datatype);
                    if (type.isMatrix(data) || isArray(data)) {
                        var matrix = new DenseMatrix(data, datatype);
                        this._data = matrix._data;
                        this._size = matrix._size;
                        this._datatype = matrix._datatype;
                        this._min = null;
                        this._max = null;
                    }
                    else if (data && isArray(data.data) && isArray(data.size)) {
                        this._data = data.data;
                        this._size = data.size;
                        this._datatype = data.datatype;
                        this._min = typeof data.min !== 'undefined' ? data.min : null;
                        this._max = typeof data.max !== 'undefined' ? data.max : null;
                    }
                    else if (data) {
                        throw new TypeError('Unsupported type of data (' + util.types.type(data) + ')');
                    }
                    else {
                        this._data = [];
                        this._size = [0];
                        this._datatype = datatype;
                        this._min = null;
                        this._max = null;
                    }
                }
                ImmutableDenseMatrix.prototype = new DenseMatrix();
                ImmutableDenseMatrix.prototype.type = 'ImmutableDenseMatrix';
                ImmutableDenseMatrix.prototype.isImmutableDenseMatrix = true;
                ImmutableDenseMatrix.prototype.subset = function (index) {
                    switch (arguments.length) {
                        case 1:
                            var m = DenseMatrix.prototype.subset.call(this, index);
                            if (type.isMatrix(m)) {
                                return new ImmutableDenseMatrix({
                                    data: m._data,
                                    size: m._size,
                                    datatype: m._datatype
                                });
                            }
                            return m;
                        case 2:
                        case 3:
                            throw new Error('Cannot invoke set subset on an Immutable Matrix instance');
                        default:
                            throw new SyntaxError('Wrong number of arguments');
                    }
                };
                ImmutableDenseMatrix.prototype.set = function () {
                    throw new Error('Cannot invoke set on an Immutable Matrix instance');
                };
                ImmutableDenseMatrix.prototype.resize = function () {
                    throw new Error('Cannot invoke resize on an Immutable Matrix instance');
                };
                ImmutableDenseMatrix.prototype.reshape = function () {
                    throw new Error('Cannot invoke reshape on an Immutable Matrix instance');
                };
                ImmutableDenseMatrix.prototype.clone = function () {
                    var m = new ImmutableDenseMatrix({
                        data: object.clone(this._data),
                        size: object.clone(this._size),
                        datatype: this._datatype
                    });
                    return m;
                };
                ImmutableDenseMatrix.prototype.toJSON = function () {
                    return {
                        mathjs: 'ImmutableDenseMatrix',
                        data: this._data,
                        size: this._size,
                        datatype: this._datatype
                    };
                };
                ImmutableDenseMatrix.fromJSON = function (json) {
                    return new ImmutableDenseMatrix(json);
                };
                ImmutableDenseMatrix.prototype.swapRows = function () {
                    throw new Error('Cannot invoke swapRows on an Immutable Matrix instance');
                };
                ImmutableDenseMatrix.prototype.min = function () {
                    if (this._min === null) {
                        var m = null;
                        this.forEach(function (v) {
                            if (m === null || smaller(v, m))
                                m = v;
                        });
                        this._min = m !== null ? m : undefined;
                    }
                    return this._min;
                };
                ImmutableDenseMatrix.prototype.max = function () {
                    if (this._max === null) {
                        var m = null;
                        this.forEach(function (v) {
                            if (m === null || smaller(m, v))
                                m = v;
                        });
                        this._max = m !== null ? m : undefined;
                    }
                    return this._max;
                };
                return ImmutableDenseMatrix;
            }
            exports.name = 'ImmutableDenseMatrix';
            exports.path = 'type';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load, typed) {
                return typed('index', {
                    '...number | string | BigNumber | Range | Array | Matrix': function (args) {
                        var ranges = args.map(function (arg) {
                            if (type.isBigNumber(arg)) {
                                return arg.toNumber();
                            }
                            else if (Array.isArray(arg) || type.isMatrix(arg)) {
                                return arg.map(function (elem) {
                                    return type.isBigNumber(elem) ? elem.toNumber() : elem;
                                });
                            }
                            else {
                                return arg;
                            }
                        });
                        var res = new type.Index();
                        type.Index.apply(res, ranges);
                        return res;
                    }
                });
            }
            exports.name = 'index';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load, typed) {
                var SparseMatrix = type.SparseMatrix;
                var sparse = typed('sparse', {
                    '': function () {
                        return new SparseMatrix([]);
                    },
                    'string': function (datatype) {
                        return new SparseMatrix([], datatype);
                    },
                    'Array | Matrix': function (data) {
                        return new SparseMatrix(data);
                    },
                    'Array | Matrix, string': function (data, datatype) {
                        return new SparseMatrix(data, datatype);
                    }
                });
                sparse.toTex = {
                    0: '\\begin{bsparse}\\end{bsparse}',
                    1: '\\left(${args[0]}\\right)'
                };
                return sparse;
            }
            exports.name = 'sparse';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            module.exports = [
                __webpack_require__(94)
            ];
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            var number = __webpack_require__(3);
            function factory(type, config, load, typed) {
                var string = typed('string', {
                    '': function () {
                        return '';
                    },
                    'number': number.format,
                    'null': function (x) {
                        return 'null';
                    },
                    'boolean': function (x) {
                        return x + '';
                    },
                    'string': function (x) {
                        return x;
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, string);
                    },
                    'any': function (x) {
                        return String(x);
                    }
                });
                string.toTex = {
                    0: '\\mathtt{""}',
                    1: '\\mathrm{string}\\left(${args[0]}\\right)'
                };
                return string;
            }
            exports.name = 'string';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            module.exports = [
                __webpack_require__(184),
                __webpack_require__(185),
                __webpack_require__(186),
                __webpack_require__(187),
                __webpack_require__(188)
            ];
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var endsWith = __webpack_require__(9).endsWith;
            var clone = __webpack_require__(5).clone;
            var constants = __webpack_require__(95);
            function factory(type, config, load, typed, math) {
                var add = load(__webpack_require__(20));
                var subtract = load(__webpack_require__(21));
                var multiply = load(__webpack_require__(23));
                var divide = load(__webpack_require__(19));
                var pow = load(__webpack_require__(45));
                var abs = load(__webpack_require__(29));
                var fix = load(__webpack_require__(96));
                var round = load(__webpack_require__(97));
                var equal = load(__webpack_require__(30));
                var isNumeric = load(__webpack_require__(75));
                var format = load(__webpack_require__(98));
                var getTypeOf = load(__webpack_require__(76));
                var toNumber = load(__webpack_require__(74));
                var Complex = load(__webpack_require__(91));
                function Unit(value, name) {
                    if (!(this instanceof Unit)) {
                        throw new Error('Constructor must be called with the new operator');
                    }
                    if (!(value == undefined || isNumeric(value) || type.isComplex(value))) {
                        throw new TypeError('First parameter in Unit constructor must be number, BigNumber, Fraction, Complex, or undefined');
                    }
                    if (name != undefined && (typeof name !== 'string' || name === '')) {
                        throw new TypeError('Second parameter in Unit constructor must be a string');
                    }
                    if (name != undefined) {
                        var u = Unit.parse(name);
                        this.units = u.units;
                        this.dimensions = u.dimensions;
                    }
                    else {
                        this.units = [
                            {
                                unit: UNIT_NONE,
                                prefix: PREFIXES.NONE,
                                power: 0
                            }
                        ];
                        this.dimensions = [];
                        for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
                            this.dimensions[i] = 0;
                        }
                    }
                    this.value = (value != undefined) ? this._normalize(value) : null;
                    this.fixPrefix = false;
                    this.isUnitListSimplified = true;
                }
                Unit.prototype.type = 'Unit';
                Unit.prototype.isUnit = true;
                var text, index, c;
                function skipWhitespace() {
                    while (c == ' ' || c == '\t') {
                        next();
                    }
                }
                function isDigitDot(c) {
                    return ((c >= '0' && c <= '9') || c == '.');
                }
                function isDigit(c) {
                    return ((c >= '0' && c <= '9'));
                }
                function next() {
                    index++;
                    c = text.charAt(index);
                }
                function revert(oldIndex) {
                    index = oldIndex;
                    c = text.charAt(index);
                }
                function parseNumber() {
                    var number = '';
                    var oldIndex;
                    oldIndex = index;
                    if (c == '+') {
                        next();
                    }
                    else if (c == '-') {
                        number += c;
                        next();
                    }
                    if (!isDigitDot(c)) {
                        revert(oldIndex);
                        return null;
                    }
                    if (c == '.') {
                        number += c;
                        next();
                        if (!isDigit(c)) {
                            revert(oldIndex);
                            return null;
                        }
                    }
                    else {
                        while (isDigit(c)) {
                            number += c;
                            next();
                        }
                        if (c == '.') {
                            number += c;
                            next();
                        }
                    }
                    while (isDigit(c)) {
                        number += c;
                        next();
                    }
                    if (c == 'E' || c == 'e') {
                        var tentativeNumber = '';
                        var tentativeIndex = index;
                        tentativeNumber += c;
                        next();
                        if (c == '+' || c == '-') {
                            tentativeNumber += c;
                            next();
                        }
                        if (!isDigit(c)) {
                            revert(tentativeIndex);
                            return number;
                        }
                        number = number + tentativeNumber;
                        while (isDigit(c)) {
                            number += c;
                            next();
                        }
                    }
                    return number;
                }
                function parseUnit() {
                    var unitName = '';
                    var code = text.charCodeAt(index);
                    while ((code >= 48 && code <= 57) ||
                        (code >= 65 && code <= 90) ||
                        (code >= 97 && code <= 122)) {
                        unitName += c;
                        next();
                        code = text.charCodeAt(index);
                    }
                    code = unitName.charCodeAt(0);
                    if ((code >= 65 && code <= 90) ||
                        (code >= 97 && code <= 122)) {
                        return unitName || null;
                    }
                    else {
                        return null;
                    }
                }
                function parseCharacter(toFind) {
                    if (c === toFind) {
                        next();
                        return toFind;
                    }
                    else {
                        return null;
                    }
                }
                Unit.parse = function (str, options) {
                    options = options || {};
                    text = str;
                    index = -1;
                    c = '';
                    if (typeof text !== 'string') {
                        throw new TypeError('Invalid argument in Unit.parse, string expected');
                    }
                    var unit = new Unit();
                    unit.units = [];
                    next();
                    skipWhitespace();
                    var valueStr = parseNumber();
                    var value = null;
                    if (valueStr) {
                        if (config.number === 'BigNumber') {
                            value = new type.BigNumber(valueStr);
                        }
                        else if (config.number === 'Fraction') {
                            value = new type.Fraction(valueStr);
                        }
                        else {
                            value = parseFloat(valueStr);
                        }
                    }
                    skipWhitespace();
                    var powerMultiplierCurrent = 1;
                    var expectingUnit = false;
                    var powerMultiplierStack = [];
                    var powerMultiplierStackProduct = 1;
                    while (true) {
                        skipWhitespace();
                        while (c === '(') {
                            powerMultiplierStack.push(powerMultiplierCurrent);
                            powerMultiplierStackProduct *= powerMultiplierCurrent;
                            powerMultiplierCurrent = 1;
                            next();
                            skipWhitespace();
                        }
                        if (c) {
                            var oldC = c;
                            var uStr = parseUnit();
                            if (uStr == null) {
                                throw new SyntaxError('Unexpected "' + oldC + '" in "' + text + '" at index ' + index.toString());
                            }
                        }
                        else {
                            break;
                        }
                        var res = _findUnit(uStr);
                        if (res == null) {
                            throw new SyntaxError('Unit "' + uStr + '" not found.');
                        }
                        var power = powerMultiplierCurrent * powerMultiplierStackProduct;
                        skipWhitespace();
                        if (parseCharacter('^')) {
                            skipWhitespace();
                            var p = parseNumber();
                            if (p == null) {
                                throw new SyntaxError('In "' + str + '", "^" must be followed by a floating-point number');
                            }
                            power *= p;
                        }
                        unit.units.push({
                            unit: res.unit,
                            prefix: res.prefix,
                            power: power
                        });
                        for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
                            unit.dimensions[i] += (res.unit.dimensions[i] || 0) * power;
                        }
                        skipWhitespace();
                        while (c === ')') {
                            if (powerMultiplierStack.length === 0) {
                                throw new SyntaxError('Unmatched ")" in "' + text + '" at index ' + index.toString());
                            }
                            powerMultiplierStackProduct /= powerMultiplierStack.pop();
                            next();
                            skipWhitespace();
                        }
                        expectingUnit = false;
                        if (parseCharacter('*')) {
                            powerMultiplierCurrent = 1;
                            expectingUnit = true;
                        }
                        else if (parseCharacter('/')) {
                            powerMultiplierCurrent = -1;
                            expectingUnit = true;
                        }
                        else {
                            powerMultiplierCurrent = 1;
                        }
                        if (res.unit.base) {
                            var baseDim = res.unit.base.key;
                            UNIT_SYSTEMS.auto[baseDim] = {
                                unit: res.unit,
                                prefix: res.prefix
                            };
                        }
                    }
                    skipWhitespace();
                    if (c) {
                        throw new SyntaxError('Could not parse: "' + str + '"');
                    }
                    if (expectingUnit) {
                        throw new SyntaxError('Trailing characters: "' + str + '"');
                    }
                    if (powerMultiplierStack.length !== 0) {
                        throw new SyntaxError('Unmatched "(" in "' + text + '"');
                    }
                    if (unit.units.length == 0 && !options.allowNoUnits) {
                        throw new SyntaxError('"' + str + '" contains no units');
                    }
                    unit.value = (value != undefined) ? unit._normalize(value) : null;
                    return unit;
                };
                Unit.prototype.clone = function () {
                    var unit = new Unit();
                    unit.fixPrefix = this.fixPrefix;
                    unit.isUnitListSimplified = this.isUnitListSimplified;
                    unit.value = clone(this.value);
                    unit.dimensions = this.dimensions.slice(0);
                    unit.units = [];
                    for (var i = 0; i < this.units.length; i++) {
                        unit.units[i] = {};
                        for (var p in this.units[i]) {
                            if (this.units[i].hasOwnProperty(p)) {
                                unit.units[i][p] = this.units[i][p];
                            }
                        }
                    }
                    return unit;
                };
                Unit.prototype._isDerived = function () {
                    if (this.units.length === 0) {
                        return false;
                    }
                    return this.units.length > 1 || Math.abs(this.units[0].power - 1.0) > 1e-15;
                };
                Unit.prototype._normalize = function (value) {
                    var unitValue, unitOffset, unitPower, unitPrefixValue;
                    var convert;
                    if (value == null || this.units.length === 0) {
                        return value;
                    }
                    else if (this._isDerived()) {
                        var res = value;
                        convert = Unit._getNumberConverter(getTypeOf(value));
                        for (var i = 0; i < this.units.length; i++) {
                            unitValue = convert(this.units[i].unit.value);
                            unitPrefixValue = convert(this.units[i].prefix.value);
                            unitPower = convert(this.units[i].power);
                            res = multiply(res, pow(multiply(unitValue, unitPrefixValue), unitPower));
                        }
                        return res;
                    }
                    else {
                        convert = Unit._getNumberConverter(getTypeOf(value));
                        unitValue = convert(this.units[0].unit.value);
                        unitOffset = convert(this.units[0].unit.offset);
                        unitPrefixValue = convert(this.units[0].prefix.value);
                        return multiply(add(value, unitOffset), multiply(unitValue, unitPrefixValue));
                    }
                };
                Unit.prototype._denormalize = function (value, prefixValue) {
                    var unitValue, unitOffset, unitPower, unitPrefixValue;
                    var convert;
                    if (value == null || this.units.length === 0) {
                        return value;
                    }
                    else if (this._isDerived()) {
                        var res = value;
                        convert = Unit._getNumberConverter(getTypeOf(value));
                        for (var i = 0; i < this.units.length; i++) {
                            unitValue = convert(this.units[i].unit.value);
                            unitPrefixValue = convert(this.units[i].prefix.value);
                            unitPower = convert(this.units[i].power);
                            res = divide(res, pow(multiply(unitValue, unitPrefixValue), unitPower));
                        }
                        return res;
                    }
                    else {
                        convert = Unit._getNumberConverter(getTypeOf(value));
                        unitValue = convert(this.units[0].unit.value);
                        unitPrefixValue = convert(this.units[0].prefix.value);
                        unitOffset = convert(this.units[0].unit.offset);
                        if (prefixValue == undefined) {
                            return subtract(divide(divide(value, unitValue), unitPrefixValue), unitOffset);
                        }
                        else {
                            return subtract(divide(divide(value, unitValue), prefixValue), unitOffset);
                        }
                    }
                };
                function _findUnit(str) {
                    if (UNITS.hasOwnProperty(str)) {
                        var unit = UNITS[str];
                        var prefix = unit.prefixes[''];
                        return {
                            unit: unit,
                            prefix: prefix
                        };
                    }
                    for (var name in UNITS) {
                        if (UNITS.hasOwnProperty(name)) {
                            if (endsWith(str, name)) {
                                var unit = UNITS[name];
                                var prefixLen = (str.length - name.length);
                                var prefixName = str.substring(0, prefixLen);
                                var prefix = unit.prefixes.hasOwnProperty(prefixName)
                                    ? unit.prefixes[prefixName]
                                    : undefined;
                                if (prefix !== undefined) {
                                    return {
                                        unit: unit,
                                        prefix: prefix
                                    };
                                }
                            }
                        }
                    }
                    return null;
                }
                Unit.isValuelessUnit = function (name) {
                    return (_findUnit(name) != null);
                };
                Unit.prototype.hasBase = function (base) {
                    if (typeof (base) === "string") {
                        base = BASE_UNITS[base];
                    }
                    if (!base)
                        return false;
                    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
                        if (Math.abs((this.dimensions[i] || 0) - (base.dimensions[i] || 0)) > 1e-12) {
                            return false;
                        }
                    }
                    return true;
                };
                Unit.prototype.equalBase = function (other) {
                    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
                        if (Math.abs((this.dimensions[i] || 0) - (other.dimensions[i] || 0)) > 1e-12) {
                            return false;
                        }
                    }
                    return true;
                };
                Unit.prototype.equals = function (other) {
                    return (this.equalBase(other) && equal(this.value, other.value));
                };
                Unit.prototype.multiply = function (other) {
                    var res = this.clone();
                    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
                        res.dimensions[i] = (this.dimensions[i] || 0) + (other.dimensions[i] || 0);
                    }
                    for (var i = 0; i < other.units.length; i++) {
                        var inverted = {};
                        for (var key in other.units[i]) {
                            inverted[key] = other.units[i][key];
                        }
                        res.units.push(inverted);
                    }
                    if (this.value != null || other.value != null) {
                        var valThis = this.value == null ? this._normalize(1) : this.value;
                        var valOther = other.value == null ? other._normalize(1) : other.value;
                        res.value = multiply(valThis, valOther);
                    }
                    else {
                        res.value = null;
                    }
                    res.isUnitListSimplified = false;
                    return getNumericIfUnitless(res);
                };
                Unit.prototype.divide = function (other) {
                    var res = this.clone();
                    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
                        res.dimensions[i] = (this.dimensions[i] || 0) - (other.dimensions[i] || 0);
                    }
                    for (var i = 0; i < other.units.length; i++) {
                        var inverted = {};
                        for (var key in other.units[i]) {
                            inverted[key] = other.units[i][key];
                        }
                        inverted.power = -inverted.power;
                        res.units.push(inverted);
                    }
                    if (this.value != null || other.value != null) {
                        var valThis = this.value == null ? this._normalize(1) : this.value;
                        var valOther = other.value == null ? other._normalize(1) : other.value;
                        res.value = divide(valThis, valOther);
                    }
                    else {
                        res.value = null;
                    }
                    res.isUnitListSimplified = false;
                    return getNumericIfUnitless(res);
                };
                Unit.prototype.pow = function (p) {
                    var res = this.clone();
                    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
                        res.dimensions[i] = (this.dimensions[i] || 0) * p;
                    }
                    for (var i = 0; i < res.units.length; i++) {
                        res.units[i].power *= p;
                    }
                    if (res.value != null) {
                        res.value = pow(res.value, p);
                    }
                    else {
                        res.value = null;
                    }
                    res.isUnitListSimplified = false;
                    return getNumericIfUnitless(res);
                };
                var getNumericIfUnitless = function (unit) {
                    if (unit.equalBase(BASE_UNITS.NONE) && unit.value !== null && !config.predictable) {
                        return unit.value;
                    }
                    else {
                        return unit;
                    }
                };
                Unit.prototype.abs = function () {
                    var ret = this.clone();
                    ret.value = abs(ret.value);
                    for (var i in ret.units) {
                        if (ret.units[i].unit.name === 'VA' || ret.units[i].unit.name === 'VAR') {
                            ret.units[i].unit = UNITS["W"];
                        }
                    }
                    return ret;
                };
                Unit.prototype.to = function (valuelessUnit) {
                    var other;
                    var value = this.value == null ? this._normalize(1) : this.value;
                    if (typeof valuelessUnit === 'string') {
                        other = Unit.parse(valuelessUnit);
                        if (!this.equalBase(other)) {
                            throw new Error('Units do not match');
                        }
                        if (other.value !== null) {
                            throw new Error('Cannot convert to a unit with a value');
                        }
                        other.value = clone(value);
                        other.fixPrefix = true;
                        other.isUnitListSimplified = true;
                        return other;
                    }
                    else if (type.isUnit(valuelessUnit)) {
                        if (!this.equalBase(valuelessUnit)) {
                            throw new Error('Units do not match');
                        }
                        if (valuelessUnit.value !== null) {
                            throw new Error('Cannot convert to a unit with a value');
                        }
                        other = valuelessUnit.clone();
                        other.value = clone(value);
                        other.fixPrefix = true;
                        other.isUnitListSimplified = true;
                        return other;
                    }
                    else {
                        throw new Error('String or Unit expected as parameter');
                    }
                };
                Unit.prototype.toNumber = function (valuelessUnit) {
                    return toNumber(this.toNumeric(valuelessUnit));
                };
                Unit.prototype.toNumeric = function (valuelessUnit) {
                    var other = this;
                    if (valuelessUnit) {
                        other = this.to(valuelessUnit);
                    }
                    other.simplifyUnitListLazy();
                    if (other._isDerived()) {
                        return other._denormalize(other.value);
                    }
                    else {
                        return other._denormalize(other.value, other.units[0].prefix.value);
                    }
                };
                Unit.prototype.toString = function () {
                    return this.format();
                };
                Unit.prototype.toJSON = function () {
                    return {
                        mathjs: 'Unit',
                        value: this._denormalize(this.value),
                        unit: this.formatUnits(),
                        fixPrefix: this.fixPrefix
                    };
                };
                Unit.fromJSON = function (json) {
                    var unit = new Unit(json.value, json.unit);
                    unit.fixPrefix = json.fixPrefix || false;
                    return unit;
                };
                Unit.prototype.valueOf = Unit.prototype.toString;
                Unit.prototype.simplifyUnitListLazy = function () {
                    if (this.isUnitListSimplified || this.value == null) {
                        return;
                    }
                    var proposedUnitList = [];
                    var matchingBase;
                    for (var key in currentUnitSystem) {
                        if (this.hasBase(BASE_UNITS[key])) {
                            matchingBase = key;
                            break;
                        }
                    }
                    if (matchingBase === 'NONE') {
                        this.units = [];
                    }
                    else {
                        var matchingUnit;
                        if (matchingBase) {
                            if (currentUnitSystem.hasOwnProperty(matchingBase)) {
                                matchingUnit = currentUnitSystem[matchingBase];
                            }
                        }
                        var value;
                        var str;
                        if (matchingUnit) {
                            this.units = [{
                                    unit: matchingUnit.unit,
                                    prefix: matchingUnit.prefix,
                                    power: 1.0
                                }];
                        }
                        else {
                            var missingBaseDim = false;
                            for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
                                var baseDim = BASE_DIMENSIONS[i];
                                if (Math.abs(this.dimensions[i] || 0) > 1e-12) {
                                    if (currentUnitSystem.hasOwnProperty(baseDim)) {
                                        proposedUnitList.push({
                                            unit: currentUnitSystem[baseDim].unit,
                                            prefix: currentUnitSystem[baseDim].prefix,
                                            power: this.dimensions[i] || 0
                                        });
                                    }
                                    else {
                                        missingBaseDim = true;
                                    }
                                }
                            }
                            if (proposedUnitList.length < this.units.length && !missingBaseDim) {
                                this.units = proposedUnitList;
                            }
                        }
                    }
                    this.isUnitListSimplified = true;
                };
                Unit.prototype.toSI = function () {
                    var ret = this.clone();
                    var proposedUnitList = [];
                    var missingBaseDim = false;
                    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
                        var baseDim = BASE_DIMENSIONS[i];
                        if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {
                            if (UNIT_SYSTEMS["si"].hasOwnProperty(baseDim)) {
                                proposedUnitList.push({
                                    unit: UNIT_SYSTEMS["si"][baseDim].unit,
                                    prefix: UNIT_SYSTEMS["si"][baseDim].prefix,
                                    power: ret.dimensions[i] || 0
                                });
                            }
                            else {
                                throw new Error("Cannot express custom unit " + baseDim + " in SI units");
                            }
                        }
                    }
                    ret.units = proposedUnitList;
                    ret.isUnitListSimplified = true;
                    return ret;
                };
                Unit.prototype.formatUnits = function () {
                    this.simplifyUnitListLazy();
                    var strNum = "";
                    var strDen = "";
                    var nNum = 0;
                    var nDen = 0;
                    for (var i = 0; i < this.units.length; i++) {
                        if (this.units[i].power > 0) {
                            nNum++;
                            strNum += " " + this.units[i].prefix.name + this.units[i].unit.name;
                            if (Math.abs(this.units[i].power - 1.0) > 1e-15) {
                                strNum += "^" + this.units[i].power;
                            }
                        }
                        else if (this.units[i].power < 0) {
                            nDen++;
                        }
                    }
                    if (nDen > 0) {
                        for (var i = 0; i < this.units.length; i++) {
                            if (this.units[i].power < 0) {
                                if (nNum > 0) {
                                    strDen += " " + this.units[i].prefix.name + this.units[i].unit.name;
                                    if (Math.abs(this.units[i].power + 1.0) > 1e-15) {
                                        strDen += "^" + (-this.units[i].power);
                                    }
                                }
                                else {
                                    strDen += " " + this.units[i].prefix.name + this.units[i].unit.name;
                                    strDen += "^" + (this.units[i].power);
                                }
                            }
                        }
                    }
                    strNum = strNum.substr(1);
                    strDen = strDen.substr(1);
                    if (nNum > 1 && nDen > 0) {
                        strNum = "(" + strNum + ")";
                    }
                    if (nDen > 1 && nNum > 0) {
                        strDen = "(" + strDen + ")";
                    }
                    var str = strNum;
                    if (nNum > 0 && nDen > 0) {
                        str += " / ";
                    }
                    str += strDen;
                    return str;
                };
                Unit.prototype.format = function (options) {
                    this.simplifyUnitListLazy();
                    var isImaginary = false;
                    var isReal = true;
                    if (typeof (this.value) !== 'undefined' && this.value !== null && type.isComplex(this.value)) {
                        isImaginary = Math.abs(this.value.re) < 1e-14;
                        isReal = Math.abs(this.value.im) < 1e-14;
                    }
                    for (var i in this.units) {
                        if (this.units[i].unit) {
                            if (this.units[i].unit.name === 'VA' && isImaginary) {
                                this.units[i].unit = UNITS["VAR"];
                            }
                            else if (this.units[i].unit.name === 'VAR' && !isImaginary) {
                                this.units[i].unit = UNITS["VA"];
                            }
                        }
                    }
                    if (this.units.length === 1 && !this.fixPrefix) {
                        if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) < 1e-14) {
                            this.units[0].prefix = this._bestPrefix();
                        }
                    }
                    var value = this._denormalize(this.value);
                    var str = (this.value !== null) ? format(value, options || {}) : '';
                    var unitStr = this.formatUnits();
                    if (this.value && type.isComplex(this.value)) {
                        str = "(" + str + ")";
                    }
                    if (unitStr.length > 0 && str.length > 0) {
                        str += " ";
                    }
                    str += unitStr;
                    return str;
                };
                Unit.prototype._bestPrefix = function () {
                    if (this.units.length !== 1) {
                        throw new Error("Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!");
                    }
                    if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) >= 1e-14) {
                        throw new Error("Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!");
                    }
                    var absValue = abs(this.value);
                    var absUnitValue = abs(this.units[0].unit.value);
                    var bestPrefix = this.units[0].prefix;
                    if (absValue === 0) {
                        return bestPrefix;
                    }
                    var power = this.units[0].power;
                    var bestDiff = Math.log(absValue / Math.pow(bestPrefix.value * absUnitValue, power)) / Math.LN10 - 1.2;
                    if (bestDiff > -2.200001 && bestDiff < 1.800001)
                        return bestPrefix;
                    bestDiff = Math.abs(bestDiff);
                    var prefixes = this.units[0].unit.prefixes;
                    for (var p in prefixes) {
                        if (prefixes.hasOwnProperty(p)) {
                            var prefix = prefixes[p];
                            if (prefix.scientific) {
                                var diff = Math.abs(Math.log(absValue / Math.pow(prefix.value * absUnitValue, power)) / Math.LN10 - 1.2);
                                if (diff < bestDiff
                                    || (diff === bestDiff && prefix.name.length < bestPrefix.name.length)) {
                                    bestPrefix = prefix;
                                    bestDiff = diff;
                                }
                            }
                        }
                    }
                    return bestPrefix;
                };
                Unit.prototype.splitUnit = function (parts) {
                    var x = this.clone();
                    var ret = [];
                    for (var i = 0; i < parts.length; i++) {
                        x = x.to(parts[i]);
                        if (i == parts.length - 1)
                            break;
                        var xNumeric = x.toNumeric();
                        var xRounded = round(xNumeric);
                        var xFixed;
                        var isNearlyEqual = equal(xRounded, xNumeric);
                        if (isNearlyEqual) {
                            xFixed = xRounded;
                        }
                        else {
                            xFixed = fix(x.toNumeric());
                        }
                        var y = new Unit(xFixed, parts[i].toString());
                        ret.push(y);
                        x = subtract(x, y);
                    }
                    var testSum = 0;
                    for (var i = 0; i < ret.length; i++) {
                        testSum = add(testSum, ret[i].value);
                    }
                    if (equal(testSum, this.value)) {
                        x.value = 0;
                    }
                    ret.push(x);
                    return ret;
                };
                var PREFIXES = {
                    NONE: {
                        '': { name: '', value: 1, scientific: true }
                    },
                    SHORT: {
                        '': { name: '', value: 1, scientific: true },
                        'da': { name: 'da', value: 1e1, scientific: false },
                        'h': { name: 'h', value: 1e2, scientific: false },
                        'k': { name: 'k', value: 1e3, scientific: true },
                        'M': { name: 'M', value: 1e6, scientific: true },
                        'G': { name: 'G', value: 1e9, scientific: true },
                        'T': { name: 'T', value: 1e12, scientific: true },
                        'P': { name: 'P', value: 1e15, scientific: true },
                        'E': { name: 'E', value: 1e18, scientific: true },
                        'Z': { name: 'Z', value: 1e21, scientific: true },
                        'Y': { name: 'Y', value: 1e24, scientific: true },
                        'd': { name: 'd', value: 1e-1, scientific: false },
                        'c': { name: 'c', value: 1e-2, scientific: false },
                        'm': { name: 'm', value: 1e-3, scientific: true },
                        'u': { name: 'u', value: 1e-6, scientific: true },
                        'n': { name: 'n', value: 1e-9, scientific: true },
                        'p': { name: 'p', value: 1e-12, scientific: true },
                        'f': { name: 'f', value: 1e-15, scientific: true },
                        'a': { name: 'a', value: 1e-18, scientific: true },
                        'z': { name: 'z', value: 1e-21, scientific: true },
                        'y': { name: 'y', value: 1e-24, scientific: true }
                    },
                    LONG: {
                        '': { name: '', value: 1, scientific: true },
                        'deca': { name: 'deca', value: 1e1, scientific: false },
                        'hecto': { name: 'hecto', value: 1e2, scientific: false },
                        'kilo': { name: 'kilo', value: 1e3, scientific: true },
                        'mega': { name: 'mega', value: 1e6, scientific: true },
                        'giga': { name: 'giga', value: 1e9, scientific: true },
                        'tera': { name: 'tera', value: 1e12, scientific: true },
                        'peta': { name: 'peta', value: 1e15, scientific: true },
                        'exa': { name: 'exa', value: 1e18, scientific: true },
                        'zetta': { name: 'zetta', value: 1e21, scientific: true },
                        'yotta': { name: 'yotta', value: 1e24, scientific: true },
                        'deci': { name: 'deci', value: 1e-1, scientific: false },
                        'centi': { name: 'centi', value: 1e-2, scientific: false },
                        'milli': { name: 'milli', value: 1e-3, scientific: true },
                        'micro': { name: 'micro', value: 1e-6, scientific: true },
                        'nano': { name: 'nano', value: 1e-9, scientific: true },
                        'pico': { name: 'pico', value: 1e-12, scientific: true },
                        'femto': { name: 'femto', value: 1e-15, scientific: true },
                        'atto': { name: 'atto', value: 1e-18, scientific: true },
                        'zepto': { name: 'zepto', value: 1e-21, scientific: true },
                        'yocto': { name: 'yocto', value: 1e-24, scientific: true }
                    },
                    SQUARED: {
                        '': { name: '', value: 1, scientific: true },
                        'da': { name: 'da', value: 1e2, scientific: false },
                        'h': { name: 'h', value: 1e4, scientific: false },
                        'k': { name: 'k', value: 1e6, scientific: true },
                        'M': { name: 'M', value: 1e12, scientific: true },
                        'G': { name: 'G', value: 1e18, scientific: true },
                        'T': { name: 'T', value: 1e24, scientific: true },
                        'P': { name: 'P', value: 1e30, scientific: true },
                        'E': { name: 'E', value: 1e36, scientific: true },
                        'Z': { name: 'Z', value: 1e42, scientific: true },
                        'Y': { name: 'Y', value: 1e48, scientific: true },
                        'd': { name: 'd', value: 1e-2, scientific: false },
                        'c': { name: 'c', value: 1e-4, scientific: false },
                        'm': { name: 'm', value: 1e-6, scientific: true },
                        'u': { name: 'u', value: 1e-12, scientific: true },
                        'n': { name: 'n', value: 1e-18, scientific: true },
                        'p': { name: 'p', value: 1e-24, scientific: true },
                        'f': { name: 'f', value: 1e-30, scientific: true },
                        'a': { name: 'a', value: 1e-36, scientific: true },
                        'z': { name: 'z', value: 1e-42, scientific: true },
                        'y': { name: 'y', value: 1e-48, scientific: true }
                    },
                    CUBIC: {
                        '': { name: '', value: 1, scientific: true },
                        'da': { name: 'da', value: 1e3, scientific: false },
                        'h': { name: 'h', value: 1e6, scientific: false },
                        'k': { name: 'k', value: 1e9, scientific: true },
                        'M': { name: 'M', value: 1e18, scientific: true },
                        'G': { name: 'G', value: 1e27, scientific: true },
                        'T': { name: 'T', value: 1e36, scientific: true },
                        'P': { name: 'P', value: 1e45, scientific: true },
                        'E': { name: 'E', value: 1e54, scientific: true },
                        'Z': { name: 'Z', value: 1e63, scientific: true },
                        'Y': { name: 'Y', value: 1e72, scientific: true },
                        'd': { name: 'd', value: 1e-3, scientific: false },
                        'c': { name: 'c', value: 1e-6, scientific: false },
                        'm': { name: 'm', value: 1e-9, scientific: true },
                        'u': { name: 'u', value: 1e-18, scientific: true },
                        'n': { name: 'n', value: 1e-27, scientific: true },
                        'p': { name: 'p', value: 1e-36, scientific: true },
                        'f': { name: 'f', value: 1e-45, scientific: true },
                        'a': { name: 'a', value: 1e-54, scientific: true },
                        'z': { name: 'z', value: 1e-63, scientific: true },
                        'y': { name: 'y', value: 1e-72, scientific: true }
                    },
                    BINARY_SHORT: {
                        '': { name: '', value: 1, scientific: true },
                        'k': { name: 'k', value: 1e3, scientific: true },
                        'M': { name: 'M', value: 1e6, scientific: true },
                        'G': { name: 'G', value: 1e9, scientific: true },
                        'T': { name: 'T', value: 1e12, scientific: true },
                        'P': { name: 'P', value: 1e15, scientific: true },
                        'E': { name: 'E', value: 1e18, scientific: true },
                        'Z': { name: 'Z', value: 1e21, scientific: true },
                        'Y': { name: 'Y', value: 1e24, scientific: true },
                        'Ki': { name: 'Ki', value: 1024, scientific: true },
                        'Mi': { name: 'Mi', value: Math.pow(1024, 2), scientific: true },
                        'Gi': { name: 'Gi', value: Math.pow(1024, 3), scientific: true },
                        'Ti': { name: 'Ti', value: Math.pow(1024, 4), scientific: true },
                        'Pi': { name: 'Pi', value: Math.pow(1024, 5), scientific: true },
                        'Ei': { name: 'Ei', value: Math.pow(1024, 6), scientific: true },
                        'Zi': { name: 'Zi', value: Math.pow(1024, 7), scientific: true },
                        'Yi': { name: 'Yi', value: Math.pow(1024, 8), scientific: true }
                    },
                    BINARY_LONG: {
                        '': { name: '', value: 1, scientific: true },
                        'kilo': { name: 'kilo', value: 1e3, scientific: true },
                        'mega': { name: 'mega', value: 1e6, scientific: true },
                        'giga': { name: 'giga', value: 1e9, scientific: true },
                        'tera': { name: 'tera', value: 1e12, scientific: true },
                        'peta': { name: 'peta', value: 1e15, scientific: true },
                        'exa': { name: 'exa', value: 1e18, scientific: true },
                        'zetta': { name: 'zetta', value: 1e21, scientific: true },
                        'yotta': { name: 'yotta', value: 1e24, scientific: true },
                        'kibi': { name: 'kibi', value: 1024, scientific: true },
                        'mebi': { name: 'mebi', value: Math.pow(1024, 2), scientific: true },
                        'gibi': { name: 'gibi', value: Math.pow(1024, 3), scientific: true },
                        'tebi': { name: 'tebi', value: Math.pow(1024, 4), scientific: true },
                        'pebi': { name: 'pebi', value: Math.pow(1024, 5), scientific: true },
                        'exi': { name: 'exi', value: Math.pow(1024, 6), scientific: true },
                        'zebi': { name: 'zebi', value: Math.pow(1024, 7), scientific: true },
                        'yobi': { name: 'yobi', value: Math.pow(1024, 8), scientific: true }
                    },
                    BTU: {
                        '': { name: '', value: 1, scientific: true },
                        'MM': { name: 'MM', value: 1e6, scientific: true }
                    }
                };
                PREFIXES.SHORTLONG = {};
                for (var key in PREFIXES.SHORT) {
                    if (PREFIXES.SHORT.hasOwnProperty(key)) {
                        PREFIXES.SHORTLONG[key] = PREFIXES.SHORT[key];
                    }
                }
                for (var key in PREFIXES.LONG) {
                    if (PREFIXES.LONG.hasOwnProperty(key)) {
                        PREFIXES.SHORTLONG[key] = PREFIXES.LONG[key];
                    }
                }
                var BASE_DIMENSIONS = ["MASS", "LENGTH", "TIME", "CURRENT", "TEMPERATURE", "LUMINOUS_INTENSITY", "AMOUNT_OF_SUBSTANCE", "ANGLE", "BIT"];
                var BASE_UNITS = {
                    NONE: {
                        dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 0]
                    },
                    MASS: {
                        dimensions: [1, 0, 0, 0, 0, 0, 0, 0, 0]
                    },
                    LENGTH: {
                        dimensions: [0, 1, 0, 0, 0, 0, 0, 0, 0]
                    },
                    TIME: {
                        dimensions: [0, 0, 1, 0, 0, 0, 0, 0, 0]
                    },
                    CURRENT: {
                        dimensions: [0, 0, 0, 1, 0, 0, 0, 0, 0]
                    },
                    TEMPERATURE: {
                        dimensions: [0, 0, 0, 0, 1, 0, 0, 0, 0]
                    },
                    LUMINOUS_INTENSITY: {
                        dimensions: [0, 0, 0, 0, 0, 1, 0, 0, 0]
                    },
                    AMOUNT_OF_SUBSTANCE: {
                        dimensions: [0, 0, 0, 0, 0, 0, 1, 0, 0]
                    },
                    FORCE: {
                        dimensions: [1, 1, -2, 0, 0, 0, 0, 0, 0]
                    },
                    SURFACE: {
                        dimensions: [0, 2, 0, 0, 0, 0, 0, 0, 0]
                    },
                    VOLUME: {
                        dimensions: [0, 3, 0, 0, 0, 0, 0, 0, 0]
                    },
                    ENERGY: {
                        dimensions: [1, 2, -2, 0, 0, 0, 0, 0, 0]
                    },
                    POWER: {
                        dimensions: [1, 2, -3, 0, 0, 0, 0, 0, 0]
                    },
                    PRESSURE: {
                        dimensions: [1, -1, -2, 0, 0, 0, 0, 0, 0]
                    },
                    ELECTRIC_CHARGE: {
                        dimensions: [0, 0, 1, 1, 0, 0, 0, 0, 0]
                    },
                    ELECTRIC_CAPACITANCE: {
                        dimensions: [-1, -2, 4, 2, 0, 0, 0, 0, 0]
                    },
                    ELECTRIC_POTENTIAL: {
                        dimensions: [1, 2, -3, -1, 0, 0, 0, 0, 0]
                    },
                    ELECTRIC_RESISTANCE: {
                        dimensions: [1, 2, -3, -2, 0, 0, 0, 0, 0]
                    },
                    ELECTRIC_INDUCTANCE: {
                        dimensions: [1, 2, -2, -2, 0, 0, 0, 0, 0]
                    },
                    ELECTRIC_CONDUCTANCE: {
                        dimensions: [-1, -2, 3, 2, 0, 0, 0, 0, 0]
                    },
                    MAGNETIC_FLUX: {
                        dimensions: [1, 2, -2, -1, 0, 0, 0, 0, 0]
                    },
                    MAGNETIC_FLUX_DENSITY: {
                        dimensions: [1, 0, -2, -1, 0, 0, 0, 0, 0]
                    },
                    FREQUENCY: {
                        dimensions: [0, 0, -1, 0, 0, 0, 0, 0, 0]
                    },
                    ANGLE: {
                        dimensions: [0, 0, 0, 0, 0, 0, 0, 1, 0]
                    },
                    BIT: {
                        dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 1]
                    }
                };
                for (var key in BASE_UNITS) {
                    BASE_UNITS[key].key = key;
                }
                var BASE_UNIT_NONE = {};
                var UNIT_NONE = { name: '', base: BASE_UNIT_NONE, value: 1, offset: 0, dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 0] };
                var UNITS = {
                    meter: {
                        name: 'meter',
                        base: BASE_UNITS.LENGTH,
                        prefixes: PREFIXES.LONG,
                        value: 1,
                        offset: 0
                    },
                    inch: {
                        name: 'inch',
                        base: BASE_UNITS.LENGTH,
                        prefixes: PREFIXES.NONE,
                        value: 0.0254,
                        offset: 0
                    },
                    foot: {
                        name: 'foot',
                        base: BASE_UNITS.LENGTH,
                        prefixes: PREFIXES.NONE,
                        value: 0.3048,
                        offset: 0
                    },
                    yard: {
                        name: 'yard',
                        base: BASE_UNITS.LENGTH,
                        prefixes: PREFIXES.NONE,
                        value: 0.9144,
                        offset: 0
                    },
                    mile: {
                        name: 'mile',
                        base: BASE_UNITS.LENGTH,
                        prefixes: PREFIXES.NONE,
                        value: 1609.344,
                        offset: 0
                    },
                    link: {
                        name: 'link',
                        base: BASE_UNITS.LENGTH,
                        prefixes: PREFIXES.NONE,
                        value: 0.201168,
                        offset: 0
                    },
                    rod: {
                        name: 'rod',
                        base: BASE_UNITS.LENGTH,
                        prefixes: PREFIXES.NONE,
                        value: 5.029210,
                        offset: 0
                    },
                    chain: {
                        name: 'chain',
                        base: BASE_UNITS.LENGTH,
                        prefixes: PREFIXES.NONE,
                        value: 20.1168,
                        offset: 0
                    },
                    angstrom: {
                        name: 'angstrom',
                        base: BASE_UNITS.LENGTH,
                        prefixes: PREFIXES.NONE,
                        value: 1e-10,
                        offset: 0
                    },
                    m: {
                        name: 'm',
                        base: BASE_UNITS.LENGTH,
                        prefixes: PREFIXES.SHORT,
                        value: 1,
                        offset: 0
                    },
                    'in': {
                        name: 'in',
                        base: BASE_UNITS.LENGTH,
                        prefixes: PREFIXES.NONE,
                        value: 0.0254,
                        offset: 0
                    },
                    ft: {
                        name: 'ft',
                        base: BASE_UNITS.LENGTH,
                        prefixes: PREFIXES.NONE,
                        value: 0.3048,
                        offset: 0
                    },
                    yd: {
                        name: 'yd',
                        base: BASE_UNITS.LENGTH,
                        prefixes: PREFIXES.NONE,
                        value: 0.9144,
                        offset: 0
                    },
                    mi: {
                        name: 'mi',
                        base: BASE_UNITS.LENGTH,
                        prefixes: PREFIXES.NONE,
                        value: 1609.344,
                        offset: 0
                    },
                    li: {
                        name: 'li',
                        base: BASE_UNITS.LENGTH,
                        prefixes: PREFIXES.NONE,
                        value: 0.201168,
                        offset: 0
                    },
                    rd: {
                        name: 'rd',
                        base: BASE_UNITS.LENGTH,
                        prefixes: PREFIXES.NONE,
                        value: 5.029210,
                        offset: 0
                    },
                    ch: {
                        name: 'ch',
                        base: BASE_UNITS.LENGTH,
                        prefixes: PREFIXES.NONE,
                        value: 20.1168,
                        offset: 0
                    },
                    mil: {
                        name: 'mil',
                        base: BASE_UNITS.LENGTH,
                        prefixes: PREFIXES.NONE,
                        value: 0.0000254,
                        offset: 0
                    },
                    m2: {
                        name: 'm2',
                        base: BASE_UNITS.SURFACE,
                        prefixes: PREFIXES.SQUARED,
                        value: 1,
                        offset: 0
                    },
                    sqin: {
                        name: 'sqin',
                        base: BASE_UNITS.SURFACE,
                        prefixes: PREFIXES.NONE,
                        value: 0.00064516,
                        offset: 0
                    },
                    sqft: {
                        name: 'sqft',
                        base: BASE_UNITS.SURFACE,
                        prefixes: PREFIXES.NONE,
                        value: 0.09290304,
                        offset: 0
                    },
                    sqyd: {
                        name: 'sqyd',
                        base: BASE_UNITS.SURFACE,
                        prefixes: PREFIXES.NONE,
                        value: 0.83612736,
                        offset: 0
                    },
                    sqmi: {
                        name: 'sqmi',
                        base: BASE_UNITS.SURFACE,
                        prefixes: PREFIXES.NONE,
                        value: 2589988.110336,
                        offset: 0
                    },
                    sqrd: {
                        name: 'sqrd',
                        base: BASE_UNITS.SURFACE,
                        prefixes: PREFIXES.NONE,
                        value: 25.29295,
                        offset: 0
                    },
                    sqch: {
                        name: 'sqch',
                        base: BASE_UNITS.SURFACE,
                        prefixes: PREFIXES.NONE,
                        value: 404.6873,
                        offset: 0
                    },
                    sqmil: {
                        name: 'sqmil',
                        base: BASE_UNITS.SURFACE,
                        prefixes: PREFIXES.NONE,
                        value: 6.4516e-10,
                        offset: 0
                    },
                    acre: {
                        name: 'acre',
                        base: BASE_UNITS.SURFACE,
                        prefixes: PREFIXES.NONE,
                        value: 4046.86,
                        offset: 0
                    },
                    hectare: {
                        name: 'hectare',
                        base: BASE_UNITS.SURFACE,
                        prefixes: PREFIXES.NONE,
                        value: 10000,
                        offset: 0
                    },
                    m3: {
                        name: 'm3',
                        base: BASE_UNITS.VOLUME,
                        prefixes: PREFIXES.CUBIC,
                        value: 1,
                        offset: 0
                    },
                    L: {
                        name: 'L',
                        base: BASE_UNITS.VOLUME,
                        prefixes: PREFIXES.SHORT,
                        value: 0.001,
                        offset: 0
                    },
                    l: {
                        name: 'l',
                        base: BASE_UNITS.VOLUME,
                        prefixes: PREFIXES.SHORT,
                        value: 0.001,
                        offset: 0
                    },
                    litre: {
                        name: 'litre',
                        base: BASE_UNITS.VOLUME,
                        prefixes: PREFIXES.LONG,
                        value: 0.001,
                        offset: 0
                    },
                    cuin: {
                        name: 'cuin',
                        base: BASE_UNITS.VOLUME,
                        prefixes: PREFIXES.NONE,
                        value: 1.6387064e-5,
                        offset: 0
                    },
                    cuft: {
                        name: 'cuft',
                        base: BASE_UNITS.VOLUME,
                        prefixes: PREFIXES.NONE,
                        value: 0.028316846592,
                        offset: 0
                    },
                    cuyd: {
                        name: 'cuyd',
                        base: BASE_UNITS.VOLUME,
                        prefixes: PREFIXES.NONE,
                        value: 0.764554857984,
                        offset: 0
                    },
                    teaspoon: {
                        name: 'teaspoon',
                        base: BASE_UNITS.VOLUME,
                        prefixes: PREFIXES.NONE,
                        value: 0.000005,
                        offset: 0
                    },
                    tablespoon: {
                        name: 'tablespoon',
                        base: BASE_UNITS.VOLUME,
                        prefixes: PREFIXES.NONE,
                        value: 0.000015,
                        offset: 0
                    },
                    drop: {
                        name: 'drop',
                        base: BASE_UNITS.VOLUME,
                        prefixes: PREFIXES.NONE,
                        value: 5e-8,
                        offset: 0
                    },
                    gtt: {
                        name: 'gtt',
                        base: BASE_UNITS.VOLUME,
                        prefixes: PREFIXES.NONE,
                        value: 5e-8,
                        offset: 0
                    },
                    minim: {
                        name: 'minim',
                        base: BASE_UNITS.VOLUME,
                        prefixes: PREFIXES.NONE,
                        value: 0.00000006161152,
                        offset: 0
                    },
                    fluiddram: {
                        name: 'fluiddram',
                        base: BASE_UNITS.VOLUME,
                        prefixes: PREFIXES.NONE,
                        value: 0.0000036966911,
                        offset: 0
                    },
                    fluidounce: {
                        name: 'fluidounce',
                        base: BASE_UNITS.VOLUME,
                        prefixes: PREFIXES.NONE,
                        value: 0.00002957353,
                        offset: 0
                    },
                    gill: {
                        name: 'gill',
                        base: BASE_UNITS.VOLUME,
                        prefixes: PREFIXES.NONE,
                        value: 0.0001182941,
                        offset: 0
                    },
                    cc: {
                        name: 'cc',
                        base: BASE_UNITS.VOLUME,
                        prefixes: PREFIXES.NONE,
                        value: 1e-6,
                        offset: 0
                    },
                    cup: {
                        name: 'cup',
                        base: BASE_UNITS.VOLUME,
                        prefixes: PREFIXES.NONE,
                        value: 0.0002365882,
                        offset: 0
                    },
                    pint: {
                        name: 'pint',
                        base: BASE_UNITS.VOLUME,
                        prefixes: PREFIXES.NONE,
                        value: 0.0004731765,
                        offset: 0
                    },
                    quart: {
                        name: 'quart',
                        base: BASE_UNITS.VOLUME,
                        prefixes: PREFIXES.NONE,
                        value: 0.0009463529,
                        offset: 0
                    },
                    gallon: {
                        name: 'gallon',
                        base: BASE_UNITS.VOLUME,
                        prefixes: PREFIXES.NONE,
                        value: 0.003785412,
                        offset: 0
                    },
                    beerbarrel: {
                        name: 'beerbarrel',
                        base: BASE_UNITS.VOLUME,
                        prefixes: PREFIXES.NONE,
                        value: 0.1173478,
                        offset: 0
                    },
                    oilbarrel: {
                        name: 'oilbarrel',
                        base: BASE_UNITS.VOLUME,
                        prefixes: PREFIXES.NONE,
                        value: 0.1589873,
                        offset: 0
                    },
                    hogshead: {
                        name: 'hogshead',
                        base: BASE_UNITS.VOLUME,
                        prefixes: PREFIXES.NONE,
                        value: 0.2384810,
                        offset: 0
                    },
                    fldr: {
                        name: 'fldr',
                        base: BASE_UNITS.VOLUME,
                        prefixes: PREFIXES.NONE,
                        value: 0.0000036966911,
                        offset: 0
                    },
                    floz: {
                        name: 'floz',
                        base: BASE_UNITS.VOLUME,
                        prefixes: PREFIXES.NONE,
                        value: 0.00002957353,
                        offset: 0
                    },
                    gi: {
                        name: 'gi',
                        base: BASE_UNITS.VOLUME,
                        prefixes: PREFIXES.NONE,
                        value: 0.0001182941,
                        offset: 0
                    },
                    cp: {
                        name: 'cp',
                        base: BASE_UNITS.VOLUME,
                        prefixes: PREFIXES.NONE,
                        value: 0.0002365882,
                        offset: 0
                    },
                    pt: {
                        name: 'pt',
                        base: BASE_UNITS.VOLUME,
                        prefixes: PREFIXES.NONE,
                        value: 0.0004731765,
                        offset: 0
                    },
                    qt: {
                        name: 'qt',
                        base: BASE_UNITS.VOLUME,
                        prefixes: PREFIXES.NONE,
                        value: 0.0009463529,
                        offset: 0
                    },
                    gal: {
                        name: 'gal',
                        base: BASE_UNITS.VOLUME,
                        prefixes: PREFIXES.NONE,
                        value: 0.003785412,
                        offset: 0
                    },
                    bbl: {
                        name: 'bbl',
                        base: BASE_UNITS.VOLUME,
                        prefixes: PREFIXES.NONE,
                        value: 0.1173478,
                        offset: 0
                    },
                    obl: {
                        name: 'obl',
                        base: BASE_UNITS.VOLUME,
                        prefixes: PREFIXES.NONE,
                        value: 0.1589873,
                        offset: 0
                    },
                    g: {
                        name: 'g',
                        base: BASE_UNITS.MASS,
                        prefixes: PREFIXES.SHORT,
                        value: 0.001,
                        offset: 0
                    },
                    gram: {
                        name: 'gram',
                        base: BASE_UNITS.MASS,
                        prefixes: PREFIXES.LONG,
                        value: 0.001,
                        offset: 0
                    },
                    ton: {
                        name: 'ton',
                        base: BASE_UNITS.MASS,
                        prefixes: PREFIXES.SHORT,
                        value: 907.18474,
                        offset: 0
                    },
                    tonne: {
                        name: 'tonne',
                        base: BASE_UNITS.MASS,
                        prefixes: PREFIXES.SHORT,
                        value: 1000,
                        offset: 0
                    },
                    grain: {
                        name: 'grain',
                        base: BASE_UNITS.MASS,
                        prefixes: PREFIXES.NONE,
                        value: 64.79891e-6,
                        offset: 0
                    },
                    dram: {
                        name: 'dram',
                        base: BASE_UNITS.MASS,
                        prefixes: PREFIXES.NONE,
                        value: 1.7718451953125e-3,
                        offset: 0
                    },
                    ounce: {
                        name: 'ounce',
                        base: BASE_UNITS.MASS,
                        prefixes: PREFIXES.NONE,
                        value: 28.349523125e-3,
                        offset: 0
                    },
                    poundmass: {
                        name: 'poundmass',
                        base: BASE_UNITS.MASS,
                        prefixes: PREFIXES.NONE,
                        value: 453.59237e-3,
                        offset: 0
                    },
                    hundredweight: {
                        name: 'hundredweight',
                        base: BASE_UNITS.MASS,
                        prefixes: PREFIXES.NONE,
                        value: 45.359237,
                        offset: 0
                    },
                    stick: {
                        name: 'stick',
                        base: BASE_UNITS.MASS,
                        prefixes: PREFIXES.NONE,
                        value: 115e-3,
                        offset: 0
                    },
                    stone: {
                        name: 'stone',
                        base: BASE_UNITS.MASS,
                        prefixes: PREFIXES.NONE,
                        value: 6.35029318,
                        offset: 0
                    },
                    gr: {
                        name: 'gr',
                        base: BASE_UNITS.MASS,
                        prefixes: PREFIXES.NONE,
                        value: 64.79891e-6,
                        offset: 0
                    },
                    dr: {
                        name: 'dr',
                        base: BASE_UNITS.MASS,
                        prefixes: PREFIXES.NONE,
                        value: 1.7718451953125e-3,
                        offset: 0
                    },
                    oz: {
                        name: 'oz',
                        base: BASE_UNITS.MASS,
                        prefixes: PREFIXES.NONE,
                        value: 28.349523125e-3,
                        offset: 0
                    },
                    lbm: {
                        name: 'lbm',
                        base: BASE_UNITS.MASS,
                        prefixes: PREFIXES.NONE,
                        value: 453.59237e-3,
                        offset: 0
                    },
                    cwt: {
                        name: 'cwt',
                        base: BASE_UNITS.MASS,
                        prefixes: PREFIXES.NONE,
                        value: 45.359237,
                        offset: 0
                    },
                    s: {
                        name: 's',
                        base: BASE_UNITS.TIME,
                        prefixes: PREFIXES.SHORT,
                        value: 1,
                        offset: 0
                    },
                    min: {
                        name: 'min',
                        base: BASE_UNITS.TIME,
                        prefixes: PREFIXES.NONE,
                        value: 60,
                        offset: 0
                    },
                    h: {
                        name: 'h',
                        base: BASE_UNITS.TIME,
                        prefixes: PREFIXES.NONE,
                        value: 3600,
                        offset: 0
                    },
                    second: {
                        name: 'second',
                        base: BASE_UNITS.TIME,
                        prefixes: PREFIXES.LONG,
                        value: 1,
                        offset: 0
                    },
                    sec: {
                        name: 'sec',
                        base: BASE_UNITS.TIME,
                        prefixes: PREFIXES.LONG,
                        value: 1,
                        offset: 0
                    },
                    minute: {
                        name: 'minute',
                        base: BASE_UNITS.TIME,
                        prefixes: PREFIXES.NONE,
                        value: 60,
                        offset: 0
                    },
                    hour: {
                        name: 'hour',
                        base: BASE_UNITS.TIME,
                        prefixes: PREFIXES.NONE,
                        value: 3600,
                        offset: 0
                    },
                    day: {
                        name: 'day',
                        base: BASE_UNITS.TIME,
                        prefixes: PREFIXES.NONE,
                        value: 86400,
                        offset: 0
                    },
                    week: {
                        name: 'week',
                        base: BASE_UNITS.TIME,
                        prefixes: PREFIXES.NONE,
                        value: 7 * 86400,
                        offset: 0
                    },
                    month: {
                        name: 'month',
                        base: BASE_UNITS.TIME,
                        prefixes: PREFIXES.NONE,
                        value: 2629800,
                        offset: 0
                    },
                    year: {
                        name: 'year',
                        base: BASE_UNITS.TIME,
                        prefixes: PREFIXES.NONE,
                        value: 31557600,
                        offset: 0
                    },
                    decade: {
                        name: 'year',
                        base: BASE_UNITS.TIME,
                        prefixes: PREFIXES.NONE,
                        value: 315576000,
                        offset: 0
                    },
                    century: {
                        name: 'century',
                        base: BASE_UNITS.TIME,
                        prefixes: PREFIXES.NONE,
                        value: 3155760000,
                        offset: 0
                    },
                    millennium: {
                        name: 'millennium',
                        base: BASE_UNITS.TIME,
                        prefixes: PREFIXES.NONE,
                        value: 31557600000,
                        offset: 0
                    },
                    hertz: {
                        name: 'Hertz',
                        base: BASE_UNITS.FREQUENCY,
                        prefixes: PREFIXES.LONG,
                        value: 1,
                        offset: 0,
                        reciprocal: true
                    },
                    Hz: {
                        name: 'Hz',
                        base: BASE_UNITS.FREQUENCY,
                        prefixes: PREFIXES.SHORT,
                        value: 1,
                        offset: 0,
                        reciprocal: true
                    },
                    rad: {
                        name: 'rad',
                        base: BASE_UNITS.ANGLE,
                        prefixes: PREFIXES.LONG,
                        value: 1,
                        offset: 0
                    },
                    deg: {
                        name: 'deg',
                        base: BASE_UNITS.ANGLE,
                        prefixes: PREFIXES.LONG,
                        value: null,
                        offset: 0
                    },
                    grad: {
                        name: 'grad',
                        base: BASE_UNITS.ANGLE,
                        prefixes: PREFIXES.LONG,
                        value: null,
                        offset: 0
                    },
                    cycle: {
                        name: 'cycle',
                        base: BASE_UNITS.ANGLE,
                        prefixes: PREFIXES.NONE,
                        value: null,
                        offset: 0
                    },
                    arcsec: {
                        name: 'arcsec',
                        base: BASE_UNITS.ANGLE,
                        prefixes: PREFIXES.NONE,
                        value: null,
                        offset: 0
                    },
                    arcmin: {
                        name: 'arcmin',
                        base: BASE_UNITS.ANGLE,
                        prefixes: PREFIXES.NONE,
                        value: null,
                        offset: 0
                    },
                    A: {
                        name: 'A',
                        base: BASE_UNITS.CURRENT,
                        prefixes: PREFIXES.SHORT,
                        value: 1,
                        offset: 0
                    },
                    ampere: {
                        name: 'ampere',
                        base: BASE_UNITS.CURRENT,
                        prefixes: PREFIXES.LONG,
                        value: 1,
                        offset: 0
                    },
                    K: {
                        name: 'K',
                        base: BASE_UNITS.TEMPERATURE,
                        prefixes: PREFIXES.NONE,
                        value: 1,
                        offset: 0
                    },
                    degC: {
                        name: 'degC',
                        base: BASE_UNITS.TEMPERATURE,
                        prefixes: PREFIXES.NONE,
                        value: 1,
                        offset: 273.15
                    },
                    degF: {
                        name: 'degF',
                        base: BASE_UNITS.TEMPERATURE,
                        prefixes: PREFIXES.NONE,
                        value: 1 / 1.8,
                        offset: 459.67
                    },
                    degR: {
                        name: 'degR',
                        base: BASE_UNITS.TEMPERATURE,
                        prefixes: PREFIXES.NONE,
                        value: 1 / 1.8,
                        offset: 0
                    },
                    kelvin: {
                        name: 'kelvin',
                        base: BASE_UNITS.TEMPERATURE,
                        prefixes: PREFIXES.NONE,
                        value: 1,
                        offset: 0
                    },
                    celsius: {
                        name: 'celsius',
                        base: BASE_UNITS.TEMPERATURE,
                        prefixes: PREFIXES.NONE,
                        value: 1,
                        offset: 273.15
                    },
                    fahrenheit: {
                        name: 'fahrenheit',
                        base: BASE_UNITS.TEMPERATURE,
                        prefixes: PREFIXES.NONE,
                        value: 1 / 1.8,
                        offset: 459.67
                    },
                    rankine: {
                        name: 'rankine',
                        base: BASE_UNITS.TEMPERATURE,
                        prefixes: PREFIXES.NONE,
                        value: 1 / 1.8,
                        offset: 0
                    },
                    mol: {
                        name: 'mol',
                        base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,
                        prefixes: PREFIXES.SHORT,
                        value: 1,
                        offset: 0
                    },
                    mole: {
                        name: 'mole',
                        base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,
                        prefixes: PREFIXES.LONG,
                        value: 1,
                        offset: 0
                    },
                    cd: {
                        name: 'cd',
                        base: BASE_UNITS.LUMINOUS_INTENSITY,
                        prefixes: PREFIXES.NONE,
                        value: 1,
                        offset: 0
                    },
                    candela: {
                        name: 'candela',
                        base: BASE_UNITS.LUMINOUS_INTENSITY,
                        prefixes: PREFIXES.NONE,
                        value: 1,
                        offset: 0
                    },
                    N: {
                        name: 'N',
                        base: BASE_UNITS.FORCE,
                        prefixes: PREFIXES.SHORT,
                        value: 1,
                        offset: 0
                    },
                    newton: {
                        name: 'newton',
                        base: BASE_UNITS.FORCE,
                        prefixes: PREFIXES.LONG,
                        value: 1,
                        offset: 0
                    },
                    dyn: {
                        name: 'dyn',
                        base: BASE_UNITS.FORCE,
                        prefixes: PREFIXES.SHORT,
                        value: 0.00001,
                        offset: 0
                    },
                    dyne: {
                        name: 'dyne',
                        base: BASE_UNITS.FORCE,
                        prefixes: PREFIXES.LONG,
                        value: 0.00001,
                        offset: 0
                    },
                    lbf: {
                        name: 'lbf',
                        base: BASE_UNITS.FORCE,
                        prefixes: PREFIXES.NONE,
                        value: 4.4482216152605,
                        offset: 0
                    },
                    poundforce: {
                        name: 'poundforce',
                        base: BASE_UNITS.FORCE,
                        prefixes: PREFIXES.NONE,
                        value: 4.4482216152605,
                        offset: 0
                    },
                    kip: {
                        name: 'kip',
                        base: BASE_UNITS.FORCE,
                        prefixes: PREFIXES.LONG,
                        value: 4448.2216,
                        offset: 0
                    },
                    J: {
                        name: 'J',
                        base: BASE_UNITS.ENERGY,
                        prefixes: PREFIXES.SHORT,
                        value: 1,
                        offset: 0
                    },
                    joule: {
                        name: 'joule',
                        base: BASE_UNITS.ENERGY,
                        prefixes: PREFIXES.SHORT,
                        value: 1,
                        offset: 0
                    },
                    erg: {
                        name: 'erg',
                        base: BASE_UNITS.ENERGY,
                        prefixes: PREFIXES.NONE,
                        value: 1e-7,
                        offset: 0
                    },
                    Wh: {
                        name: 'Wh',
                        base: BASE_UNITS.ENERGY,
                        prefixes: PREFIXES.SHORT,
                        value: 3600,
                        offset: 0
                    },
                    BTU: {
                        name: 'BTU',
                        base: BASE_UNITS.ENERGY,
                        prefixes: PREFIXES.BTU,
                        value: 1055.05585262,
                        offset: 0
                    },
                    eV: {
                        name: 'eV',
                        base: BASE_UNITS.ENERGY,
                        prefixes: PREFIXES.SHORT,
                        value: 1.602176565e-19,
                        offset: 0
                    },
                    electronvolt: {
                        name: 'electronvolt',
                        base: BASE_UNITS.ENERGY,
                        prefixes: PREFIXES.LONG,
                        value: 1.602176565e-19,
                        offset: 0
                    },
                    W: {
                        name: 'W',
                        base: BASE_UNITS.POWER,
                        prefixes: PREFIXES.SHORT,
                        value: 1,
                        offset: 0
                    },
                    watt: {
                        name: 'W',
                        base: BASE_UNITS.POWER,
                        prefixes: PREFIXES.LONG,
                        value: 1,
                        offset: 0
                    },
                    hp: {
                        name: 'hp',
                        base: BASE_UNITS.POWER,
                        prefixes: PREFIXES.NONE,
                        value: 745.6998715386,
                        offset: 0
                    },
                    VAR: {
                        name: 'VAR',
                        base: BASE_UNITS.POWER,
                        prefixes: PREFIXES.SHORT,
                        value: Complex.I,
                        offset: 0
                    },
                    VA: {
                        name: 'VA',
                        base: BASE_UNITS.POWER,
                        prefixes: PREFIXES.SHORT,
                        value: 1,
                        offset: 0
                    },
                    Pa: {
                        name: 'Pa',
                        base: BASE_UNITS.PRESSURE,
                        prefixes: PREFIXES.SHORT,
                        value: 1,
                        offset: 0
                    },
                    psi: {
                        name: 'psi',
                        base: BASE_UNITS.PRESSURE,
                        prefixes: PREFIXES.NONE,
                        value: 6894.75729276459,
                        offset: 0
                    },
                    atm: {
                        name: 'atm',
                        base: BASE_UNITS.PRESSURE,
                        prefixes: PREFIXES.NONE,
                        value: 101325,
                        offset: 0
                    },
                    bar: {
                        name: 'bar',
                        base: BASE_UNITS.PRESSURE,
                        prefixes: PREFIXES.NONE,
                        value: 100000,
                        offset: 0
                    },
                    torr: {
                        name: 'torr',
                        base: BASE_UNITS.PRESSURE,
                        prefixes: PREFIXES.NONE,
                        value: 133.322,
                        offset: 0
                    },
                    mmHg: {
                        name: 'mmHg',
                        base: BASE_UNITS.PRESSURE,
                        prefixes: PREFIXES.NONE,
                        value: 133.322,
                        offset: 0
                    },
                    mmH2O: {
                        name: 'mmH2O',
                        base: BASE_UNITS.PRESSURE,
                        prefixes: PREFIXES.NONE,
                        value: 9.80665,
                        offset: 0
                    },
                    cmH2O: {
                        name: 'cmH2O',
                        base: BASE_UNITS.PRESSURE,
                        prefixes: PREFIXES.NONE,
                        value: 98.0665,
                        offset: 0
                    },
                    coulomb: {
                        name: 'coulomb',
                        base: BASE_UNITS.ELECTRIC_CHARGE,
                        prefixes: PREFIXES.LONG,
                        value: 1,
                        offset: 0
                    },
                    C: {
                        name: 'C',
                        base: BASE_UNITS.ELECTRIC_CHARGE,
                        prefixes: PREFIXES.SHORT,
                        value: 1,
                        offset: 0
                    },
                    farad: {
                        name: 'farad',
                        base: BASE_UNITS.ELECTRIC_CAPACITANCE,
                        prefixes: PREFIXES.LONG,
                        value: 1,
                        offset: 0
                    },
                    F: {
                        name: 'F',
                        base: BASE_UNITS.ELECTRIC_CAPACITANCE,
                        prefixes: PREFIXES.SHORT,
                        value: 1,
                        offset: 0
                    },
                    volt: {
                        name: 'volt',
                        base: BASE_UNITS.ELECTRIC_POTENTIAL,
                        prefixes: PREFIXES.LONG,
                        value: 1,
                        offset: 0
                    },
                    V: {
                        name: 'V',
                        base: BASE_UNITS.ELECTRIC_POTENTIAL,
                        prefixes: PREFIXES.SHORT,
                        value: 1,
                        offset: 0
                    },
                    ohm: {
                        name: 'ohm',
                        base: BASE_UNITS.ELECTRIC_RESISTANCE,
                        prefixes: PREFIXES.SHORTLONG,
                        value: 1,
                        offset: 0
                    },
                    henry: {
                        name: 'henry',
                        base: BASE_UNITS.ELECTRIC_INDUCTANCE,
                        prefixes: PREFIXES.LONG,
                        value: 1,
                        offset: 0
                    },
                    H: {
                        name: 'H',
                        base: BASE_UNITS.ELECTRIC_INDUCTANCE,
                        prefixes: PREFIXES.SHORT,
                        value: 1,
                        offset: 0
                    },
                    siemens: {
                        name: 'siemens',
                        base: BASE_UNITS.ELECTRIC_CONDUCTANCE,
                        prefixes: PREFIXES.LONG,
                        value: 1,
                        offset: 0
                    },
                    S: {
                        name: 'S',
                        base: BASE_UNITS.ELECTRIC_CONDUCTANCE,
                        prefixes: PREFIXES.SHORT,
                        value: 1,
                        offset: 0
                    },
                    weber: {
                        name: 'weber',
                        base: BASE_UNITS.MAGNETIC_FLUX,
                        prefixes: PREFIXES.LONG,
                        value: 1,
                        offset: 0
                    },
                    Wb: {
                        name: 'Wb',
                        base: BASE_UNITS.MAGNETIC_FLUX,
                        prefixes: PREFIXES.SHORT,
                        value: 1,
                        offset: 0
                    },
                    tesla: {
                        name: 'tesla',
                        base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,
                        prefixes: PREFIXES.LONG,
                        value: 1,
                        offset: 0
                    },
                    T: {
                        name: 'T',
                        base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,
                        prefixes: PREFIXES.SHORT,
                        value: 1,
                        offset: 0
                    },
                    b: {
                        name: 'b',
                        base: BASE_UNITS.BIT,
                        prefixes: PREFIXES.BINARY_SHORT,
                        value: 1,
                        offset: 0
                    },
                    bits: {
                        name: 'bits',
                        base: BASE_UNITS.BIT,
                        prefixes: PREFIXES.BINARY_LONG,
                        value: 1,
                        offset: 0
                    },
                    B: {
                        name: 'B',
                        base: BASE_UNITS.BIT,
                        prefixes: PREFIXES.BINARY_SHORT,
                        value: 8,
                        offset: 0
                    },
                    bytes: {
                        name: 'bytes',
                        base: BASE_UNITS.BIT,
                        prefixes: PREFIXES.BINARY_LONG,
                        value: 8,
                        offset: 0
                    }
                };
                var ALIASES = {
                    meters: 'meter',
                    inches: 'inch',
                    feet: 'foot',
                    yards: 'yard',
                    miles: 'mile',
                    links: 'link',
                    rods: 'rod',
                    chains: 'chain',
                    angstroms: 'angstrom',
                    lt: 'l',
                    litres: 'litre',
                    liter: 'litre',
                    liters: 'litre',
                    teaspoons: 'teaspoon',
                    tablespoons: 'tablespoon',
                    minims: 'minim',
                    fluiddrams: 'fluiddram',
                    fluidounces: 'fluidounce',
                    gills: 'gill',
                    cups: 'cup',
                    pints: 'pint',
                    quarts: 'quart',
                    gallons: 'gallon',
                    beerbarrels: 'beerbarrel',
                    oilbarrels: 'oilbarrel',
                    hogsheads: 'hogshead',
                    gtts: 'gtt',
                    grams: 'gram',
                    tons: 'ton',
                    tonnes: 'tonne',
                    grains: 'grain',
                    drams: 'dram',
                    ounces: 'ounce',
                    poundmasses: 'poundmass',
                    hundredweights: 'hundredweight',
                    sticks: 'stick',
                    lb: 'lbm',
                    lbs: 'lbm',
                    kips: 'kip',
                    acres: 'acre',
                    hectares: 'hectare',
                    sqfeet: 'sqft',
                    sqyard: 'sqyd',
                    sqmile: 'sqmi',
                    sqmiles: 'sqmi',
                    mmhg: 'mmHg',
                    mmh2o: 'mmH2O',
                    cmh2o: 'cmH2O',
                    seconds: 'second',
                    secs: 'second',
                    minutes: 'minute',
                    mins: 'minute',
                    hours: 'hour',
                    hr: 'hour',
                    hrs: 'hour',
                    days: 'day',
                    weeks: 'week',
                    months: 'month',
                    years: 'year',
                    hertz: 'hertz',
                    radians: 'rad',
                    degree: 'deg',
                    degrees: 'deg',
                    gradian: 'grad',
                    gradians: 'grad',
                    cycles: 'cycle',
                    arcsecond: 'arcsec',
                    arcseconds: 'arcsec',
                    arcminute: 'arcmin',
                    arcminutes: 'arcmin',
                    BTUs: 'BTU',
                    watts: 'watt',
                    joules: 'joule',
                    amperes: 'ampere',
                    coulombs: 'coulomb',
                    volts: 'volt',
                    ohms: 'ohm',
                    farads: 'farad',
                    webers: 'weber',
                    teslas: 'tesla',
                    electronvolts: 'electronvolt',
                    moles: 'mole'
                };
                function calculateAngleValues(config) {
                    if (config.number === 'BigNumber') {
                        var pi = constants.pi(type.BigNumber);
                        UNITS.rad.value = new type.BigNumber(1);
                        UNITS.deg.value = pi.div(180);
                        UNITS.grad.value = pi.div(200);
                        UNITS.cycle.value = pi.times(2);
                        UNITS.arcsec.value = pi.div(648000);
                        UNITS.arcmin.value = pi.div(10800);
                    }
                    else {
                        UNITS.rad.value = 1;
                        UNITS.deg.value = Math.PI / 180;
                        UNITS.grad.value = Math.PI / 200;
                        UNITS.cycle.value = Math.PI * 2;
                        UNITS.arcsec.value = Math.PI / 648000;
                        UNITS.arcmin.value = Math.PI / 10800;
                    }
                }
                calculateAngleValues(config);
                math.on('config', function (curr, prev) {
                    if (curr.number !== prev.number) {
                        calculateAngleValues(curr);
                    }
                });
                var UNIT_SYSTEMS = {
                    si: {
                        NONE: { unit: UNIT_NONE, prefix: PREFIXES.NONE[''] },
                        LENGTH: { unit: UNITS.m, prefix: PREFIXES.SHORT[''] },
                        MASS: { unit: UNITS.g, prefix: PREFIXES.SHORT['k'] },
                        TIME: { unit: UNITS.s, prefix: PREFIXES.SHORT[''] },
                        CURRENT: { unit: UNITS.A, prefix: PREFIXES.SHORT[''] },
                        TEMPERATURE: { unit: UNITS.K, prefix: PREFIXES.SHORT[''] },
                        LUMINOUS_INTENSITY: { unit: UNITS.cd, prefix: PREFIXES.SHORT[''] },
                        AMOUNT_OF_SUBSTANCE: { unit: UNITS.mol, prefix: PREFIXES.SHORT[''] },
                        ANGLE: { unit: UNITS.rad, prefix: PREFIXES.SHORT[''] },
                        BIT: { unit: UNITS.bit, prefix: PREFIXES.SHORT[''] },
                        FORCE: { unit: UNITS.N, prefix: PREFIXES.SHORT[''] },
                        ENERGY: { unit: UNITS.J, prefix: PREFIXES.SHORT[''] },
                        POWER: { unit: UNITS.W, prefix: PREFIXES.SHORT[''] },
                        PRESSURE: { unit: UNITS.Pa, prefix: PREFIXES.SHORT[''] },
                        ELECTRIC_CHARGE: { unit: UNITS.C, prefix: PREFIXES.SHORT[''] },
                        ELECTRIC_CAPACITANCE: { unit: UNITS.F, prefix: PREFIXES.SHORT[''] },
                        ELECTRIC_POTENTIAL: { unit: UNITS.V, prefix: PREFIXES.SHORT[''] },
                        ELECTRIC_RESISTANCE: { unit: UNITS.ohm, prefix: PREFIXES.SHORT[''] },
                        ELECTRIC_INDUCTANCE: { unit: UNITS.H, prefix: PREFIXES.SHORT[''] },
                        ELECTRIC_CONDUCTANCE: { unit: UNITS.S, prefix: PREFIXES.SHORT[''] },
                        MAGNETIC_FLUX: { unit: UNITS.Wb, prefix: PREFIXES.SHORT[''] },
                        MAGNETIC_FLUX_DENSITY: { unit: UNITS.T, prefix: PREFIXES.SHORT[''] },
                        FREQUENCY: { unit: UNITS.Hz, prefix: PREFIXES.SHORT[''] }
                    }
                };
                UNIT_SYSTEMS.cgs = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));
                UNIT_SYSTEMS.cgs.LENGTH = { unit: UNITS.m, prefix: PREFIXES.SHORT['c'] };
                UNIT_SYSTEMS.cgs.MASS = { unit: UNITS.g, prefix: PREFIXES.SHORT[''] };
                UNIT_SYSTEMS.cgs.FORCE = { unit: UNITS.dyn, prefix: PREFIXES.SHORT[''] };
                UNIT_SYSTEMS.cgs.ENERGY = { unit: UNITS.erg, prefix: PREFIXES.NONE[''] };
                UNIT_SYSTEMS.us = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));
                UNIT_SYSTEMS.us.LENGTH = { unit: UNITS.ft, prefix: PREFIXES.NONE[''] };
                UNIT_SYSTEMS.us.MASS = { unit: UNITS.lbm, prefix: PREFIXES.NONE[''] };
                UNIT_SYSTEMS.us.TEMPERATURE = { unit: UNITS.degF, prefix: PREFIXES.NONE[''] };
                UNIT_SYSTEMS.us.FORCE = { unit: UNITS.lbf, prefix: PREFIXES.NONE[''] };
                UNIT_SYSTEMS.us.ENERGY = { unit: UNITS.BTU, prefix: PREFIXES.BTU[''] };
                UNIT_SYSTEMS.us.POWER = { unit: UNITS.hp, prefix: PREFIXES.NONE[''] };
                UNIT_SYSTEMS.us.PRESSURE = { unit: UNITS.psi, prefix: PREFIXES.NONE[''] };
                UNIT_SYSTEMS.auto = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));
                var currentUnitSystem = UNIT_SYSTEMS.auto;
                Unit.setUnitSystem = function (name) {
                    if (UNIT_SYSTEMS.hasOwnProperty(name)) {
                        currentUnitSystem = UNIT_SYSTEMS[name];
                    }
                    else {
                        throw new Error('Unit system ' + name + ' does not exist. Choices are: ' + Object.keys(UNIT_SYSTEMS).join(', '));
                    }
                };
                Unit.getUnitSystem = function () {
                    for (var key in UNIT_SYSTEMS) {
                        if (UNIT_SYSTEMS[key] === currentUnitSystem) {
                            return key;
                        }
                    }
                };
                Unit.typeConverters = {
                    BigNumber: function (x) {
                        return new type.BigNumber(x + '');
                    },
                    Fraction: function (x) {
                        return new type.Fraction(x);
                    },
                    Complex: function (x) {
                        return x;
                    },
                    number: function (x) {
                        return x;
                    }
                };
                Unit._getNumberConverter = function (type) {
                    if (!Unit.typeConverters[type]) {
                        throw new TypeError('Unsupported type "' + type + '"');
                    }
                    return Unit.typeConverters[type];
                };
                for (var key in UNITS) {
                    var unit = UNITS[key];
                    unit.dimensions = unit.base.dimensions;
                }
                for (var name in ALIASES) {
                    if (ALIASES.hasOwnProperty(name)) {
                        var unit = UNITS[ALIASES[name]];
                        var alias = {};
                        for (var key in unit) {
                            if (unit.hasOwnProperty(key)) {
                                alias[key] = unit[key];
                            }
                        }
                        alias.name = name;
                        UNITS[name] = alias;
                    }
                }
                function assertUnitNameIsValid(name) {
                    for (var i = 0; i < name.length; i++) {
                        var c = name.charAt(i);
                        var isValidAlpha = function (p) {
                            return /^[a-zA-Z]$/.test(p);
                        };
                        var isDigit = function (c) {
                            return (c >= '0' && c <= '9');
                        };
                        if (i === 0 && !isValidAlpha(c))
                            throw new Error('Invalid unit name (must begin with alpha character): "' + name + '"');
                        if (i > 0 && !(isValidAlpha(c)
                            || isDigit(c)))
                            throw new Error('Invalid unit name (only alphanumeric characters are allowed): "' + name + '"');
                    }
                }
                Unit.createUnit = function (obj, options) {
                    if (typeof (obj) !== 'object') {
                        throw new TypeError("createUnit expects first parameter to be of type 'Object'");
                    }
                    if (options && options.override) {
                        for (var key in obj) {
                            if (obj.hasOwnProperty(key)) {
                                Unit.deleteUnit(key);
                            }
                            if (obj[key].aliases) {
                                for (var i = 0; i < obj[key].aliases.length; i++) {
                                    Unit.deleteUnit(obj[key].aliases[i]);
                                }
                            }
                        }
                    }
                    var lastUnit;
                    for (var key in obj) {
                        if (obj.hasOwnProperty(key)) {
                            lastUnit = Unit.createUnitSingle(key, obj[key]);
                        }
                    }
                    return lastUnit;
                };
                Unit.createUnitSingle = function (name, obj, options) {
                    if (typeof (obj) === 'undefined' || obj === null) {
                        obj = {};
                    }
                    if (typeof (name) !== 'string') {
                        throw new TypeError("createUnitSingle expects first parameter to be of type 'string'");
                    }
                    if (UNITS.hasOwnProperty(name)) {
                        throw new Error('Cannot create unit "' + name + '": a unit with that name already exists');
                    }
                    assertUnitNameIsValid(name);
                    var defUnit = null;
                    var aliases = [];
                    var offset = 0;
                    var definition;
                    var prefixes;
                    if (obj && obj.type === 'Unit') {
                        defUnit = obj.clone();
                    }
                    else if (typeof (obj) === 'string') {
                        if (obj !== '') {
                            definition = obj;
                        }
                    }
                    else if (typeof (obj) === 'object') {
                        definition = obj.definition;
                        prefixes = obj.prefixes;
                        offset = obj.offset;
                        if (obj.aliases) {
                            aliases = obj.aliases.valueOf();
                        }
                    }
                    else {
                        throw new TypeError('Cannot create unit "' + name + '" from "' + obj.toString() + '": expecting "string" or "Unit" or "Object"');
                    }
                    if (aliases) {
                        for (var i = 0; i < aliases.length; i++) {
                            if (UNITS.hasOwnProperty(aliases[i])) {
                                throw new Error('Cannot create alias "' + aliases[i] + '": a unit with that name already exists');
                            }
                        }
                    }
                    if (definition && typeof (definition) === 'string' && !defUnit) {
                        try {
                            defUnit = Unit.parse(definition, { allowNoUnits: true });
                        }
                        catch (ex) {
                            ex.message = 'Could not create unit "' + name + '" from "' + definition + '": ' + ex.message;
                            throw (ex);
                        }
                    }
                    else if (definition && definition.type === 'Unit') {
                        defUnit = definition.clone();
                    }
                    aliases = aliases || [];
                    offset = offset || 0;
                    if (prefixes && prefixes.toUpperCase)
                        prefixes = PREFIXES[prefixes.toUpperCase()] || PREFIXES.NONE;
                    else
                        prefixes = PREFIXES.NONE;
                    var newUnit = {};
                    if (!defUnit) {
                        var baseName = name + "_STUFF";
                        if (BASE_DIMENSIONS.indexOf(baseName) >= 0) {
                            throw new Error('Cannot create new base unit "' + name + '": a base unit with that name already exists (and cannot be overridden)');
                        }
                        BASE_DIMENSIONS.push(baseName);
                        for (var b in BASE_UNITS) {
                            if (BASE_UNITS.hasOwnProperty(b)) {
                                BASE_UNITS[b].dimensions[BASE_DIMENSIONS.length - 1] = 0;
                            }
                        }
                        var newBaseUnit = { dimensions: [] };
                        for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
                            newBaseUnit.dimensions[i] = 0;
                        }
                        newBaseUnit.dimensions[BASE_DIMENSIONS.length - 1] = 1;
                        newBaseUnit.key = baseName;
                        BASE_UNITS[baseName] = newBaseUnit;
                        newUnit = {
                            name: name,
                            value: 1,
                            dimensions: BASE_UNITS[baseName].dimensions.slice(0),
                            prefixes: prefixes,
                            offset: offset,
                            base: baseName
                        };
                        currentUnitSystem[baseName] = {
                            unit: newUnit,
                            prefix: PREFIXES.NONE['']
                        };
                    }
                    else {
                        newUnit = {
                            name: name,
                            value: defUnit.value,
                            dimensions: defUnit.dimensions.slice(0),
                            prefixes: prefixes,
                            offset: offset,
                        };
                        var anyMatch = false;
                        for (var i in BASE_UNITS) {
                            if (BASE_UNITS.hasOwnProperty(i)) {
                                var match = true;
                                for (var j = 0; j < BASE_DIMENSIONS.length; j++) {
                                    if (Math.abs((newUnit.dimensions[j] || 0) - (BASE_UNITS[i].dimensions[j] || 0)) > 1e-12) {
                                        match = false;
                                        break;
                                    }
                                }
                                if (match) {
                                    anyMatch = true;
                                    break;
                                }
                            }
                        }
                        if (!anyMatch) {
                            var baseName = name + "_STUFF";
                            var newBaseUnit = { dimensions: defUnit.dimensions.slice(0) };
                            newBaseUnit.key = baseName;
                            BASE_UNITS[baseName] = newBaseUnit;
                            currentUnitSystem[baseName] = {
                                unit: newUnit,
                                prefix: PREFIXES.NONE['']
                            };
                            newUnit.base = baseName;
                        }
                    }
                    Unit.UNITS[name] = newUnit;
                    for (var i = 0; i < aliases.length; i++) {
                        var aliasName = aliases[i];
                        var alias = {};
                        for (var key in newUnit) {
                            if (newUnit.hasOwnProperty(key)) {
                                alias[key] = newUnit[key];
                            }
                        }
                        alias.name = aliasName;
                        Unit.UNITS[aliasName] = alias;
                    }
                    return new Unit(null, name);
                };
                Unit.deleteUnit = function (name) {
                    delete Unit.UNITS[name];
                };
                Unit.PREFIXES = PREFIXES;
                Unit.BASE_DIMENSIONS = BASE_DIMENSIONS;
                Unit.BASE_UNITS = BASE_UNITS;
                Unit.UNIT_SYSTEMS = UNIT_SYSTEMS;
                Unit.UNITS = UNITS;
                return Unit;
            }
            exports.name = 'Unit';
            exports.path = 'type';
            exports.factory = factory;
            exports.math = true;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            function factory(type, config, load, typed) {
                var unit = typed('unit', {
                    'Unit': function (x) {
                        return x.clone();
                    },
                    'string': function (x) {
                        if (type.Unit.isValuelessUnit(x)) {
                            return new type.Unit(null, x);
                        }
                        return type.Unit.parse(x);
                    },
                    'number | BigNumber | Fraction | Complex, string': function (value, unit) {
                        return new type.Unit(value, unit);
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, unit);
                    }
                });
                unit.toTex = {
                    1: '\\left(${args[0]}\\right)',
                    2: '\\left(\\left(${args[0]}\\right)${args[1]}\\right)'
                };
                return unit;
            }
            exports.name = 'unit';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            function factory(type, config, load, typed) {
                var createUnit = typed('createUnit', {
                    'Object, Object': function (obj, options) {
                        return type.Unit.createUnit(obj, options);
                    },
                    'Object': function (obj) {
                        return type.Unit.createUnit(obj, {});
                    },
                    'string, Unit | string | Object, Object': function (name, def, options) {
                        var obj = {};
                        obj[name] = def;
                        return type.Unit.createUnit(obj, options);
                    },
                    'string, Unit | string | Object': function (name, def) {
                        var obj = {};
                        obj[name] = def;
                        return type.Unit.createUnit(obj, {});
                    },
                    'string': function (name) {
                        var obj = {};
                        obj[name] = {};
                        return type.Unit.createUnit(obj, {});
                    },
                });
                return createUnit;
            }
            exports.name = 'createUnit';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            function factory(type, config, load, typed) {
                var splitUnit = typed('splitUnit', {
                    'Unit, Array': function (unit, parts) {
                        return unit.splitUnit(parts);
                    }
                });
                return splitUnit;
            }
            exports.name = 'splitUnit';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            var lazy = __webpack_require__(5).lazy;
            function factory(type, config, load, typed, math) {
                function fixedUnit(str) {
                    var unit = type.Unit.parse(str);
                    unit.fixPrefix = true;
                    return unit;
                }
                setLazyConstant(math, 'speedOfLight', function () { return fixedUnit('299792458 m s^-1'); });
                setLazyConstant(math, 'gravitationConstant', function () { return fixedUnit('6.6738480e-11 m^3 kg^-1 s^-2'); });
                setLazyConstant(math, 'planckConstant', function () { return fixedUnit('6.626069311e-34 J s'); });
                setLazyConstant(math, 'reducedPlanckConstant', function () { return fixedUnit('1.05457172647e-34 J s'); });
                setLazyConstant(math, 'magneticConstant', function () { return fixedUnit('1.2566370614e-6 N A^-2'); });
                setLazyConstant(math, 'electricConstant', function () { return fixedUnit('8.854187817e-12 F m^-1'); });
                setLazyConstant(math, 'vacuumImpedance', function () { return fixedUnit('376.730313461 ohm'); });
                setLazyConstant(math, 'coulomb', function () { return fixedUnit('8.9875517873681764e9 N m^2 C^-2'); });
                setLazyConstant(math, 'elementaryCharge', function () { return fixedUnit('1.60217656535e-19 C'); });
                setLazyConstant(math, 'bohrMagneton', function () { return fixedUnit('9.2740096820e-24 J T^-1'); });
                setLazyConstant(math, 'conductanceQuantum', function () { return fixedUnit('7.748091734625e-5 S'); });
                setLazyConstant(math, 'inverseConductanceQuantum', function () { return fixedUnit('12906.403721742 ohm'); });
                setLazyConstant(math, 'magneticFluxQuantum', function () { return fixedUnit('2.06783375846e-15 Wb'); });
                setLazyConstant(math, 'nuclearMagneton', function () { return fixedUnit('5.0507835311e-27 J T^-1'); });
                setLazyConstant(math, 'klitzing', function () { return fixedUnit('25812.807443484 ohm'); });
                setLazyConstant(math, 'bohrRadius', function () { return fixedUnit('5.291772109217e-11 m'); });
                setLazyConstant(math, 'classicalElectronRadius', function () { return fixedUnit('2.817940326727e-15 m'); });
                setLazyConstant(math, 'electronMass', function () { return fixedUnit('9.1093829140e-31 kg'); });
                setLazyConstant(math, 'fermiCoupling', function () { return fixedUnit('1.1663645e-5 GeV^-2'); });
                setLazyConstant(math, 'fineStructure', function () { return 7.297352569824e-3; });
                setLazyConstant(math, 'hartreeEnergy', function () { return fixedUnit('4.3597443419e-18 J'); });
                setLazyConstant(math, 'protonMass', function () { return fixedUnit('1.67262177774e-27 kg'); });
                setLazyConstant(math, 'deuteronMass', function () { return fixedUnit('3.3435830926e-27 kg'); });
                setLazyConstant(math, 'neutronMass', function () { return fixedUnit('1.6749271613e-27 kg'); });
                setLazyConstant(math, 'quantumOfCirculation', function () { return fixedUnit('3.636947552024e-4 m^2 s^-1'); });
                setLazyConstant(math, 'rydberg', function () { return fixedUnit('10973731.56853955 m^-1'); });
                setLazyConstant(math, 'thomsonCrossSection', function () { return fixedUnit('6.65245873413e-29 m^2'); });
                setLazyConstant(math, 'weakMixingAngle', function () { return 0.222321; });
                setLazyConstant(math, 'efimovFactor', function () { return 22.7; });
                setLazyConstant(math, 'atomicMass', function () { return fixedUnit('1.66053892173e-27 kg'); });
                setLazyConstant(math, 'avogadro', function () { return fixedUnit('6.0221412927e23 mol^-1'); });
                setLazyConstant(math, 'boltzmann', function () { return fixedUnit('1.380648813e-23 J K^-1'); });
                setLazyConstant(math, 'faraday', function () { return fixedUnit('96485.336521 C mol^-1'); });
                setLazyConstant(math, 'firstRadiation', function () { return fixedUnit('3.7417715317e-16 W m^2'); });
                setLazyConstant(math, 'loschmidt', function () { return fixedUnit('2.686780524e25 m^-3'); });
                setLazyConstant(math, 'gasConstant', function () { return fixedUnit('8.314462175 J K^-1 mol^-1'); });
                setLazyConstant(math, 'molarPlanckConstant', function () { return fixedUnit('3.990312717628e-10 J s mol^-1'); });
                setLazyConstant(math, 'molarVolume', function () { return fixedUnit('2.241396820e-10 m^3 mol^-1'); });
                setLazyConstant(math, 'sackurTetrode', function () { return -1.164870823; });
                setLazyConstant(math, 'secondRadiation', function () { return fixedUnit('1.438777013e-2 m K'); });
                setLazyConstant(math, 'stefanBoltzmann', function () { return fixedUnit('5.67037321e-8 W m^-2 K^-4'); });
                setLazyConstant(math, 'wienDisplacement', function () { return fixedUnit('2.897772126e-3 m K'); });
                setLazyConstant(math, 'molarMass', function () { return fixedUnit('1e-3 kg mol^-1'); });
                setLazyConstant(math, 'molarMassC12', function () { return fixedUnit('1.2e-2 kg mol^-1'); });
                setLazyConstant(math, 'gravity', function () { return fixedUnit('9.80665 m s^-2'); });
                setLazyConstant(math, 'planckLength', function () { return fixedUnit('1.61619997e-35 m'); });
                setLazyConstant(math, 'planckMass', function () { return fixedUnit('2.1765113e-8 kg'); });
                setLazyConstant(math, 'planckTime', function () { return fixedUnit('5.3910632e-44 s'); });
                setLazyConstant(math, 'planckCharge', function () { return fixedUnit('1.87554595641e-18 C'); });
                setLazyConstant(math, 'planckTemperature', function () { return fixedUnit('1.41683385e+32 K'); });
            }
            function setLazyConstant(math, name, resolver) {
                lazy(math, name, resolver);
                lazy(math.expression.mathWithTransform, name, resolver);
            }
            exports.factory = factory;
            exports.lazy = false;
            exports.math = true;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var object = __webpack_require__(5);
            var bigConstants = __webpack_require__(95);
            function factory(type, config, load, typed, math) {
                math.on('config', function (curr, prev) {
                    if (curr.number !== prev.number) {
                        factory(type, config, load, typed, math);
                    }
                });
                setConstant(math, 'true', true);
                setConstant(math, 'false', false);
                setConstant(math, 'null', null);
                setConstant(math, 'uninitialized', __webpack_require__(2).UNINITIALIZED);
                if (config.number === 'BigNumber') {
                    setConstant(math, 'Infinity', new type.BigNumber(Infinity));
                    setConstant(math, 'NaN', new type.BigNumber(NaN));
                    setLazyConstant(math, 'pi', function () { return bigConstants.pi(type.BigNumber); });
                    setLazyConstant(math, 'tau', function () { return bigConstants.tau(type.BigNumber); });
                    setLazyConstant(math, 'e', function () { return bigConstants.e(type.BigNumber); });
                    setLazyConstant(math, 'phi', function () { return bigConstants.phi(type.BigNumber); });
                    setLazyConstant(math, 'E', function () { return math.e; });
                    setLazyConstant(math, 'LN2', function () { return new type.BigNumber(2).ln(); });
                    setLazyConstant(math, 'LN10', function () { return new type.BigNumber(10).ln(); });
                    setLazyConstant(math, 'LOG2E', function () { return new type.BigNumber(1).div(new type.BigNumber(2).ln()); });
                    setLazyConstant(math, 'LOG10E', function () { return new type.BigNumber(1).div(new type.BigNumber(10).ln()); });
                    setLazyConstant(math, 'PI', function () { return math.pi; });
                    setLazyConstant(math, 'SQRT1_2', function () { return new type.BigNumber('0.5').sqrt(); });
                    setLazyConstant(math, 'SQRT2', function () { return new type.BigNumber(2).sqrt(); });
                }
                else {
                    setConstant(math, 'Infinity', Infinity);
                    setConstant(math, 'NaN', NaN);
                    setConstant(math, 'pi', Math.PI);
                    setConstant(math, 'tau', Math.PI * 2);
                    setConstant(math, 'e', Math.E);
                    setConstant(math, 'phi', 1.61803398874989484820458683436563811772030917980576286213545);
                    setConstant(math, 'E', math.e);
                    setConstant(math, 'LN2', Math.LN2);
                    setConstant(math, 'LN10', Math.LN10);
                    setConstant(math, 'LOG2E', Math.LOG2E);
                    setConstant(math, 'LOG10E', Math.LOG10E);
                    setConstant(math, 'PI', math.pi);
                    setConstant(math, 'SQRT1_2', Math.SQRT1_2);
                    setConstant(math, 'SQRT2', Math.SQRT2);
                }
                setConstant(math, 'i', type.Complex.I);
                setConstant(math, 'version', __webpack_require__(190));
            }
            function setConstant(math, name, value) {
                math[name] = value;
                math.expression.mathWithTransform[name] = value;
            }
            function setLazyConstant(math, name, resolver) {
                object.lazy(math, name, resolver);
                object.lazy(math.expression.mathWithTransform, name, resolver);
            }
            exports.factory = factory;
            exports.lazy = false;
            exports.math = true;
        }),
        (function (module, exports) {
            module.exports = '3.16.5';
        }),
        (function (module, exports, __webpack_require__) {
            module.exports = [
                __webpack_require__(99),
                __webpack_require__(383),
                __webpack_require__(389),
                __webpack_require__(391),
                __webpack_require__(402),
                __webpack_require__(39),
                __webpack_require__(111)
            ];
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'bignumber',
                'category': 'Construction',
                'syntax': [
                    'bignumber(x)'
                ],
                'description': 'Create a big number from a number or string.',
                'examples': [
                    '0.1 + 0.2',
                    'bignumber(0.1) + bignumber(0.2)',
                    'bignumber("7.2")',
                    'bignumber("7.2e500")',
                    'bignumber([0.1, 0.2, 0.3])'
                ],
                'seealso': [
                    'boolean', 'complex', 'fraction', 'index', 'matrix', 'string', 'unit'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'boolean',
                'category': 'Construction',
                'syntax': [
                    'x',
                    'boolean(x)'
                ],
                'description': 'Convert a string or number into a boolean.',
                'examples': [
                    'boolean(0)',
                    'boolean(1)',
                    'boolean(3)',
                    'boolean("true")',
                    'boolean("false")',
                    'boolean([1, 0, 1, 1])'
                ],
                'seealso': [
                    'bignumber', 'complex', 'index', 'matrix', 'number', 'string', 'unit'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'complex',
                'category': 'Construction',
                'syntax': [
                    'complex()',
                    'complex(re, im)',
                    'complex(string)'
                ],
                'description': 'Create a complex number.',
                'examples': [
                    'complex()',
                    'complex(2, 3)',
                    'complex("7 - 2i")'
                ],
                'seealso': [
                    'bignumber', 'boolean', 'index', 'matrix', 'number', 'string', 'unit'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'createUnit',
                'category': 'Construction',
                'syntax': [
                    'createUnit(definitions)',
                    'createUnit(name, definition)'
                ],
                'description': 'Create a user-defined unit and register it with the Unit type.',
                'examples': [
                    'createUnit("foo")',
                    'createUnit("knot", {definition: "0.514444444 m/s", aliases: ["knots", "kt", "kts"]})',
                    'createUnit("mph", "1 mile/hour")'
                ],
                'seealso': [
                    'unit', 'splitUnit'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'fraction',
                'category': 'Construction',
                'syntax': [
                    'fraction(num)',
                    'fraction(num,den)'
                ],
                'description': 'Create a fraction from a number or from a numerator and denominator.',
                'examples': [
                    'fraction(0.125)',
                    'fraction(1, 3) + fraction(2, 5)'
                ],
                'seealso': [
                    'bignumber', 'boolean', 'complex', 'index', 'matrix', 'string', 'unit'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'index',
                'category': 'Construction',
                'syntax': [
                    '[start]',
                    '[start:end]',
                    '[start:step:end]',
                    '[start1, start 2, ...]',
                    '[start1:end1, start2:end2, ...]',
                    '[start1:step1:end1, start2:step2:end2, ...]'
                ],
                'description': 'Create an index to get or replace a subset of a matrix',
                'examples': [
                    '[]',
                    '[1, 2, 3]',
                    'A = [1, 2, 3; 4, 5, 6]',
                    'A[1, :]',
                    'A[1, 2] = 50',
                    'A[0:2, 0:2] = ones(2, 2)'
                ],
                'seealso': [
                    'bignumber', 'boolean', 'complex', 'matrix,', 'number', 'range', 'string', 'unit'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'matrix',
                'category': 'Construction',
                'syntax': [
                    '[]',
                    '[a1, b1, ...; a2, b2, ...]',
                    'matrix()',
                    'matrix("dense")',
                    'matrix([...])'
                ],
                'description': 'Create a matrix.',
                'examples': [
                    '[]',
                    '[1, 2, 3]',
                    '[1, 2, 3; 4, 5, 6]',
                    'matrix()',
                    'matrix([3, 4])',
                    'matrix([3, 4; 5, 6], "sparse")',
                    'matrix([3, 4; 5, 6], "sparse", "number")'
                ],
                'seealso': [
                    'bignumber', 'boolean', 'complex', 'index', 'number', 'string', 'unit', 'sparse'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'number',
                'category': 'Construction',
                'syntax': [
                    'x',
                    'number(x)',
                    'number(unit, valuelessUnit)'
                ],
                'description': 'Create a number or convert a string or boolean into a number.',
                'examples': [
                    '2',
                    '2e3',
                    '4.05',
                    'number(2)',
                    'number("7.2")',
                    'number(true)',
                    'number([true, false, true, true])',
                    'number(unit("52cm"), "m")'
                ],
                'seealso': [
                    'bignumber', 'boolean', 'complex', 'fraction', 'index', 'matrix', 'string', 'unit'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'sparse',
                'category': 'Construction',
                'syntax': [
                    'sparse()',
                    'sparse([a1, b1, ...; a1, b2, ...])',
                    'sparse([a1, b1, ...; a1, b2, ...], "number")'
                ],
                'description': 'Create a sparse matrix.',
                'examples': [
                    'sparse()',
                    'sparse([3, 4; 5, 6])',
                    'sparse([3, 0; 5, 0], "number")'
                ],
                'seealso': [
                    'bignumber', 'boolean', 'complex', 'index', 'number', 'string', 'unit', 'matrix'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'splitUnit',
                'category': 'Construction',
                'syntax': [
                    'splitUnit(unit: Unit, parts: Unit[])'
                ],
                'description': 'Split a unit in an array of units whose sum is equal to the original unit.',
                'examples': [
                    'splitUnit(1 m, ["feet", "inch"])'
                ],
                'seealso': [
                    'unit', 'createUnit'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'string',
                'category': 'Construction',
                'syntax': [
                    '"text"',
                    'string(x)'
                ],
                'description': 'Create a string or convert a value to a string',
                'examples': [
                    '"Hello World!"',
                    'string(4.2)',
                    'string(3 + 2i)'
                ],
                'seealso': [
                    'bignumber', 'boolean', 'complex', 'index', 'matrix', 'number', 'unit'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'unit',
                'category': 'Construction',
                'syntax': [
                    'value unit',
                    'unit(value, unit)',
                    'unit(string)'
                ],
                'description': 'Create a unit.',
                'examples': [
                    '5.5 mm',
                    '3 inch',
                    'unit(7.1, "kilogram")',
                    'unit("23 deg")'
                ],
                'seealso': [
                    'bignumber', 'boolean', 'complex', 'index', 'matrix', 'number', 'string'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'false',
                'category': 'Constants',
                'syntax': [
                    'false'
                ],
                'description': 'Boolean value false',
                'examples': [
                    'false'
                ],
                'seealso': ['true']
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'i',
                'category': 'Constants',
                'syntax': [
                    'i'
                ],
                'description': 'Imaginary unit, defined as i*i=-1. A complex number is described as a + b*i, where a is the real part, and b is the imaginary part.',
                'examples': [
                    'i',
                    'i * i',
                    'sqrt(-1)'
                ],
                'seealso': []
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'Infinity',
                'category': 'Constants',
                'syntax': [
                    'Infinity'
                ],
                'description': 'Infinity, a number which is larger than the maximum number that can be handled by a floating point number.',
                'examples': [
                    'Infinity',
                    '1 / 0'
                ],
                'seealso': []
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'LN2',
                'category': 'Constants',
                'syntax': [
                    'LN2'
                ],
                'description': 'Returns the natural logarithm of 2, approximately equal to 0.693',
                'examples': [
                    'LN2',
                    'log(2)'
                ],
                'seealso': []
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'LN10',
                'category': 'Constants',
                'syntax': [
                    'LN10'
                ],
                'description': 'Returns the natural logarithm of 10, approximately equal to 2.302',
                'examples': [
                    'LN10',
                    'log(10)'
                ],
                'seealso': []
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'LOG2E',
                'category': 'Constants',
                'syntax': [
                    'LOG2E'
                ],
                'description': 'Returns the base-2 logarithm of E, approximately equal to 1.442',
                'examples': [
                    'LOG2E',
                    'log(e, 2)'
                ],
                'seealso': []
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'LOG10E',
                'category': 'Constants',
                'syntax': [
                    'LOG10E'
                ],
                'description': 'Returns the base-10 logarithm of E, approximately equal to 0.434',
                'examples': [
                    'LOG10E',
                    'log(e, 10)'
                ],
                'seealso': []
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'NaN',
                'category': 'Constants',
                'syntax': [
                    'NaN'
                ],
                'description': 'Not a number',
                'examples': [
                    'NaN',
                    '0 / 0'
                ],
                'seealso': []
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'null',
                'category': 'Constants',
                'syntax': [
                    'null'
                ],
                'description': 'Value null',
                'examples': [
                    'null'
                ],
                'seealso': ['true', 'false']
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'phi',
                'category': 'Constants',
                'syntax': [
                    'phi'
                ],
                'description': 'Phi is the golden ratio. Two quantities are in the golden ratio if their ratio is the same as the ratio of their sum to the larger of the two quantities. Phi is defined as `(1 + sqrt(5)) / 2` and is approximately 1.618034...',
                'examples': [
                    'phi'
                ],
                'seealso': []
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'SQRT1_2',
                'category': 'Constants',
                'syntax': [
                    'SQRT1_2'
                ],
                'description': 'Returns the square root of 1/2, approximately equal to 0.707',
                'examples': [
                    'SQRT1_2',
                    'sqrt(1/2)'
                ],
                'seealso': []
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'SQRT2',
                'category': 'Constants',
                'syntax': [
                    'SQRT2'
                ],
                'description': 'Returns the square root of 2, approximately equal to 1.414',
                'examples': [
                    'SQRT2',
                    'sqrt(2)'
                ],
                'seealso': []
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'tau',
                'category': 'Constants',
                'syntax': [
                    'tau'
                ],
                'description': 'Tau is the ratio constant of a circle\'s circumference to radius, equal to 2 * pi, approximately 6.2832.',
                'examples': [
                    'tau',
                    '2 * pi'
                ],
                'seealso': ['pi']
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'true',
                'category': 'Constants',
                'syntax': [
                    'true'
                ],
                'description': 'Boolean value true',
                'examples': [
                    'true'
                ],
                'seealso': ['false']
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'version',
                'category': 'Constants',
                'syntax': [
                    'version'
                ],
                'description': 'A string with the version number of math.js',
                'examples': [
                    'version'
                ],
                'seealso': []
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'derivative',
                'category': 'Algebra',
                'syntax': [
                    'derivative(expr, variable)',
                    'derivative(expr, variable, {simplify: boolean})'
                ],
                'description': 'Takes the derivative of an expression expressed in parser Nodes. The derivative will be taken over the supplied variable in the second parameter. If there are multiple variables in the expression, it will return a partial derivative.',
                'examples': [
                    'derivative("2x^3", "x")',
                    'derivative("2x^3", "x", {simplify: false})',
                    'derivative("2x^2 + 3x + 4", "x")',
                    'derivative("sin(2x)", "x")',
                    'f = parse("x^2 + x")',
                    'x = parse("x")',
                    'df = derivative(f, x)',
                    'df.eval({x: 3})'
                ],
                'seealso': [
                    'simplify', 'parse', 'eval'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'lsolve',
                'category': 'Algebra',
                'syntax': [
                    'x=lsolve(L, b)'
                ],
                'description': 'Solves the linear system L * x = b where L is an [n x n] lower triangular matrix and b is a [n] column vector.',
                'examples': [
                    'a = [-2, 3; 2, 1]',
                    'b = [11, 9]',
                    'x = lsolve(a, b)'
                ],
                'seealso': [
                    'lup', 'lusolve', 'usolve', 'matrix', 'sparse'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'lup',
                'category': 'Algebra',
                'syntax': [
                    'lup(m)'
                ],
                'description': 'Calculate the Matrix LU decomposition with partial pivoting. Matrix A is decomposed in three matrices (L, U, P) where P * A = L * U',
                'examples': [
                    'lup([[2, 1], [1, 4]])',
                    'lup(matrix([[2, 1], [1, 4]]))',
                    'lup(sparse([[2, 1], [1, 4]]))'
                ],
                'seealso': [
                    'lusolve', 'lsolve', 'usolve', 'matrix', 'sparse', 'slu', 'qr'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'lusolve',
                'category': 'Algebra',
                'syntax': [
                    'x=lusolve(A, b)',
                    'x=lusolve(lu, b)'
                ],
                'description': 'Solves the linear system A * x = b where A is an [n x n] matrix and b is a [n] column vector.',
                'examples': [
                    'a = [-2, 3; 2, 1]',
                    'b = [11, 9]',
                    'x = lusolve(a, b)'
                ],
                'seealso': [
                    'lup', 'slu', 'lsolve', 'usolve', 'matrix', 'sparse'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'simplify',
                'category': 'Algebra',
                'syntax': [
                    'simplify(expr)',
                    'simplify(expr, rules)'
                ],
                'description': 'Simplify an expression tree.',
                'examples': [
                    'simplify("3 + 2 / 4")',
                    'simplify("2x + x")',
                    'f = parse("x * (x + 2 + x)")',
                    'simplified = simplify(f)',
                    'simplified.eval({x: 2})'
                ],
                'seealso': [
                    'derivative', 'parse', 'eval'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'slu',
                'category': 'Algebra',
                'syntax': [
                    'slu(A, order, threshold)'
                ],
                'description': 'Calculate the Matrix LU decomposition with full pivoting. Matrix A is decomposed in two matrices (L, U) and two permutation vectors (pinv, q) where P * A * Q = L * U',
                'examples': [
                    'slu(sparse([4.5, 0, 3.2, 0; 3.1, 2.9, 0, 0.9; 0, 1.7, 3, 0; 3.5, 0.4, 0, 1]), 1, 0.001)'
                ],
                'seealso': [
                    'lusolve', 'lsolve', 'usolve', 'matrix', 'sparse', 'lup', 'qr'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'usolve',
                'category': 'Algebra',
                'syntax': [
                    'x=usolve(U, b)'
                ],
                'description': 'Solves the linear system U * x = b where U is an [n x n] upper triangular matrix and b is a [n] column vector.',
                'examples': [
                    'x=usolve(sparse([1, 1, 1, 1; 0, 1, 1, 1; 0, 0, 1, 1; 0, 0, 0, 1]), [1; 2; 3; 4])'
                ],
                'seealso': [
                    'lup', 'lusolve', 'lsolve', 'matrix', 'sparse'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'qr',
                'category': 'Algebra',
                'syntax': [
                    'qr(A)'
                ],
                'description': 'Calculates the Matrix QR decomposition. Matrix `A` is decomposed in two matrices (`Q`, `R`) where `Q` is an orthogonal matrix and `R` is an upper triangular matrix.',
                'examples': [
                    'qr([[1, -1,  4], [1,  4, -2], [1,  4,  2], [1,  -1, 0]])'
                ],
                'seealso': [
                    'lup', 'slu', 'matrix'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'abs',
                'category': 'Arithmetic',
                'syntax': [
                    'abs(x)'
                ],
                'description': 'Compute the absolute value.',
                'examples': [
                    'abs(3.5)',
                    'abs(-4.2)'
                ],
                'seealso': ['sign']
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'add',
                'category': 'Operators',
                'syntax': [
                    'x + y',
                    'add(x, y)'
                ],
                'description': 'Add two values.',
                'examples': [
                    'a = 2.1 + 3.6',
                    'a - 3.6',
                    '3 + 2i',
                    '3 cm + 2 inch',
                    '"2.3" + "4"'
                ],
                'seealso': [
                    'subtract'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'cbrt',
                'category': 'Arithmetic',
                'syntax': [
                    'cbrt(x)',
                    'cbrt(x, allRoots)'
                ],
                'description': 'Compute the cubic root value. If x = y * y * y, then y is the cubic root of x. When `x` is a number or complex number, an optional second argument `allRoots` can be provided to return all three cubic roots. If not provided, the principal root is returned',
                'examples': [
                    'cbrt(64)',
                    'cube(4)',
                    'cbrt(-8)',
                    'cbrt(2 + 3i)',
                    'cbrt(8i)',
                    'cbrt(8i, true)',
                    'cbrt(27 m^3)'
                ],
                'seealso': [
                    'square',
                    'sqrt',
                    'cube',
                    'multiply'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'ceil',
                'category': 'Arithmetic',
                'syntax': [
                    'ceil(x)'
                ],
                'description': 'Round a value towards plus infinity. If x is complex, both real and imaginary part are rounded towards plus infinity.',
                'examples': [
                    'ceil(3.2)',
                    'ceil(3.8)',
                    'ceil(-4.2)'
                ],
                'seealso': ['floor', 'fix', 'round']
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'cube',
                'category': 'Arithmetic',
                'syntax': [
                    'cube(x)'
                ],
                'description': 'Compute the cube of a value. The cube of x is x * x * x.',
                'examples': [
                    'cube(2)',
                    '2^3',
                    '2 * 2 * 2'
                ],
                'seealso': [
                    'multiply',
                    'square',
                    'pow'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'divide',
                'category': 'Operators',
                'syntax': [
                    'x / y',
                    'divide(x, y)'
                ],
                'description': 'Divide two values.',
                'examples': [
                    'a = 2 / 3',
                    'a * 3',
                    '4.5 / 2',
                    '3 + 4 / 2',
                    '(3 + 4) / 2',
                    '18 km / 4.5'
                ],
                'seealso': [
                    'multiply'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'dotDivide',
                'category': 'Operators',
                'syntax': [
                    'x ./ y',
                    'dotDivide(x, y)'
                ],
                'description': 'Divide two values element wise.',
                'examples': [
                    'a = [1, 2, 3; 4, 5, 6]',
                    'b = [2, 1, 1; 3, 2, 5]',
                    'a ./ b'
                ],
                'seealso': [
                    'multiply',
                    'dotMultiply',
                    'divide'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'dotMultiply',
                'category': 'Operators',
                'syntax': [
                    'x .* y',
                    'dotMultiply(x, y)'
                ],
                'description': 'Multiply two values element wise.',
                'examples': [
                    'a = [1, 2, 3; 4, 5, 6]',
                    'b = [2, 1, 1; 3, 2, 5]',
                    'a .* b'
                ],
                'seealso': [
                    'multiply',
                    'divide',
                    'dotDivide'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'dotpow',
                'category': 'Operators',
                'syntax': [
                    'x .^ y',
                    'dotpow(x, y)'
                ],
                'description': 'Calculates the power of x to y element wise.',
                'examples': [
                    'a = [1, 2, 3; 4, 5, 6]',
                    'a .^ 2'
                ],
                'seealso': [
                    'pow'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'exp',
                'category': 'Arithmetic',
                'syntax': [
                    'exp(x)'
                ],
                'description': 'Calculate the exponent of a value.',
                'examples': [
                    'exp(1.3)',
                    'e ^ 1.3',
                    'log(exp(1.3))',
                    'x = 2.4',
                    '(exp(i*x) == cos(x) + i*sin(x))   # Euler\'s formula'
                ],
                'seealso': [
                    'pow',
                    'log'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'fix',
                'category': 'Arithmetic',
                'syntax': [
                    'fix(x)'
                ],
                'description': 'Round a value towards zero. If x is complex, both real and imaginary part are rounded towards zero.',
                'examples': [
                    'fix(3.2)',
                    'fix(3.8)',
                    'fix(-4.2)',
                    'fix(-4.8)'
                ],
                'seealso': ['ceil', 'floor', 'round']
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'floor',
                'category': 'Arithmetic',
                'syntax': [
                    'floor(x)'
                ],
                'description': 'Round a value towards minus infinity.If x is complex, both real and imaginary part are rounded towards minus infinity.',
                'examples': [
                    'floor(3.2)',
                    'floor(3.8)',
                    'floor(-4.2)'
                ],
                'seealso': ['ceil', 'fix', 'round']
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'gcd',
                'category': 'Arithmetic',
                'syntax': [
                    'gcd(a, b)',
                    'gcd(a, b, c, ...)'
                ],
                'description': 'Compute the greatest common divisor.',
                'examples': [
                    'gcd(8, 12)',
                    'gcd(-4, 6)',
                    'gcd(25, 15, -10)'
                ],
                'seealso': ['lcm', 'xgcd']
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'hypot',
                'category': 'Arithmetic',
                'syntax': [
                    'hypot(a, b, c, ...)',
                    'hypot([a, b, c, ...])'
                ],
                'description': 'Calculate the hypotenusa of a list with values. ',
                'examples': [
                    'hypot(3, 4)',
                    'sqrt(3^2 + 4^2)',
                    'hypot(-2)',
                    'hypot([3, 4, 5])'
                ],
                'seealso': ['abs', 'norm']
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'lcm',
                'category': 'Arithmetic',
                'syntax': [
                    'lcm(x, y)'
                ],
                'description': 'Compute the least common multiple.',
                'examples': [
                    'lcm(4, 6)',
                    'lcm(6, 21)',
                    'lcm(6, 21, 5)'
                ],
                'seealso': ['gcd']
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'log',
                'category': 'Arithmetic',
                'syntax': [
                    'log(x)',
                    'log(x, base)'
                ],
                'description': 'Compute the logarithm of a value. If no base is provided, the natural logarithm of x is calculated. If base if provided, the logarithm is calculated for the specified base. log(x, base) is defined as log(x) / log(base).',
                'examples': [
                    'log(3.5)',
                    'a = log(2.4)',
                    'exp(a)',
                    '10 ^ 4',
                    'log(10000, 10)',
                    'log(10000) / log(10)',
                    'b = log(1024, 2)',
                    '2 ^ b'
                ],
                'seealso': [
                    'exp',
                    'log10'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'log10',
                'category': 'Arithmetic',
                'syntax': [
                    'log10(x)'
                ],
                'description': 'Compute the 10-base logarithm of a value.',
                'examples': [
                    'log10(0.00001)',
                    'log10(10000)',
                    '10 ^ 4',
                    'log(10000) / log(10)',
                    'log(10000, 10)'
                ],
                'seealso': [
                    'exp',
                    'log'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'mod',
                'category': 'Operators',
                'syntax': [
                    'x % y',
                    'x mod y',
                    'mod(x, y)'
                ],
                'description': 'Calculates the modulus, the remainder of an integer division.',
                'examples': [
                    '7 % 3',
                    '11 % 2',
                    '10 mod 4',
                    'isOdd(x) = x % 2',
                    'isOdd(2)',
                    'isOdd(3)'
                ],
                'seealso': ['divide']
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'multiply',
                'category': 'Operators',
                'syntax': [
                    'x * y',
                    'multiply(x, y)'
                ],
                'description': 'multiply two values.',
                'examples': [
                    'a = 2.1 * 3.4',
                    'a / 3.4',
                    '2 * 3 + 4',
                    '2 * (3 + 4)',
                    '3 * 2.1 km'
                ],
                'seealso': [
                    'divide'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'norm',
                'category': 'Arithmetic',
                'syntax': [
                    'norm(x)',
                    'norm(x, p)'
                ],
                'description': 'Calculate the norm of a number, vector or matrix.',
                'examples': [
                    'abs(-3.5)',
                    'norm(-3.5)',
                    'norm(3 - 4i)',
                    'norm([1, 2, -3], Infinity)',
                    'norm([1, 2, -3], -Infinity)',
                    'norm([3, 4], 2)',
                    'norm([[1, 2], [3, 4]], 1)',
                    'norm([[1, 2], [3, 4]], "inf")',
                    'norm([[1, 2], [3, 4]], "fro")'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'nthRoot',
                'category': 'Arithmetic',
                'syntax': [
                    'nthRoot(a)',
                    'nthRoot(a, root)'
                ],
                'description': 'Calculate the nth root of a value. ' +
                    'The principal nth root of a positive real number A, ' +
                    'is the positive real solution of the equation "x^root = A".',
                'examples': [
                    '4 ^ 3',
                    'nthRoot(64, 3)',
                    'nthRoot(9, 2)',
                    'sqrt(9)'
                ],
                'seealso': [
                    'sqrt',
                    'pow'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'pow',
                'category': 'Operators',
                'syntax': [
                    'x ^ y',
                    'pow(x, y)'
                ],
                'description': 'Calculates the power of x to y, x^y.',
                'examples': [
                    '2^3',
                    '2*2*2',
                    '1 + e ^ (pi * i)'
                ],
                'seealso': ['multiply']
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'round',
                'category': 'Arithmetic',
                'syntax': [
                    'round(x)',
                    'round(x, n)'
                ],
                'description': 'round a value towards the nearest integer.If x is complex, both real and imaginary part are rounded towards the nearest integer. When n is specified, the value is rounded to n decimals.',
                'examples': [
                    'round(3.2)',
                    'round(3.8)',
                    'round(-4.2)',
                    'round(-4.8)',
                    'round(pi, 3)',
                    'round(123.45678, 2)'
                ],
                'seealso': ['ceil', 'floor', 'fix']
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'sign',
                'category': 'Arithmetic',
                'syntax': [
                    'sign(x)'
                ],
                'description': 'Compute the sign of a value. The sign of a value x is 1 when x>1, -1 when x<0, and 0 when x=0.',
                'examples': [
                    'sign(3.5)',
                    'sign(-4.2)',
                    'sign(0)'
                ],
                'seealso': [
                    'abs'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'sqrt',
                'category': 'Arithmetic',
                'syntax': [
                    'sqrt(x)'
                ],
                'description': 'Compute the square root value. If x = y * y, then y is the square root of x.',
                'examples': [
                    'sqrt(25)',
                    '5 * 5',
                    'sqrt(-1)'
                ],
                'seealso': [
                    'square',
                    'multiply'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'square',
                'category': 'Arithmetic',
                'syntax': [
                    'square(x)'
                ],
                'description': 'Compute the square of a value. The square of x is x * x.',
                'examples': [
                    'square(3)',
                    'sqrt(9)',
                    '3^2',
                    '3 * 3'
                ],
                'seealso': [
                    'multiply',
                    'pow',
                    'sqrt',
                    'cube'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'subtract',
                'category': 'Operators',
                'syntax': [
                    'x - y',
                    'subtract(x, y)'
                ],
                'description': 'subtract two values.',
                'examples': [
                    'a = 5.3 - 2',
                    'a + 2',
                    '2/3 - 1/6',
                    '2 * 3 - 3',
                    '2.1 km - 500m'
                ],
                'seealso': [
                    'add'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'unaryMinus',
                'category': 'Operators',
                'syntax': [
                    '-x',
                    'unaryMinus(x)'
                ],
                'description': 'Inverse the sign of a value. Converts booleans and strings to numbers.',
                'examples': [
                    '-4.5',
                    '-(-5.6)',
                    '-"22"'
                ],
                'seealso': [
                    'add', 'subtract', 'unaryPlus'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'unaryPlus',
                'category': 'Operators',
                'syntax': [
                    '+x',
                    'unaryPlus(x)'
                ],
                'description': 'Converts booleans and strings to numbers.',
                'examples': [
                    '+true',
                    '+"2"'
                ],
                'seealso': [
                    'add', 'subtract', 'unaryMinus'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'xgcd',
                'category': 'Arithmetic',
                'syntax': [
                    'xgcd(a, b)'
                ],
                'description': 'Calculate the extended greatest common divisor for two values. The result is an array [d, x, y] with 3 entries, where d is the greatest common divisor, and d = x * a + y * b.',
                'examples': [
                    'xgcd(8, 12)',
                    'gcd(8, 12)',
                    'xgcd(36163, 21199)'
                ],
                'seealso': ['gcd', 'lcm']
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'bitAnd',
                'category': 'Bitwise',
                'syntax': [
                    'x & y',
                    'bitAnd(x, y)'
                ],
                'description': 'Bitwise AND operation. Performs the logical AND operation on each pair of the corresponding bits of the two given values by multiplying them. If both bits in the compared position are 1, the bit in the resulting binary representation is 1, otherwise, the result is 0',
                'examples': [
                    '5 & 3',
                    'bitAnd(53, 131)',
                    '[1, 12, 31] & 42'
                ],
                'seealso': [
                    'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'bitNot',
                'category': 'Bitwise',
                'syntax': [
                    '~x',
                    'bitNot(x)'
                ],
                'description': 'Bitwise NOT operation. Performs a logical negation on each bit of the given value. Bits that are 0 become 1, and those that are 1 become 0.',
                'examples': [
                    '~1',
                    '~2',
                    'bitNot([2, -3, 4])'
                ],
                'seealso': [
                    'bitAnd', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'bitOr',
                'category': 'Bitwise',
                'syntax': [
                    'x | y',
                    'bitOr(x, y)'
                ],
                'description': 'Bitwise OR operation. Performs the logical inclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if the first bit is 1 or the second bit is 1 or both bits are 1, otherwise, the result is 0.',
                'examples': [
                    '5 | 3',
                    'bitOr([1, 2, 3], 4)'
                ],
                'seealso': [
                    'bitAnd', 'bitNot', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'bitXor',
                'category': 'Bitwise',
                'syntax': [
                    'bitXor(x, y)'
                ],
                'description': 'Bitwise XOR operation, exclusive OR. Performs the logical exclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if only the first bit is 1 or only the second bit is 1, but will be 0 if both are 0 or both are 1.',
                'examples': [
                    'bitOr(1, 2)',
                    'bitXor([2, 3, 4], 4)'
                ],
                'seealso': [
                    'bitAnd', 'bitNot', 'bitOr', 'leftShift', 'rightArithShift', 'rightLogShift'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'leftShift',
                'category': 'Bitwise',
                'syntax': [
                    'x << y',
                    'leftShift(x, y)'
                ],
                'description': 'Bitwise left logical shift of a value x by y number of bits.',
                'examples': [
                    '4 << 1',
                    '8 >> 1'
                ],
                'seealso': [
                    'bitAnd', 'bitNot', 'bitOr', 'bitXor', 'rightArithShift', 'rightLogShift'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'rightArithShift',
                'category': 'Bitwise',
                'syntax': [
                    'x >> y',
                    'rightArithShift(x, y)'
                ],
                'description': 'Bitwise right arithmetic shift of a value x by y number of bits.',
                'examples': [
                    '8 >> 1',
                    '4 << 1',
                    '-12 >> 2'
                ],
                'seealso': [
                    'bitAnd', 'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightLogShift'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'rightLogShift',
                'category': 'Bitwise',
                'syntax': [
                    'x >>> y',
                    'rightLogShift(x, y)'
                ],
                'description': 'Bitwise right logical shift of a value x by y number of bits.',
                'examples': [
                    '8 >>> 1',
                    '4 << 1',
                    '-12 >>> 2'
                ],
                'seealso': [
                    'bitAnd', 'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'bellNumbers',
                'category': 'Combinatorics',
                'syntax': [
                    'bellNumbers(n)'
                ],
                'description': 'The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S. `bellNumbers` only takes integer arguments. The following condition must be enforced: n >= 0.',
                'examples': [
                    'bellNumbers(3)',
                    'bellNumbers(8)'
                ],
                'seealso': ['stirlingS2']
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'catalan',
                'category': 'Combinatorics',
                'syntax': [
                    'catalan(n)'
                ],
                'description': 'The Catalan Numbers enumerate combinatorial structures of many different types. catalan only takes integer arguments. The following condition must be enforced: n >= 0.',
                'examples': [
                    'catalan(3)',
                    'catalan(8)'
                ],
                'seealso': ['bellNumbers']
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'composition',
                'category': 'Combinatorics',
                'syntax': [
                    'composition(n, k)'
                ],
                'description': 'The composition counts of n into k parts. composition only takes integer arguments. The following condition must be enforced: k <= n.',
                'examples': [
                    'composition(5, 3)'
                ],
                'seealso': ['combinations']
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'stirlingS2',
                'category': 'Combinatorics',
                'syntax': [
                    'stirlingS2(n, k)'
                ],
                'description': 'he Stirling numbers of the second kind, counts the number of ways to partition a set of n labelled objects into k nonempty unlabelled subsets. `stirlingS2` only takes integer arguments. The following condition must be enforced: k <= n. If n = k or k = 1, then s(n,k) = 1.',
                'examples': [
                    'stirlingS2(5, 3)'
                ],
                'seealso': ['bellNumbers']
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'config',
                'category': 'Core',
                'syntax': [
                    'config()',
                    'config(options)'
                ],
                'description': 'Get configuration or change configuration.',
                'examples': [
                    'config()',
                    '1/3 + 1/4',
                    'config({number: "Fraction"})',
                    '1/3 + 1/4'
                ],
                'seealso': []
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'import',
                'category': 'Core',
                'syntax': [
                    'import(functions)',
                    'import(functions, options)'
                ],
                'description': 'Import functions or constants from an object.',
                'examples': [
                    'import({myFn: f(x)=x^2, myConstant: 32 })',
                    'myFn(2)',
                    'myConstant'
                ],
                'seealso': []
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'typed',
                'category': 'Core',
                'syntax': [
                    'typed(signatures)',
                    'typed(name, signatures)'
                ],
                'description': 'Create a typed function.',
                'examples': [
                    'double = typed({ "number, number": f(x)=x+x })',
                    'double(2)',
                    'double("hello")'
                ],
                'seealso': []
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'arg',
                'category': 'Complex',
                'syntax': [
                    'arg(x)'
                ],
                'description': 'Compute the argument of a complex value. If x = a+bi, the argument is computed as atan2(b, a).',
                'examples': [
                    'arg(2 + 2i)',
                    'atan2(3, 2)',
                    'arg(2 + 3i)'
                ],
                'seealso': [
                    're',
                    'im',
                    'conj',
                    'abs'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'conj',
                'category': 'Complex',
                'syntax': [
                    'conj(x)'
                ],
                'description': 'Compute the complex conjugate of a complex value. If x = a+bi, the complex conjugate is a-bi.',
                'examples': [
                    'conj(2 + 3i)',
                    'conj(2 - 3i)',
                    'conj(-5.2i)'
                ],
                'seealso': [
                    're',
                    'im',
                    'abs',
                    'arg'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 're',
                'category': 'Complex',
                'syntax': [
                    're(x)'
                ],
                'description': 'Get the real part of a complex number.',
                'examples': [
                    're(2 + 3i)',
                    'im(2 + 3i)',
                    're(-5.2i)',
                    're(2.4)'
                ],
                'seealso': [
                    'im',
                    'conj',
                    'abs',
                    'arg'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'im',
                'category': 'Complex',
                'syntax': [
                    'im(x)'
                ],
                'description': 'Get the imaginary part of a complex number.',
                'examples': [
                    'im(2 + 3i)',
                    're(2 + 3i)',
                    'im(-5.2i)',
                    'im(2.4)'
                ],
                'seealso': [
                    're',
                    'conj',
                    'abs',
                    'arg'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'eval',
                'category': 'Expression',
                'syntax': [
                    'eval(expression)',
                    'eval([expr1, expr2, expr3, ...])'
                ],
                'description': 'Evaluate an expression or an array with expressions.',
                'examples': [
                    'eval("2 + 3")',
                    'eval("sqrt(" + 4 + ")")'
                ],
                'seealso': []
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'help',
                'category': 'Expression',
                'syntax': [
                    'help(object)',
                    'help(string)'
                ],
                'description': 'Display documentation on a function or data type.',
                'examples': [
                    'help(sqrt)',
                    'help("complex")'
                ],
                'seealso': []
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'distance',
                'category': 'Geometry',
                'syntax': [
                    'distance([x1, y1], [x2, y2])',
                    'distance([[x1, y1], [x2, y2])'
                ],
                'description': 'Calculates the Euclidean distance between two points.',
                'examples': [
                    'distance([0,0], [4,4])',
                    'distance([[0,0], [4,4]])'
                ],
                'seealso': []
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'intersect',
                'category': 'Geometry',
                'syntax': [
                    'intersect(expr1, expr2, expr3, expr4)',
                    'intersect(expr1, expr2, expr3)'
                ],
                'description': 'Computes the intersection point of lines and/or planes.',
                'examples': [
                    'intersect([0, 0], [10, 10], [10, 0], [0, 10])',
                    'intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])'
                ],
                'seealso': []
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'and',
                'category': 'Logical',
                'syntax': [
                    'x and y',
                    'and(x, y)'
                ],
                'description': 'Logical and. Test whether two values are both defined with a nonzero/nonempty value.',
                'examples': [
                    'true and false',
                    'true and true',
                    '2 and 4'
                ],
                'seealso': [
                    'not', 'or', 'xor'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'not',
                'category': 'Logical',
                'syntax': [
                    'not x',
                    'not(x)'
                ],
                'description': 'Logical not. Flips the boolean value of given argument.',
                'examples': [
                    'not true',
                    'not false',
                    'not 2',
                    'not 0'
                ],
                'seealso': [
                    'and', 'or', 'xor'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'or',
                'category': 'Logical',
                'syntax': [
                    'x or y',
                    'or(x, y)'
                ],
                'description': 'Logical or. Test if at least one value is defined with a nonzero/nonempty value.',
                'examples': [
                    'true or false',
                    'false or false',
                    '0 or 4'
                ],
                'seealso': [
                    'not', 'and', 'xor'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'xor',
                'category': 'Logical',
                'syntax': [
                    'x xor y',
                    'xor(x, y)'
                ],
                'description': 'Logical exclusive or, xor. Test whether one and only one value is defined with a nonzero/nonempty value.',
                'examples': [
                    'true xor false',
                    'false xor false',
                    'true xor true',
                    '0 xor 4'
                ],
                'seealso': [
                    'not', 'and', 'or'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'concat',
                'category': 'Matrix',
                'syntax': [
                    'concat(A, B, C, ...)',
                    'concat(A, B, C, ..., dim)'
                ],
                'description': 'Concatenate matrices. By default, the matrices are concatenated by the last dimension. The dimension on which to concatenate can be provided as last argument.',
                'examples': [
                    'A = [1, 2; 5, 6]',
                    'B = [3, 4; 7, 8]',
                    'concat(A, B)',
                    'concat(A, B, 1)',
                    'concat(A, B, 2)'
                ],
                'seealso': [
                    'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'cross',
                'category': 'Matrix',
                'syntax': [
                    'cross(A, B)'
                ],
                'description': 'Calculate the cross product for two vectors in three dimensional space.',
                'examples': [
                    'cross([1, 1, 0],  [0, 1, 1])',
                    'cross([3, -3, 1], [4, 9, 2])',
                    'cross([2, 3, 4],  [5, 6, 7])'
                ],
                'seealso': [
                    'multiply',
                    'dot'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'det',
                'category': 'Matrix',
                'syntax': [
                    'det(x)'
                ],
                'description': 'Calculate the determinant of a matrix',
                'examples': [
                    'det([1, 2; 3, 4])',
                    'det([-2, 2, 3; -1, 1, 3; 2, 0, -1])'
                ],
                'seealso': [
                    'concat', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'diag',
                'category': 'Matrix',
                'syntax': [
                    'diag(x)',
                    'diag(x, k)'
                ],
                'description': 'Create a diagonal matrix or retrieve the diagonal of a matrix. When x is a vector, a matrix with the vector values on the diagonal will be returned. When x is a matrix, a vector with the diagonal values of the matrix is returned. When k is provided, the k-th diagonal will be filled in or retrieved, if k is positive, the values are placed on the super diagonal. When k is negative, the values are placed on the sub diagonal.',
                'examples': [
                    'diag(1:3)',
                    'diag(1:3, 1)',
                    'a = [1, 2, 3; 4, 5, 6; 7, 8, 9]',
                    'diag(a)'
                ],
                'seealso': [
                    'concat', 'det', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'dot',
                'category': 'Matrix',
                'syntax': [
                    'dot(A, B)',
                    'A * B'
                ],
                'description': 'Calculate the dot product of two vectors. ' +
                    'The dot product of A = [a1, a2, a3, ..., an] and B = [b1, b2, b3, ..., bn] ' +
                    'is defined as dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn',
                'examples': [
                    'dot([2, 4, 1], [2, 2, 3])',
                    '[2, 4, 1] * [2, 2, 3]'
                ],
                'seealso': [
                    'multiply',
                    'cross'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'eye',
                'category': 'Matrix',
                'syntax': [
                    'eye(n)',
                    'eye(m, n)',
                    'eye([m, n])'
                ],
                'description': 'Returns the identity matrix with size m-by-n. The matrix has ones on the diagonal and zeros elsewhere.',
                'examples': [
                    'eye(3)',
                    'eye(3, 5)',
                    'a = [1, 2, 3; 4, 5, 6]',
                    'eye(size(a))'
                ],
                'seealso': [
                    'concat', 'det', 'diag', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'filter',
                'category': 'Matrix',
                'syntax': [
                    'filter(x, test)'
                ],
                'description': 'Filter items in a matrix.',
                'examples': [
                    'isPositive(x) = x > 0',
                    'filter([6, -2, -1, 4, 3], isPositive)',
                    'filter([6, -2, 0, 1, 0], x != 0)'
                ],
                'seealso': ['sort', 'map', 'forEach']
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'flatten',
                'category': 'Matrix',
                'syntax': [
                    'flatten(x)'
                ],
                'description': 'Flatten a multi dimensional matrix into a single dimensional matrix.',
                'examples': [
                    'a = [1, 2, 3; 4, 5, 6]',
                    'size(a)',
                    'b = flatten(a)',
                    'size(b)'
                ],
                'seealso': [
                    'concat', 'resize', 'size', 'squeeze'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'forEach',
                'category': 'Matrix',
                'syntax': [
                    'forEach(x, callback)'
                ],
                'description': 'Iterates over all elements of a matrix/array, and executes the given callback function.',
                'examples': [
                    'forEach([1, 2, 3], function(val) { console.log(val) })'
                ],
                'seealso': ['map', 'sort', 'filter']
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'inv',
                'category': 'Matrix',
                'syntax': [
                    'inv(x)'
                ],
                'description': 'Calculate the inverse of a matrix',
                'examples': [
                    'inv([1, 2; 3, 4])',
                    'inv(4)',
                    '1 / 4'
                ],
                'seealso': [
                    'concat', 'det', 'diag', 'eye', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'kron',
                'category': 'Matrix',
                'syntax': [
                    'kron(x, y)'
                ],
                'description': 'Calculates the kronecker product of 2 matrices or vectors.',
                'examples': [
                    'kron([[1, 0], [0, 1]], [[1, 2], [3, 4]])',
                    'kron([1,1], [2,3,4])'
                ],
                'seealso': [
                    'multiply', 'dot', 'cross'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'map',
                'category': 'Matrix',
                'syntax': [
                    'map(x, callback)'
                ],
                'description': 'Create a new matrix or array with the results of the callback function executed on each entry of the matrix/array.',
                'examples': [
                    'map([1, 2, 3], square)'
                ],
                'seealso': ['filter', 'forEach']
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'ones',
                'category': 'Matrix',
                'syntax': [
                    'ones(m)',
                    'ones(m, n)',
                    'ones(m, n, p, ...)',
                    'ones([m])',
                    'ones([m, n])',
                    'ones([m, n, p, ...])'
                ],
                'description': 'Create a matrix containing ones.',
                'examples': [
                    'ones(3)',
                    'ones(3, 5)',
                    'ones([2,3]) * 4.5',
                    'a = [1, 2, 3; 4, 5, 6]',
                    'ones(size(a))'
                ],
                'seealso': [
                    'concat', 'det', 'diag', 'eye', 'inv', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'partitionSelect',
                'category': 'Matrix',
                'syntax': [
                    'partitionSelect(x, k)',
                    'partitionSelect(x, k, compare)'
                ],
                'description': 'Partition-based selection of an array or 1D matrix. Will find the kth smallest value, and mutates the input array. Uses Quickselect.',
                'examples': [
                    'partitionSelect([5, 10, 1], 2)',
                    'partitionSelect(["C", "B", "A", "D"], 1)'
                ],
                'seealso': ['sort']
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'range',
                'category': 'Type',
                'syntax': [
                    'start:end',
                    'start:step:end',
                    'range(start, end)',
                    'range(start, end, step)',
                    'range(string)'
                ],
                'description': 'Create a range. Lower bound of the range is included, upper bound is excluded.',
                'examples': [
                    '1:5',
                    '3:-1:-3',
                    'range(3, 7)',
                    'range(0, 12, 2)',
                    'range("4:10")',
                    'a = [1, 2, 3, 4; 5, 6, 7, 8]',
                    'a[1:2, 1:2]'
                ],
                'seealso': [
                    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'resize',
                'category': 'Matrix',
                'syntax': [
                    'resize(x, size)',
                    'resize(x, size, defaultValue)'
                ],
                'description': 'Resize a matrix.',
                'examples': [
                    'resize([1,2,3,4,5], [3])',
                    'resize([1,2,3], [5])',
                    'resize([1,2,3], [5], -1)',
                    'resize(2, [2, 3])',
                    'resize("hello", [8], "!")'
                ],
                'seealso': [
                    'size', 'subset', 'squeeze', 'reshape'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'reshape',
                'category': 'Matrix',
                'syntax': [
                    'reshape(x, sizes)'
                ],
                'description': 'Reshape a multi dimensional array to fit the specified dimensions.',
                'examples': [
                    'reshape([1, 2, 3, 4, 5, 6], [2, 3])',
                    'reshape([[1, 2], [3, 4]], [1, 4])',
                    'reshape([[1, 2], [3, 4]], [4])'
                ],
                'seealso': [
                    'size', 'squeeze', 'resize'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'size',
                'category': 'Matrix',
                'syntax': [
                    'size(x)'
                ],
                'description': 'Calculate the size of a matrix.',
                'examples': [
                    'size(2.3)',
                    'size("hello world")',
                    'a = [1, 2; 3, 4; 5, 6]',
                    'size(a)',
                    'size(1:6)'
                ],
                'seealso': [
                    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'sort',
                'category': 'Matrix',
                'syntax': [
                    'sort(x)',
                    'sort(x, compare)'
                ],
                'description': 'Sort the items in a matrix. Compare can be a string "asc", "desc", "natural", or a custom sort function.',
                'examples': [
                    'sort([5, 10, 1])',
                    'sort(["C", "B", "A", "D"])',
                    'sortByLength(a, b) = size(a)[1] - size(b)[1]',
                    'sort(["Langdon", "Tom", "Sara"], sortByLength)',
                    'sort(["10", "1", "2"], "natural")'
                ],
                'seealso': ['map', 'filter', 'forEach']
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'squeeze',
                'category': 'Matrix',
                'syntax': [
                    'squeeze(x)'
                ],
                'description': 'Remove inner and outer singleton dimensions from a matrix.',
                'examples': [
                    'a = zeros(3,2,1)',
                    'size(squeeze(a))',
                    'b = zeros(1,1,3)',
                    'size(squeeze(b))'
                ],
                'seealso': [
                    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'subset', 'trace', 'transpose', 'zeros'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'subset',
                'category': 'Matrix',
                'syntax': [
                    'value(index)',
                    'value(index) = replacement',
                    'subset(value, [index])',
                    'subset(value, [index], replacement)'
                ],
                'description': 'Get or set a subset of a matrix or string. ' +
                    'Indexes are one-based. ' +
                    'Both the ranges lower-bound and upper-bound are included.',
                'examples': [
                    'd = [1, 2; 3, 4]',
                    'e = []',
                    'e[1, 1:2] = [5, 6]',
                    'e[2, :] = [7, 8]',
                    'f = d * e',
                    'f[2, 1]',
                    'f[:, 1]'
                ],
                'seealso': [
                    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'trace', 'transpose', 'zeros'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'trace',
                'category': 'Matrix',
                'syntax': [
                    'trace(A)'
                ],
                'description': 'Calculate the trace of a matrix: the sum of the elements on the main diagonal of a square matrix.',
                'examples': [
                    'A = [1, 2, 3; -1, 2, 3; 2, 0, 3]',
                    'trace(A)'
                ],
                'seealso': [
                    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'transpose', 'zeros'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'transpose',
                'category': 'Matrix',
                'syntax': [
                    'x\'',
                    'transpose(x)'
                ],
                'description': 'Transpose a matrix',
                'examples': [
                    'a = [1, 2, 3; 4, 5, 6]',
                    'a\'',
                    'transpose(a)'
                ],
                'seealso': [
                    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'zeros'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'zeros',
                'category': 'Matrix',
                'syntax': [
                    'zeros(m)',
                    'zeros(m, n)',
                    'zeros(m, n, p, ...)',
                    'zeros([m])',
                    'zeros([m, n])',
                    'zeros([m, n, p, ...])'
                ],
                'description': 'Create a matrix containing zeros.',
                'examples': [
                    'zeros(3)',
                    'zeros(3, 5)',
                    'a = [1, 2, 3; 4, 5, 6]',
                    'zeros(size(a))'
                ],
                'seealso': [
                    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'combinations',
                'category': 'Probability',
                'syntax': [
                    'combinations(n, k)'
                ],
                'description': 'Compute the number of combinations of n items taken k at a time',
                'examples': [
                    'combinations(7, 5)'
                ],
                'seealso': ['permutations', 'factorial']
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'factorial',
                'category': 'Probability',
                'syntax': [
                    'n!',
                    'factorial(n)'
                ],
                'description': 'Compute the factorial of a value',
                'examples': [
                    '5!',
                    '5 * 4 * 3 * 2 * 1',
                    '3!'
                ],
                'seealso': ['combinations', 'permutations', 'gamma']
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'gamma',
                'category': 'Probability',
                'syntax': [
                    'gamma(n)'
                ],
                'description': 'Compute the gamma function. For small values, the Lanczos approximation is used, and for large values the extended Stirling approximation.',
                'examples': [
                    'gamma(4)',
                    '3!',
                    'gamma(1/2)',
                    'sqrt(pi)'
                ],
                'seealso': ['factorial']
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'kldivergence',
                'category': 'Probability',
                'syntax': [
                    'kldivergence(x, y)'
                ],
                'description': 'Calculate the Kullback-Leibler (KL) divergence  between two distributions.',
                'examples': [
                    'kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5])'
                ],
                'seealso': []
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'multinomial',
                'category': 'Probability',
                'syntax': [
                    'multinomial(A)'
                ],
                'description': 'Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities. multinomial takes one array of integers as an argument. The following condition must be enforced: every ai > 0.',
                'examples': [
                    'multinomial([1, 2, 1])'
                ],
                'seealso': ['combinations', 'factorial']
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'permutations',
                'category': 'Probability',
                'syntax': [
                    'permutations(n)',
                    'permutations(n, k)'
                ],
                'description': 'Compute the number of permutations of n items taken k at a time',
                'examples': [
                    'permutations(5)',
                    'permutations(5, 3)'
                ],
                'seealso': ['combinations', 'factorial']
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'pickRandom',
                'category': 'Probability',
                'syntax': [
                    'pickRandom(array)',
                    'pickRandom(array, number)',
                    'pickRandom(array, weights)',
                    'pickRandom(array, number, weights)',
                    'pickRandom(array, weights, number)'
                ],
                'description': 'Pick a random entry from a given array.',
                'examples': [
                    'pickRandom(0:10)',
                    'pickRandom([1, 3, 1, 6])',
                    'pickRandom([1, 3, 1, 6], 2)',
                    'pickRandom([1, 3, 1, 6], [2, 3, 2, 1])',
                    'pickRandom([1, 3, 1, 6], 2, [2, 3, 2, 1])',
                    'pickRandom([1, 3, 1, 6], [2, 3, 2, 1], 2)'
                ],
                'seealso': ['random', 'randomInt']
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'random',
                'category': 'Probability',
                'syntax': [
                    'random()',
                    'random(max)',
                    'random(min, max)',
                    'random(size)',
                    'random(size, max)',
                    'random(size, min, max)'
                ],
                'description': 'Return a random number.',
                'examples': [
                    'random()',
                    'random(10, 20)',
                    'random([2, 3])'
                ],
                'seealso': ['pickRandom', 'randomInt']
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'randomInt',
                'category': 'Probability',
                'syntax': [
                    'randomInt(max)',
                    'randomInt(min, max)',
                    'randomInt(size)',
                    'randomInt(size, max)',
                    'randomInt(size, min, max)'
                ],
                'description': 'Return a random integer number',
                'examples': [
                    'randomInt(10, 20)',
                    'randomInt([2, 3], 10)'
                ],
                'seealso': ['pickRandom', 'random']
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'compare',
                'category': 'Relational',
                'syntax': [
                    'compare(x, y)'
                ],
                'description': 'Compare two values. Returns 1 if x is larger than y, -1 if x is smaller than y, and 0 if x and y are equal.',
                'examples': [
                    'compare(2, 3)',
                    'compare(3, 2)',
                    'compare(2, 2)',
                    'compare(5cm, 40mm)',
                    'compare(2, [1, 2, 3])'
                ],
                'seealso': [
                    'equal', 'unequal', 'smaller', 'smallerEq', 'largerEq', 'compareNatural'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'compareNatural',
                'category': 'Relational',
                'syntax': [
                    'compareNatural(x, y)'
                ],
                'description': 'Compare two values of any type in a deterministic, natural way.',
                'examples': [
                    'compareNatural(2, 3)',
                    'compareNatural(3, 2)',
                    'compareNatural(2, 2)',
                    'compareNatural(5cm, 40mm)',
                    'compareNatural("2", "10")',
                    'compareNatural(2 + 3i, 2 + 4i)',
                    'compareNatural([1, 2, 4], [1, 2, 3])',
                    'compareNatural([1, 5], [1, 2, 3])',
                    'compareNatural([1, 2], [1, 2])',
                    'compareNatural({a: 2}, {a: 4})'
                ],
                'seealso': [
                    'equal', 'unequal', 'smaller', 'smallerEq', 'largerEq', 'compare'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'deepEqual',
                'category': 'Relational',
                'syntax': [
                    'deepEqual(x, y)'
                ],
                'description': 'Check equality of two matrices element wise. Returns true if the size of both matrices is equal and when and each of the elements are equal.',
                'examples': [
                    'deepEqual([1,3,4], [1,3,4])',
                    'deepEqual([1,3,4], [1,3])'
                ],
                'seealso': [
                    'equal', 'unequal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'equal',
                'category': 'Relational',
                'syntax': [
                    'x == y',
                    'equal(x, y)'
                ],
                'description': 'Check equality of two values. Returns true if the values are equal, and false if not.',
                'examples': [
                    '2+2 == 3',
                    '2+2 == 4',
                    'a = 3.2',
                    'b = 6-2.8',
                    'a == b',
                    '50cm == 0.5m'
                ],
                'seealso': [
                    'unequal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare', 'deepEqual'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'larger',
                'category': 'Relational',
                'syntax': [
                    'x > y',
                    'larger(x, y)'
                ],
                'description': 'Check if value x is larger than y. Returns true if x is larger than y, and false if not.',
                'examples': [
                    '2 > 3',
                    '5 > 2*2',
                    'a = 3.3',
                    'b = 6-2.8',
                    '(a > b)',
                    '(b < a)',
                    '5 cm > 2 inch'
                ],
                'seealso': [
                    'equal', 'unequal', 'smaller', 'smallerEq', 'largerEq', 'compare'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'largerEq',
                'category': 'Relational',
                'syntax': [
                    'x >= y',
                    'largerEq(x, y)'
                ],
                'description': 'Check if value x is larger or equal to y. Returns true if x is larger or equal to y, and false if not.',
                'examples': [
                    '2 >= 1+1',
                    '2 > 1+1',
                    'a = 3.2',
                    'b = 6-2.8',
                    '(a >= b)'
                ],
                'seealso': [
                    'equal', 'unequal', 'smallerEq', 'smaller', 'compare'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'smaller',
                'category': 'Relational',
                'syntax': [
                    'x < y',
                    'smaller(x, y)'
                ],
                'description': 'Check if value x is smaller than value y. Returns true if x is smaller than y, and false if not.',
                'examples': [
                    '2 < 3',
                    '5 < 2*2',
                    'a = 3.3',
                    'b = 6-2.8',
                    '(a < b)',
                    '5 cm < 2 inch'
                ],
                'seealso': [
                    'equal', 'unequal', 'larger', 'smallerEq', 'largerEq', 'compare'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'smallerEq',
                'category': 'Relational',
                'syntax': [
                    'x <= y',
                    'smallerEq(x, y)'
                ],
                'description': 'Check if value x is smaller or equal to value y. Returns true if x is smaller than y, and false if not.',
                'examples': [
                    '2 <= 1+1',
                    '2 < 1+1',
                    'a = 3.2',
                    'b = 6-2.8',
                    '(a <= b)'
                ],
                'seealso': [
                    'equal', 'unequal', 'larger', 'smaller', 'largerEq', 'compare'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'unequal',
                'category': 'Relational',
                'syntax': [
                    'x != y',
                    'unequal(x, y)'
                ],
                'description': 'Check unequality of two values. Returns true if the values are unequal, and false if they are equal.',
                'examples': [
                    '2+2 != 3',
                    '2+2 != 4',
                    'a = 3.2',
                    'b = 6-2.8',
                    'a != b',
                    '50cm != 0.5m',
                    '5 cm != 2 inch'
                ],
                'seealso': [
                    'equal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare', 'deepEqual'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'setCartesian',
                'category': 'Set',
                'syntax': [
                    'setCartesian(set1, set2)'
                ],
                'description': 'Create the cartesian product of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
                'examples': [
                    'setCartesian([1, 2], [3, 4])'
                ],
                'seealso': [
                    'setUnion', 'setIntersect', 'setDifference', 'setPowerset'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'setDifference',
                'category': 'Set',
                'syntax': [
                    'setDifference(set1, set2)'
                ],
                'description': 'Create the difference of two (multi)sets: every element of set1, that is not the element of set2. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
                'examples': [
                    'setDifference([1, 2, 3, 4], [3, 4, 5, 6])',
                    'setDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])'
                ],
                'seealso': [
                    'setUnion', 'setIntersect', 'setSymDifference'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'setDistinct',
                'category': 'Set',
                'syntax': [
                    'setDistinct(set)'
                ],
                'description': 'Collect the distinct elements of a multiset. A multi-dimension array will be converted to a single-dimension array before the operation.',
                'examples': [
                    'setDistinct([1, 1, 1, 2, 2, 3])'
                ],
                'seealso': [
                    'setMultiplicity'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'setIntersect',
                'category': 'Set',
                'syntax': [
                    'setIntersect(set1, set2)'
                ],
                'description': 'Create the intersection of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
                'examples': [
                    'setIntersect([1, 2, 3, 4], [3, 4, 5, 6])',
                    'setIntersect([[1, 2], [3, 4]], [[3, 4], [5, 6]])'
                ],
                'seealso': [
                    'setUnion', 'setDifference'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'setIsSubset',
                'category': 'Set',
                'syntax': [
                    'setIsSubset(set1, set2)'
                ],
                'description': 'Check whether a (multi)set is a subset of another (multi)set: every element of set1 is the element of set2. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
                'examples': [
                    'setIsSubset([1, 2], [3, 4, 5, 6])',
                    'setIsSubset([3, 4], [3, 4, 5, 6])'
                ],
                'seealso': [
                    'setUnion', 'setIntersect', 'setDifference'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'setMultiplicity',
                'category': 'Set',
                'syntax': [
                    'setMultiplicity(element, set)'
                ],
                'description': 'Count the multiplicity of an element in a multiset. A multi-dimension array will be converted to a single-dimension array before the operation.',
                'examples': [
                    'setMultiplicity(1, [1, 2, 2, 4])',
                    'setMultiplicity(2, [1, 2, 2, 4])'
                ],
                'seealso': [
                    'setDistinct', 'setSize'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'setPowerset',
                'category': 'Set',
                'syntax': [
                    'setPowerset(set)'
                ],
                'description': 'Create the powerset of a (multi)set: the powerset contains very possible subsets of a (multi)set. A multi-dimension array will be converted to a single-dimension array before the operation.',
                'examples': [
                    'setPowerset([1, 2, 3])'
                ],
                'seealso': [
                    'setCartesian'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'setSize',
                'category': 'Set',
                'syntax': [
                    'setSize(set)',
                    'setSize(set, unique)'
                ],
                'description': 'Count the number of elements of a (multi)set. When the second parameter "unique" is true, count only the unique values. A multi-dimension array will be converted to a single-dimension array before the operation.',
                'examples': [
                    'setSize([1, 2, 2, 4])',
                    'setSize([1, 2, 2, 4], true)'
                ],
                'seealso': [
                    'setUnion', 'setIntersect', 'setDifference'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'setSymDifference',
                'category': 'Set',
                'syntax': [
                    'setSymDifference(set1, set2)'
                ],
                'description': 'Create the symmetric difference of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
                'examples': [
                    'setSymDifference([1, 2, 3, 4], [3, 4, 5, 6])',
                    'setSymDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])'
                ],
                'seealso': [
                    'setUnion', 'setIntersect', 'setDifference'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'setUnion',
                'category': 'Set',
                'syntax': [
                    'setUnion(set1, set2)'
                ],
                'description': 'Create the union of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
                'examples': [
                    'setUnion([1, 2, 3, 4], [3, 4, 5, 6])',
                    'setUnion([[1, 2], [3, 4]], [[3, 4], [5, 6]])'
                ],
                'seealso': [
                    'setIntersect', 'setDifference'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'erf',
                'category': 'Special',
                'syntax': [
                    'erf(x)'
                ],
                'description': 'Compute the erf function of a value using a rational Chebyshev approximations for different intervals of x',
                'examples': [
                    'erf(0.2)',
                    'erf(-0.5)',
                    'erf(4)'
                ],
                'seealso': []
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'mad',
                'category': 'Statistics',
                'syntax': [
                    'mad(a, b, c, ...)',
                    'mad(A)'
                ],
                'description': 'Compute the median absolute deviation of a matrix or a list with values. The median absolute deviation is defined as the median of the absolute deviations from the median.',
                'examples': [
                    'mad(10, 20, 30)',
                    'mad([1, 2, 3])'
                ],
                'seealso': [
                    'mean',
                    'median',
                    'std',
                    'abs'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'max',
                'category': 'Statistics',
                'syntax': [
                    'max(a, b, c, ...)',
                    'max(A)',
                    'max(A, dim)'
                ],
                'description': 'Compute the maximum value of a list of values.',
                'examples': [
                    'max(2, 3, 4, 1)',
                    'max([2, 3, 4, 1])',
                    'max([2, 5; 4, 3])',
                    'max([2, 5; 4, 3], 1)',
                    'max([2, 5; 4, 3], 2)',
                    'max(2.7, 7.1, -4.5, 2.0, 4.1)',
                    'min(2.7, 7.1, -4.5, 2.0, 4.1)'
                ],
                'seealso': [
                    'mean',
                    'median',
                    'min',
                    'prod',
                    'std',
                    'sum',
                    'var'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'mean',
                'category': 'Statistics',
                'syntax': [
                    'mean(a, b, c, ...)',
                    'mean(A)',
                    'mean(A, dim)'
                ],
                'description': 'Compute the arithmetic mean of a list of values.',
                'examples': [
                    'mean(2, 3, 4, 1)',
                    'mean([2, 3, 4, 1])',
                    'mean([2, 5; 4, 3])',
                    'mean([2, 5; 4, 3], 1)',
                    'mean([2, 5; 4, 3], 2)',
                    'mean([1.0, 2.7, 3.2, 4.0])'
                ],
                'seealso': [
                    'max',
                    'median',
                    'min',
                    'prod',
                    'std',
                    'sum',
                    'var'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'median',
                'category': 'Statistics',
                'syntax': [
                    'median(a, b, c, ...)',
                    'median(A)'
                ],
                'description': 'Compute the median of all values. The values are sorted and the middle value is returned. In case of an even number of values, the average of the two middle values is returned.',
                'examples': [
                    'median(5, 2, 7)',
                    'median([3, -1, 5, 7])'
                ],
                'seealso': [
                    'max',
                    'mean',
                    'min',
                    'prod',
                    'std',
                    'sum',
                    'var',
                    'quantileSeq'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'min',
                'category': 'Statistics',
                'syntax': [
                    'min(a, b, c, ...)',
                    'min(A)',
                    'min(A, dim)'
                ],
                'description': 'Compute the minimum value of a list of values.',
                'examples': [
                    'min(2, 3, 4, 1)',
                    'min([2, 3, 4, 1])',
                    'min([2, 5; 4, 3])',
                    'min([2, 5; 4, 3], 1)',
                    'min([2, 5; 4, 3], 2)',
                    'min(2.7, 7.1, -4.5, 2.0, 4.1)',
                    'max(2.7, 7.1, -4.5, 2.0, 4.1)'
                ],
                'seealso': [
                    'max',
                    'mean',
                    'median',
                    'prod',
                    'std',
                    'sum',
                    'var'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'mode',
                'category': 'Statistics',
                'syntax': [
                    'mode(a, b, c, ...)',
                    'mode(A)',
                    'mode(A, a, b, B, c, ...)'
                ],
                'description': 'Computes the mode of all values as an array. In case mode being more than one, multiple values are returned in an array.',
                'examples': [
                    'mode(2, 1, 4, 3, 1)',
                    'mode([1, 2.7, 3.2, 4, 2.7])',
                    'mode(1, 4, 6, 1, 6)'
                ],
                'seealso': [
                    'max',
                    'mean',
                    'min',
                    'median',
                    'prod',
                    'std',
                    'sum',
                    'var'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'prod',
                'category': 'Statistics',
                'syntax': [
                    'prod(a, b, c, ...)',
                    'prod(A)'
                ],
                'description': 'Compute the product of all values.',
                'examples': [
                    'prod(2, 3, 4)',
                    'prod([2, 3, 4])',
                    'prod([2, 5; 4, 3])'
                ],
                'seealso': [
                    'max',
                    'mean',
                    'min',
                    'median',
                    'min',
                    'std',
                    'sum',
                    'var'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'quantileSeq',
                'category': 'Statistics',
                'syntax': [
                    'quantileSeq(A, prob[, sorted])',
                    'quantileSeq(A, [prob1, prob2, ...][, sorted])',
                    'quantileSeq(A, N[, sorted])'
                ],
                'description': 'Compute the prob order quantile of a matrix or a list with values. The sequence is sorted and the middle value is returned. Supported types of sequence values are: Number, BigNumber, Unit Supported types of probablity are: Number, BigNumber. \n\nIn case of a (multi dimensional) array or matrix, the prob order quantile of all elements will be calculated.',
                'examples': [
                    'quantileSeq([3, -1, 5, 7], 0.5)',
                    'quantileSeq([3, -1, 5, 7], [1/3, 2/3])',
                    'quantileSeq([3, -1, 5, 7], 2)',
                    'quantileSeq([-1, 3, 5, 7], 0.5, true)'
                ],
                'seealso': [
                    'mean',
                    'median',
                    'min',
                    'max',
                    'prod',
                    'std',
                    'sum',
                    'var'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'std',
                'category': 'Statistics',
                'syntax': [
                    'std(a, b, c, ...)',
                    'std(A)',
                    'std(A, normalization)'
                ],
                'description': 'Compute the standard deviation of all values, defined as std(A) = sqrt(var(A)). Optional parameter normalization can be "unbiased" (default), "uncorrected", or "biased".',
                'examples': [
                    'std(2, 4, 6)',
                    'std([2, 4, 6, 8])',
                    'std([2, 4, 6, 8], "uncorrected")',
                    'std([2, 4, 6, 8], "biased")',
                    'std([1, 2, 3; 4, 5, 6])'
                ],
                'seealso': [
                    'max',
                    'mean',
                    'min',
                    'median',
                    'min',
                    'prod',
                    'sum',
                    'var'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'sum',
                'category': 'Statistics',
                'syntax': [
                    'sum(a, b, c, ...)',
                    'sum(A)'
                ],
                'description': 'Compute the sum of all values.',
                'examples': [
                    'sum(2, 3, 4, 1)',
                    'sum([2, 3, 4, 1])',
                    'sum([2, 5; 4, 3])'
                ],
                'seealso': [
                    'max',
                    'mean',
                    'median',
                    'min',
                    'prod',
                    'std',
                    'sum',
                    'var'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'var',
                'category': 'Statistics',
                'syntax': [
                    'var(a, b, c, ...)',
                    'var(A)',
                    'var(A, normalization)'
                ],
                'description': 'Compute the variance of all values. Optional parameter normalization can be "unbiased" (default), "uncorrected", or "biased".',
                'examples': [
                    'var(2, 4, 6)',
                    'var([2, 4, 6, 8])',
                    'var([2, 4, 6, 8], "uncorrected")',
                    'var([2, 4, 6, 8], "biased")',
                    'var([1, 2, 3; 4, 5, 6])'
                ],
                'seealso': [
                    'max',
                    'mean',
                    'min',
                    'median',
                    'min',
                    'prod',
                    'std',
                    'sum'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'acos',
                'category': 'Trigonometry',
                'syntax': [
                    'acos(x)'
                ],
                'description': 'Compute the inverse cosine of a value in radians.',
                'examples': [
                    'acos(0.5)',
                    'acos(cos(2.3))'
                ],
                'seealso': [
                    'cos',
                    'atan',
                    'asin'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'acosh',
                'category': 'Trigonometry',
                'syntax': [
                    'acosh(x)'
                ],
                'description': 'Calculate the hyperbolic arccos of a value, defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.',
                'examples': [
                    'acosh(1.5)'
                ],
                'seealso': [
                    'cosh',
                    'asinh',
                    'atanh'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'acot',
                'category': 'Trigonometry',
                'syntax': [
                    'acot(x)'
                ],
                'description': 'Calculate the inverse cotangent of a value.',
                'examples': [
                    'acot(0.5)',
                    'acot(cot(0.5))',
                    'acot(2)'
                ],
                'seealso': [
                    'cot',
                    'atan'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'acoth',
                'category': 'Trigonometry',
                'syntax': [
                    'acoth(x)'
                ],
                'description': 'Calculate the hyperbolic arccotangent of a value, defined as `acoth(x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.',
                'examples': [
                    'acoth(2)',
                    'acoth(0.5)'
                ],
                'seealso': [
                    'acsch',
                    'asech'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'acsc',
                'category': 'Trigonometry',
                'syntax': [
                    'acsc(x)'
                ],
                'description': 'Calculate the inverse cotangent of a value.',
                'examples': [
                    'acsc(2)',
                    'acsc(csc(0.5))',
                    'acsc(0.5)'
                ],
                'seealso': [
                    'csc',
                    'asin',
                    'asec'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'acsch',
                'category': 'Trigonometry',
                'syntax': [
                    'acsch(x)'
                ],
                'description': 'Calculate the hyperbolic arccosecant of a value, defined as `acsch(x) = ln(1/x + sqrt(1/x^2 + 1))`.',
                'examples': [
                    'acsch(0.5)'
                ],
                'seealso': [
                    'asech',
                    'acoth'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'asec',
                'category': 'Trigonometry',
                'syntax': [
                    'asec(x)'
                ],
                'description': 'Calculate the inverse secant of a value.',
                'examples': [
                    'asec(0.5)',
                    'asec(sec(0.5))',
                    'asec(2)'
                ],
                'seealso': [
                    'acos',
                    'acot',
                    'acsc'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'asech',
                'category': 'Trigonometry',
                'syntax': [
                    'asech(x)'
                ],
                'description': 'Calculate the inverse secant of a value.',
                'examples': [
                    'asech(0.5)'
                ],
                'seealso': [
                    'acsch',
                    'acoth'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'asin',
                'category': 'Trigonometry',
                'syntax': [
                    'asin(x)'
                ],
                'description': 'Compute the inverse sine of a value in radians.',
                'examples': [
                    'asin(0.5)',
                    'asin(sin(0.5))'
                ],
                'seealso': [
                    'sin',
                    'acos',
                    'atan'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'asinh',
                'category': 'Trigonometry',
                'syntax': [
                    'asinh(x)'
                ],
                'description': 'Calculate the hyperbolic arcsine of a value, defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.',
                'examples': [
                    'asinh(0.5)'
                ],
                'seealso': [
                    'acosh',
                    'atanh'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'atan',
                'category': 'Trigonometry',
                'syntax': [
                    'atan(x)'
                ],
                'description': 'Compute the inverse tangent of a value in radians.',
                'examples': [
                    'atan(0.5)',
                    'atan(tan(0.5))'
                ],
                'seealso': [
                    'tan',
                    'acos',
                    'asin'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'atanh',
                'category': 'Trigonometry',
                'syntax': [
                    'atanh(x)'
                ],
                'description': 'Calculate the hyperbolic arctangent of a value, defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.',
                'examples': [
                    'atanh(0.5)'
                ],
                'seealso': [
                    'acosh',
                    'asinh'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'atan2',
                'category': 'Trigonometry',
                'syntax': [
                    'atan2(y, x)'
                ],
                'description': 'Computes the principal value of the arc tangent of y/x in radians.',
                'examples': [
                    'atan2(2, 2) / pi',
                    'angle = 60 deg in rad',
                    'x = cos(angle)',
                    'y = sin(angle)',
                    'atan2(y, x)'
                ],
                'seealso': [
                    'sin',
                    'cos',
                    'tan'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'cos',
                'category': 'Trigonometry',
                'syntax': [
                    'cos(x)'
                ],
                'description': 'Compute the cosine of x in radians.',
                'examples': [
                    'cos(2)',
                    'cos(pi / 4) ^ 2',
                    'cos(180 deg)',
                    'cos(60 deg)',
                    'sin(0.2)^2 + cos(0.2)^2'
                ],
                'seealso': [
                    'acos',
                    'sin',
                    'tan'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'cosh',
                'category': 'Trigonometry',
                'syntax': [
                    'cosh(x)'
                ],
                'description': 'Compute the hyperbolic cosine of x in radians.',
                'examples': [
                    'cosh(0.5)'
                ],
                'seealso': [
                    'sinh',
                    'tanh',
                    'coth'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'cot',
                'category': 'Trigonometry',
                'syntax': [
                    'cot(x)'
                ],
                'description': 'Compute the cotangent of x in radians. Defined as 1/tan(x)',
                'examples': [
                    'cot(2)',
                    '1 / tan(2)'
                ],
                'seealso': [
                    'sec',
                    'csc',
                    'tan'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'coth',
                'category': 'Trigonometry',
                'syntax': [
                    'coth(x)'
                ],
                'description': 'Compute the hyperbolic cotangent of x in radians.',
                'examples': [
                    'coth(2)',
                    '1 / tanh(2)'
                ],
                'seealso': [
                    'sech',
                    'csch',
                    'tanh'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'csc',
                'category': 'Trigonometry',
                'syntax': [
                    'csc(x)'
                ],
                'description': 'Compute the cosecant of x in radians. Defined as 1/sin(x)',
                'examples': [
                    'csc(2)',
                    '1 / sin(2)'
                ],
                'seealso': [
                    'sec',
                    'cot',
                    'sin'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'csch',
                'category': 'Trigonometry',
                'syntax': [
                    'csch(x)'
                ],
                'description': 'Compute the hyperbolic cosecant of x in radians. Defined as 1/sinh(x)',
                'examples': [
                    'csch(2)',
                    '1 / sinh(2)'
                ],
                'seealso': [
                    'sech',
                    'coth',
                    'sinh'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'sec',
                'category': 'Trigonometry',
                'syntax': [
                    'sec(x)'
                ],
                'description': 'Compute the secant of x in radians. Defined as 1/cos(x)',
                'examples': [
                    'sec(2)',
                    '1 / cos(2)'
                ],
                'seealso': [
                    'cot',
                    'csc',
                    'cos'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'sech',
                'category': 'Trigonometry',
                'syntax': [
                    'sech(x)'
                ],
                'description': 'Compute the hyperbolic secant of x in radians. Defined as 1/cosh(x)',
                'examples': [
                    'sech(2)',
                    '1 / cosh(2)'
                ],
                'seealso': [
                    'coth',
                    'csch',
                    'cosh'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'sin',
                'category': 'Trigonometry',
                'syntax': [
                    'sin(x)'
                ],
                'description': 'Compute the sine of x in radians.',
                'examples': [
                    'sin(2)',
                    'sin(pi / 4) ^ 2',
                    'sin(90 deg)',
                    'sin(30 deg)',
                    'sin(0.2)^2 + cos(0.2)^2'
                ],
                'seealso': [
                    'asin',
                    'cos',
                    'tan'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'sinh',
                'category': 'Trigonometry',
                'syntax': [
                    'sinh(x)'
                ],
                'description': 'Compute the hyperbolic sine of x in radians.',
                'examples': [
                    'sinh(0.5)'
                ],
                'seealso': [
                    'cosh',
                    'tanh'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'tan',
                'category': 'Trigonometry',
                'syntax': [
                    'tan(x)'
                ],
                'description': 'Compute the tangent of x in radians.',
                'examples': [
                    'tan(0.5)',
                    'sin(0.5) / cos(0.5)',
                    'tan(pi / 4)',
                    'tan(45 deg)'
                ],
                'seealso': [
                    'atan',
                    'sin',
                    'cos'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'tanh',
                'category': 'Trigonometry',
                'syntax': [
                    'tanh(x)'
                ],
                'description': 'Compute the hyperbolic tangent of x in radians.',
                'examples': [
                    'tanh(0.5)',
                    'sinh(0.5) / cosh(0.5)'
                ],
                'seealso': [
                    'sinh',
                    'cosh'
                ]
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'to',
                'category': 'Units',
                'syntax': [
                    'x to unit',
                    'to(x, unit)'
                ],
                'description': 'Change the unit of a value.',
                'examples': [
                    '5 inch to cm',
                    '3.2kg to g',
                    '16 bytes in bits'
                ],
                'seealso': []
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'clone',
                'category': 'Utils',
                'syntax': [
                    'clone(x)'
                ],
                'description': 'Clone a variable. Creates a copy of primitive variables,and a deep copy of matrices',
                'examples': [
                    'clone(3.5)',
                    'clone(2 - 4i)',
                    'clone(45 deg)',
                    'clone([1, 2; 3, 4])',
                    'clone("hello world")'
                ],
                'seealso': []
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'format',
                'category': 'Utils',
                'syntax': [
                    'format(value)',
                    'format(value, precision)'
                ],
                'description': 'Format a value of any type as string.',
                'examples': [
                    'format(2.3)',
                    'format(3 - 4i)',
                    'format([])',
                    'format(pi, 3)'
                ],
                'seealso': ['print']
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'isNaN',
                'category': 'Utils',
                'syntax': [
                    'isNaN(x)'
                ],
                'description': 'Test whether a value is NaN (not a number)',
                'examples': [
                    'isNaN(2)',
                    'isNaN(0 / 0)',
                    'isNaN(NaN)',
                    'isNaN(Infinity)'
                ],
                'seealso': ['isNegative', 'isNumeric', 'isPositive', 'isZero']
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'isInteger',
                'category': 'Utils',
                'syntax': [
                    'isInteger(x)'
                ],
                'description': 'Test whether a value is an integer number.',
                'examples': [
                    'isInteger(2)',
                    'isInteger(3.5)',
                    'isInteger([3, 0.5, -2])'
                ],
                'seealso': ['isNegative', 'isNumeric', 'isPositive', 'isZero']
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'isNegative',
                'category': 'Utils',
                'syntax': [
                    'isNegative(x)'
                ],
                'description': 'Test whether a value is negative: smaller than zero.',
                'examples': [
                    'isNegative(2)',
                    'isNegative(0)',
                    'isNegative(-4)',
                    'isNegative([3, 0.5, -2])'
                ],
                'seealso': ['isInteger', 'isNumeric', 'isPositive', 'isZero']
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'isNumeric',
                'category': 'Utils',
                'syntax': [
                    'isNumeric(x)'
                ],
                'description': 'Test whether a value is a numeric value. ' +
                    'Returns true when the input is a number, BigNumber, Fraction, or boolean.',
                'examples': [
                    'isNumeric(2)',
                    'isNumeric(0)',
                    'isNumeric(bignumber(500))',
                    'isNumeric(fraction(0.125))',
                    'isNumeric("3")',
                    'isNumeric(2 + 3i)',
                    'isNumeric([2.3, "foo", false])'
                ],
                'seealso': ['isInteger', 'isZero', 'isNegative', 'isPositive', 'isNaN']
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'isPositive',
                'category': 'Utils',
                'syntax': [
                    'isPositive(x)'
                ],
                'description': 'Test whether a value is positive: larger than zero.',
                'examples': [
                    'isPositive(2)',
                    'isPositive(0)',
                    'isPositive(-4)',
                    'isPositive([3, 0.5, -2])'
                ],
                'seealso': ['isInteger', 'isNumeric', 'isNegative', 'isZero']
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'isPrime',
                'category': 'Utils',
                'syntax': [
                    'isPrime(x)'
                ],
                'description': 'Test whether a value is prime: has no divisors other than itself and one.',
                'examples': [
                    'isPrime(3)',
                    'isPrime(-2)',
                    'isPrime([2, 17, 100])'
                ],
                'seealso': ['isInteger', 'isNumeric', 'isNegative', 'isZero']
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'isZero',
                'category': 'Utils',
                'syntax': [
                    'isZero(x)'
                ],
                'description': 'Test whether a value is zero.',
                'examples': [
                    'isZero(2)',
                    'isZero(0)',
                    'isZero(-4)',
                    'isZero([3, 0, -2, 0])'
                ],
                'seealso': ['isInteger', 'isNumeric', 'isNegative', 'isPositive']
            };
        }),
        (function (module, exports) {
            module.exports = {
                'name': 'typeof',
                'category': 'Utils',
                'syntax': [
                    'typeof(x)'
                ],
                'description': 'Get the type of a variable.',
                'examples': [
                    'typeof(3.5)',
                    'typeof(2 - 4i)',
                    'typeof(45 deg)',
                    'typeof("hello world")'
                ],
                'seealso': []
            };
        }),
        (function (module, exports, __webpack_require__) {
            module.exports = [
                __webpack_require__(384),
                __webpack_require__(386),
                __webpack_require__(387),
                __webpack_require__(388),
                __webpack_require__(110)
            ];
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            function factory(type, config, load, typed) {
                var parse = load(__webpack_require__(39));
                return typed('compile', {
                    'string': function (expr) {
                        return parse(expr).compile();
                    },
                    'Array | Matrix': function (expr) {
                        return deepMap(expr, function (entry) {
                            return parse(entry).compile();
                        });
                    }
                });
            }
            exports.name = 'compile';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var errorTransform = __webpack_require__(41).transform;
            var setSafeProperty = __webpack_require__(13).setSafeProperty;
            function factory(type, config, load, typed) {
                var subset = load(__webpack_require__(22));
                var matrix = load(__webpack_require__(0));
                return function assign(object, index, value) {
                    try {
                        if (Array.isArray(object)) {
                            return matrix(object).subset(index, value).valueOf();
                        }
                        else if (object && typeof object.subset === 'function') {
                            return object.subset(index, value);
                        }
                        else if (typeof object === 'string') {
                            return subset(object, index, value);
                        }
                        else if (typeof object === 'object') {
                            if (!index.isObjectProperty()) {
                                throw TypeError('Cannot apply a numeric index as object property');
                            }
                            setSafeProperty(object, index.getObjectProperty(), value);
                            return object;
                        }
                        else {
                            throw new TypeError('Cannot apply index: unsupported type of object');
                        }
                    }
                    catch (err) {
                        throw errorTransform(err);
                    }
                };
            }
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            function factory(type, config, load, typed) {
                var parse = load(__webpack_require__(39));
                return typed('compile', {
                    'string': function (expr) {
                        var scope = {};
                        return parse(expr).compile().eval(scope);
                    },
                    'string, Object': function (expr, scope) {
                        return parse(expr).compile().eval(scope);
                    },
                    'Array | Matrix': function (expr) {
                        var scope = {};
                        return deepMap(expr, function (entry) {
                            return parse(entry).compile().eval(scope);
                        });
                    },
                    'Array | Matrix, Object': function (expr, scope) {
                        return deepMap(expr, function (entry) {
                            return parse(entry).compile().eval(scope);
                        });
                    }
                });
            }
            exports.name = 'eval';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var getSafeProperty = __webpack_require__(13).getSafeProperty;
            function factory(type, config, load, typed, math) {
                var docs = load(__webpack_require__(99));
                return typed('help', {
                    'any': function (search) {
                        var prop;
                        var name = search;
                        if (typeof search !== 'string') {
                            for (prop in math) {
                                if (math.hasOwnProperty(prop) && (search === math[prop])) {
                                    name = prop;
                                    break;
                                }
                            }
                        }
                        var doc = getSafeProperty(docs, name);
                        if (!doc) {
                            throw new Error('No documentation found on "' + name + '"');
                        }
                        return new type.Help(doc);
                    }
                });
            }
            exports.math = true;
            exports.name = 'help';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load, typed) {
                var parse = load(__webpack_require__(39));
                return typed('parse', {
                    'string | Array | Matrix': parse,
                    'string | Array | Matrix, Object': parse
                });
            }
            exports.name = 'parse';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            module.exports = [
                __webpack_require__(102),
                __webpack_require__(80),
                __webpack_require__(104),
                __webpack_require__(105),
                __webpack_require__(106),
                __webpack_require__(53),
                __webpack_require__(78),
                __webpack_require__(107),
                __webpack_require__(54),
                __webpack_require__(14),
                __webpack_require__(109),
                __webpack_require__(62),
                __webpack_require__(63),
                __webpack_require__(79),
                __webpack_require__(40),
                __webpack_require__(390)
            ];
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load, typed) {
                function UpdateNode() {
                    throw new Error('UpdateNode is deprecated. Use AssignmentNode instead.');
                }
                return UpdateNode;
            }
            exports.name = 'UpdateNode';
            exports.path = 'expression.node';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            module.exports = [
                __webpack_require__(392),
                __webpack_require__(393),
                __webpack_require__(394),
                __webpack_require__(395),
                __webpack_require__(396),
                __webpack_require__(397),
                __webpack_require__(398),
                __webpack_require__(399),
                __webpack_require__(400),
                __webpack_require__(401)
            ];
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var errorTransform = __webpack_require__(41).transform;
            function factory(type, config, load, typed) {
                var concat = load(__webpack_require__(64));
                return typed('concat', {
                    '...any': function (args) {
                        var lastIndex = args.length - 1;
                        var last = args[lastIndex];
                        if (type.isNumber(last)) {
                            args[lastIndex] = last - 1;
                        }
                        else if (type.isBigNumber(last)) {
                            args[lastIndex] = last.minus(1);
                        }
                        try {
                            return concat.apply(null, args);
                        }
                        catch (err) {
                            throw errorTransform(err);
                        }
                    }
                });
            }
            exports.name = 'concat';
            exports.path = 'expression.transform';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var filter = __webpack_require__(2).filter;
            var filterRegExp = __webpack_require__(2).filterRegExp;
            var maxArgumentCount = __webpack_require__(32).maxArgumentCount;
            function factory(type, config, load, typed) {
                var compileInlineExpression = load(__webpack_require__(81));
                var matrix = load(__webpack_require__(0));
                function filterTransform(args, math, scope) {
                    var x, callback;
                    if (args[0]) {
                        x = args[0].compile().eval(scope);
                    }
                    if (args[1]) {
                        if (type.isSymbolNode(args[1]) || type.isFunctionAssignmentNode(args[1])) {
                            callback = args[1].compile().eval(scope);
                        }
                        else {
                            callback = compileInlineExpression(args[1], math, scope);
                        }
                    }
                    return filter(x, callback);
                }
                filterTransform.rawArgs = true;
                var filter = typed('filter', {
                    'Array, function': _filter,
                    'Matrix, function': function (x, test) {
                        return matrix(_filter(x.toArray(), test));
                    },
                    'Array, RegExp': filterRegExp,
                    'Matrix, RegExp': function (x, test) {
                        return matrix(filterRegExp(x.toArray(), test));
                    }
                });
                filter.toTex = undefined;
                return filterTransform;
            }
            function _filter(x, callback) {
                var args = maxArgumentCount(callback);
                return filter(x, function (value, index, array) {
                    if (args === 1) {
                        return callback(value);
                    }
                    else if (args === 2) {
                        return callback(value, [index + 1]);
                    }
                    else {
                        return callback(value, [index + 1], array);
                    }
                });
            }
            exports.name = 'filter';
            exports.path = 'expression.transform';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var maxArgumentCount = __webpack_require__(32).maxArgumentCount;
            var forEach = __webpack_require__(2).forEach;
            function factory(type, config, load, typed) {
                var compileInlineExpression = load(__webpack_require__(81));
                function forEachTransform(args, math, scope) {
                    var x, callback;
                    if (args[0]) {
                        x = args[0].compile().eval(scope);
                    }
                    if (args[1]) {
                        if (type.isSymbolNode(args[1]) || type.isFunctionAssignmentNode(args[1])) {
                            callback = args[1].compile().eval(scope);
                        }
                        else {
                            callback = compileInlineExpression(args[1], math, scope);
                        }
                    }
                    return _forEach(x, callback);
                }
                forEachTransform.rawArgs = true;
                var _forEach = typed('forEach', {
                    'Array | Matrix, function': function (array, callback) {
                        var args = maxArgumentCount(callback);
                        var recurse = function (value, index) {
                            if (Array.isArray(value)) {
                                forEach(value, function (child, i) {
                                    recurse(child, index.concat(i + 1));
                                });
                            }
                            else {
                                if (args === 1) {
                                    callback(value);
                                }
                                else if (args === 2) {
                                    callback(value, index);
                                }
                                else {
                                    callback(value, index, array);
                                }
                            }
                        };
                        recurse(array.valueOf(), []);
                    }
                });
                return forEachTransform;
            }
            exports.name = 'forEach';
            exports.path = 'expression.transform';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load) {
                return function indexTransform() {
                    var args = [];
                    for (var i = 0, ii = arguments.length; i < ii; i++) {
                        var arg = arguments[i];
                        if (type.isRange(arg)) {
                            arg.start--;
                            arg.end -= (arg.step > 0 ? 0 : 2);
                        }
                        else if (arg && arg.isSet === true) {
                            arg = arg.map(function (v) { return v - 1; });
                        }
                        else if (type.isArray(arg) || type.isMatrix(arg)) {
                            arg = arg.map(function (v) { return v - 1; });
                        }
                        else if (type.isNumber(arg)) {
                            arg--;
                        }
                        else if (type.isBigNumber(arg)) {
                            arg = arg.toNumber() - 1;
                        }
                        else if (typeof arg === 'string') {
                        }
                        else {
                            throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');
                        }
                        args[i] = arg;
                    }
                    var res = new type.Index();
                    type.Index.apply(res, args);
                    return res;
                };
            }
            exports.name = 'index';
            exports.path = 'expression.transform';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var maxArgumentCount = __webpack_require__(32).maxArgumentCount;
            var map = __webpack_require__(2).map;
            function factory(type, config, load, typed) {
                var compileInlineExpression = load(__webpack_require__(81));
                var matrix = load(__webpack_require__(0));
                function mapTransform(args, math, scope) {
                    var x, callback;
                    if (args[0]) {
                        x = args[0].compile().eval(scope);
                    }
                    if (args[1]) {
                        if (type.isSymbolNode(args[1]) || type.isFunctionAssignmentNode(args[1])) {
                            callback = args[1].compile().eval(scope);
                        }
                        else {
                            callback = compileInlineExpression(args[1], math, scope);
                        }
                    }
                    return map(x, callback);
                }
                mapTransform.rawArgs = true;
                var map = typed('map', {
                    'Array, function': function (x, callback) {
                        return _map(x, callback, x);
                    },
                    'Matrix, function': function (x, callback) {
                        return matrix(_map(x.valueOf(), callback, x));
                    }
                });
                return mapTransform;
            }
            function _map(array, callback, orig) {
                var argsCount = maxArgumentCount(callback);
                function recurse(value, index) {
                    if (Array.isArray(value)) {
                        return map(value, function (child, i) {
                            return recurse(child, index.concat(i + 1));
                        });
                    }
                    else {
                        if (argsCount === 1) {
                            return callback(value);
                        }
                        else if (argsCount === 2) {
                            return callback(value, index);
                        }
                        else {
                            return callback(value, index, orig);
                        }
                    }
                }
                return recurse(array, []);
            }
            exports.name = 'map';
            exports.path = 'expression.transform';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var errorTransform = __webpack_require__(41).transform;
            var isCollection = __webpack_require__(46);
            function factory(type, config, load, typed) {
                var max = load(__webpack_require__(112));
                return typed('max', {
                    '...any': function (args) {
                        if (args.length == 2 && isCollection(args[0])) {
                            var dim = args[1];
                            if (type.isNumber(dim)) {
                                args[1] = dim - 1;
                            }
                            else if (type.isBigNumber(dim)) {
                                args[1] = dim.minus(1);
                            }
                        }
                        try {
                            return max.apply(null, args);
                        }
                        catch (err) {
                            throw errorTransform(err);
                        }
                    }
                });
            }
            exports.name = 'max';
            exports.path = 'expression.transform';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var errorTransform = __webpack_require__(41).transform;
            var isCollection = __webpack_require__(46);
            function factory(type, config, load, typed) {
                var mean = load(__webpack_require__(113));
                return typed('mean', {
                    '...any': function (args) {
                        if (args.length == 2 && isCollection(args[0])) {
                            var dim = args[1];
                            if (type.isNumber(dim)) {
                                args[1] = dim - 1;
                            }
                            else if (type.isBigNumber(dim)) {
                                args[1] = dim.minus(1);
                            }
                        }
                        try {
                            return mean.apply(null, args);
                        }
                        catch (err) {
                            throw errorTransform(err);
                        }
                    }
                });
            }
            exports.name = 'mean';
            exports.path = 'expression.transform';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var errorTransform = __webpack_require__(41).transform;
            var isCollection = __webpack_require__(46);
            function factory(type, config, load, typed) {
                var min = load(__webpack_require__(116));
                return typed('min', {
                    '...any': function (args) {
                        if (args.length == 2 && isCollection(args[0])) {
                            var dim = args[1];
                            if (type.isNumber(dim)) {
                                args[1] = dim - 1;
                            }
                            else if (type.isBigNumber(dim)) {
                                args[1] = dim.minus(1);
                            }
                        }
                        try {
                            return min.apply(null, args);
                        }
                        catch (err) {
                            throw errorTransform(err);
                        }
                    }
                });
            }
            exports.name = 'min';
            exports.path = 'expression.transform';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load, typed) {
                var range = load(__webpack_require__(117));
                return typed('range', {
                    '...any': function (args) {
                        var lastIndex = args.length - 1;
                        var last = args[lastIndex];
                        if (typeof last !== 'boolean') {
                            args.push(true);
                        }
                        return range.apply(null, args);
                    }
                });
            }
            exports.name = 'range';
            exports.path = 'expression.transform';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var errorTransform = __webpack_require__(41).transform;
            function factory(type, config, load, typed) {
                var subset = load(__webpack_require__(22));
                return typed('subset', {
                    '...any': function (args) {
                        try {
                            return subset.apply(null, args);
                        }
                        catch (err) {
                            throw errorTransform(err);
                        }
                    }
                });
            }
            exports.name = 'subset';
            exports.path = 'expression.transform';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var object = __webpack_require__(5);
            var string = __webpack_require__(9);
            function factory(type, config, load, typed) {
                var parser = load(__webpack_require__(110))();
                function Help(doc) {
                    if (!(this instanceof Help)) {
                        throw new SyntaxError('Constructor must be called with the new operator');
                    }
                    if (!doc)
                        throw new Error('Argument "doc" missing');
                    this.doc = doc;
                }
                Help.prototype.type = 'Help';
                Help.prototype.isHelp = true;
                Help.prototype.toString = function () {
                    var doc = this.doc || {};
                    var desc = '\n';
                    if (doc.name) {
                        desc += 'Name: ' + doc.name + '\n\n';
                    }
                    if (doc.category) {
                        desc += 'Category: ' + doc.category + '\n\n';
                    }
                    if (doc.description) {
                        desc += 'Description:\n    ' + doc.description + '\n\n';
                    }
                    if (doc.syntax) {
                        desc += 'Syntax:\n    ' + doc.syntax.join('\n    ') + '\n\n';
                    }
                    if (doc.examples) {
                        desc += 'Examples:\n';
                        for (var i = 0; i < doc.examples.length; i++) {
                            var expr = doc.examples[i];
                            desc += '    ' + expr + '\n';
                            var res;
                            try {
                                res = parser.eval(expr);
                            }
                            catch (e) {
                                res = e;
                            }
                            if (res !== undefined && !type.isHelp(res)) {
                                desc += '        ' + string.format(res, { precision: 14 }) + '\n';
                            }
                        }
                        desc += '\n';
                    }
                    if (doc.seealso && doc.seealso.length) {
                        desc += 'See also: ' + doc.seealso.join(', ') + '\n';
                    }
                    return desc;
                };
                Help.prototype.toJSON = function () {
                    var obj = object.clone(this.doc);
                    obj.mathjs = 'Help';
                    return obj;
                };
                Help.fromJSON = function (json) {
                    var doc = {};
                    for (var prop in json) {
                        if (prop !== 'mathjs') {
                            doc[prop] = json[prop];
                        }
                    }
                    return new Help(doc);
                };
                Help.prototype.valueOf = Help.prototype.toString;
                return Help;
            }
            exports.name = 'Help';
            exports.path = 'type';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            module.exports = [
                __webpack_require__(404),
                __webpack_require__(425),
                __webpack_require__(444),
                __webpack_require__(457),
                __webpack_require__(461),
                __webpack_require__(465),
                __webpack_require__(468),
                __webpack_require__(472),
                __webpack_require__(485),
                __webpack_require__(495),
                __webpack_require__(498),
                __webpack_require__(506),
                __webpack_require__(508),
                __webpack_require__(514),
                __webpack_require__(516),
                __webpack_require__(541),
                __webpack_require__(543)
            ];
        }),
        (function (module, exports, __webpack_require__) {
            module.exports = [
                __webpack_require__(405),
                __webpack_require__(118),
                __webpack_require__(409),
                __webpack_require__(124),
                __webpack_require__(125),
                __webpack_require__(130),
                __webpack_require__(423),
                __webpack_require__(131)
            ];
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load, typed) {
                var parse = load(__webpack_require__(39));
                var simplify = load(__webpack_require__(118));
                var ConstantNode = load(__webpack_require__(53));
                var FunctionNode = load(__webpack_require__(54));
                var OperatorNode = load(__webpack_require__(62));
                var ParenthesisNode = load(__webpack_require__(63));
                var SymbolNode = load(__webpack_require__(40));
                var derivative = typed('derivative', {
                    'Node, SymbolNode, Object': function (expr, variable, options) {
                        var constNodes = {};
                        constTag(constNodes, expr, variable.name);
                        var res = _derivative(expr, constNodes);
                        return options.simplify ? simplify(res) : res;
                    },
                    'Node, SymbolNode': function (expr, variable) {
                        return derivative(expr, variable, { simplify: true });
                    },
                    'string, SymbolNode': function (expr, variable) {
                        return derivative(parse(expr), variable);
                    },
                    'string, SymbolNode, Object': function (expr, variable, options) {
                        return derivative(parse(expr), variable, options);
                    },
                    'string, string': function (expr, variable) {
                        return derivative(parse(expr), parse(variable));
                    },
                    'string, string, Object': function (expr, variable, options) {
                        return derivative(parse(expr), parse(variable), options);
                    },
                    'Node, string': function (expr, variable) {
                        return derivative(expr, parse(variable));
                    },
                    'Node, string, Object': function (expr, variable, options) {
                        return derivative(expr, parse(variable), options);
                    }
                });
                derivative._simplify = true;
                derivative.toTex = function (deriv) {
                    return _derivTex.apply(null, deriv.args);
                };
                var _derivTex = typed('_derivTex', {
                    'Node, SymbolNode': function (expr, x) {
                        return _derivTex(expr.toString(), x.toString(), 1);
                    },
                    'Node, SymbolNode, ConstantNode': function (expr, x, order) {
                        return _derivTex(expr.toString(), x.name, order.value);
                    },
                    'string, string, number': function (expr, x, order) {
                        var d;
                        if (order === 1) {
                            d = "{d\\over d" + x + "}";
                        }
                        else {
                            d = "{d^{" + order + "}\\over d" + x + "^{" + order + "}}";
                        }
                        return d + "\\left[" + expr + "\\right]";
                    }
                });
                var constTag = typed('constTag', {
                    'Object, ConstantNode, string': function (constNodes, node) {
                        return constNodes[node] = true;
                    },
                    'Object, SymbolNode, string': function (constNodes, node, varName) {
                        if (node.name != varName) {
                            return constNodes[node] = true;
                        }
                        return false;
                    },
                    'Object, ParenthesisNode, string': function (constNodes, node, varName) {
                        return constTag(constNodes, node.content, varName);
                    },
                    'Object, FunctionAssignmentNode, string': function (constNodes, node, varName) {
                        if (node.params.indexOf(varName) == -1) {
                            return constNodes[node] = true;
                        }
                        return constTag(constNodes, node.expr, varName);
                    },
                    'Object, FunctionNode | OperatorNode, string': function (constNodes, node, varName) {
                        if (node.args.length != 0) {
                            var isConst = constTag(constNodes, node.args[0], varName);
                            for (var i = 1; i < node.args.length; ++i) {
                                isConst = constTag(constNodes, node.args[i], varName) && isConst;
                            }
                            if (isConst) {
                                return constNodes[node] = true;
                            }
                        }
                        return false;
                    }
                });
                var _derivative = typed('_derivative', {
                    'ConstantNode, Object': function (node) {
                        return new ConstantNode('0', node.valueType);
                    },
                    'SymbolNode, Object': function (node, constNodes) {
                        if (constNodes[node] !== undefined) {
                            return new ConstantNode('0', config.number);
                        }
                        return new ConstantNode('1', config.number);
                    },
                    'ParenthesisNode, Object': function (node, constNodes) {
                        return new ParenthesisNode(_derivative(node.content, constNodes));
                    },
                    'FunctionAssignmentNode, Object': function (node, constNodes) {
                        if (constNodes[node] !== undefined) {
                            return new ConstantNode('0', config.number);
                        }
                        return _derivative(node.expr, constNodes);
                    },
                    'FunctionNode, Object': function (node, constNodes) {
                        if (node.args.length != 1) {
                            funcArgsCheck(node);
                        }
                        if (constNodes[node] !== undefined) {
                            return new ConstantNode('0', config.number);
                        }
                        var arg1 = node.args[0];
                        var arg2;
                        var div = false;
                        var negative = false;
                        var funcDerivative;
                        switch (node.name) {
                            case 'cbrt':
                                div = true;
                                funcDerivative = new OperatorNode('*', 'multiply', [
                                    new ConstantNode('3', config.number),
                                    new OperatorNode('^', 'pow', [
                                        arg1,
                                        new OperatorNode('/', 'divide', [
                                            new ConstantNode('2', config.number),
                                            new ConstantNode('3', config.number)
                                        ])
                                    ])
                                ]);
                                break;
                            case 'sqrt':
                            case 'nthRoot':
                                if (node.args.length == 1) {
                                    div = true;
                                    funcDerivative = new OperatorNode('*', 'multiply', [
                                        new ConstantNode('2', config.number),
                                        new FunctionNode('sqrt', [arg1])
                                    ]);
                                    break;
                                }
                                arg2 = new OperatorNode('/', 'divide', [
                                    new ConstantNode('1', config.number),
                                    node.args[1]
                                ]);
                                constNodes[arg2] = constNodes[node.args[1]];
                                return _derivative(new OperatorNode('^', 'pow', [arg1, arg2]), constNodes);
                            case 'log10':
                                arg2 = new ConstantNode('10', config.number);
                            case 'log':
                                if (!arg2 && node.args.length == 1) {
                                    funcDerivative = arg1.clone();
                                }
                                else if (arg2 || constNodes[node.args[1]] !== undefined) {
                                    funcDerivative = new OperatorNode('*', 'multiply', [
                                        arg1.clone(),
                                        new FunctionNode('log', [arg2 || node.args[1]])
                                    ]);
                                }
                                else {
                                    return _derivative(new OperatorNode('/', 'divide', [
                                        new FunctionNode('log', [arg1]),
                                        new FunctionNode('log', [node.args[1]])
                                    ]), constNodes);
                                }
                                div = true;
                                break;
                            case 'exp':
                                funcDerivative = new FunctionNode('exp', [arg1.clone()]);
                                break;
                            case 'sin':
                                funcDerivative = new FunctionNode('cos', [arg1.clone()]);
                                break;
                            case 'cos':
                                funcDerivative = new OperatorNode('-', 'unaryMinus', [
                                    new FunctionNode('sin', [arg1.clone()])
                                ]);
                                break;
                            case 'tan':
                                funcDerivative = new OperatorNode('^', 'pow', [
                                    new FunctionNode('sec', [arg1.clone()]),
                                    new ConstantNode('2', config.number)
                                ]);
                                break;
                            case 'sec':
                                funcDerivative = new OperatorNode('*', 'multiply', [
                                    node,
                                    new FunctionNode('tan', [arg1.clone()])
                                ]);
                                break;
                            case 'csc':
                                negative = true;
                                funcDerivative = new OperatorNode('*', 'multiply', [
                                    node,
                                    new FunctionNode('cot', [arg1.clone()])
                                ]);
                                break;
                            case 'cot':
                                negative = true;
                                funcDerivative = new OperatorNode('^', 'pow', [
                                    new FunctionNode('csc', [arg1.clone()]),
                                    new ConstantNode('2', config.number)
                                ]);
                                break;
                            case 'asin':
                                div = true;
                                funcDerivative = new FunctionNode('sqrt', [
                                    new OperatorNode('-', 'subtract', [
                                        new ConstantNode('1', config.number),
                                        new OperatorNode('^', 'pow', [
                                            arg1.clone(),
                                            new ConstantNode('2', config.number)
                                        ])
                                    ])
                                ]);
                                break;
                            case 'acos':
                                div = true;
                                negative = true;
                                funcDerivative = new FunctionNode('sqrt', [
                                    new OperatorNode('-', 'subtract', [
                                        new ConstantNode('1', config.number),
                                        new OperatorNode('^', 'pow', [
                                            arg1.clone(),
                                            new ConstantNode('2', config.number)
                                        ])
                                    ])
                                ]);
                                break;
                            case 'atan':
                                div = true;
                                funcDerivative = new OperatorNode('+', 'add', [
                                    new OperatorNode('^', 'pow', [
                                        arg1.clone(),
                                        new ConstantNode('2', config.number)
                                    ]),
                                    new ConstantNode('1', config.number)
                                ]);
                                break;
                            case 'asec':
                                div = true;
                                funcDerivative = new OperatorNode('*', 'multiply', [
                                    new FunctionNode('abs', [arg1.clone()]),
                                    new FunctionNode('sqrt', [
                                        new OperatorNode('-', 'subtract', [
                                            new OperatorNode('^', 'pow', [
                                                arg1.clone(),
                                                new ConstantNode('2', config.number)
                                            ]),
                                            new ConstantNode('1', config.number)
                                        ])
                                    ])
                                ]);
                                break;
                            case 'acsc':
                                div = true;
                                negative = true;
                                funcDerivative = new OperatorNode('*', 'multiply', [
                                    new FunctionNode('abs', [arg1.clone()]),
                                    new FunctionNode('sqrt', [
                                        new OperatorNode('-', 'subtract', [
                                            new OperatorNode('^', 'pow', [
                                                arg1.clone(),
                                                new ConstantNode('2', config.number)
                                            ]),
                                            new ConstantNode('1', config.number)
                                        ])
                                    ])
                                ]);
                                break;
                            case 'acot':
                                div = true;
                                negative = true;
                                funcDerivative = new OperatorNode('+', 'add', [
                                    new OperatorNode('^', 'pow', [
                                        arg1.clone(),
                                        new ConstantNode('2', config.number)
                                    ]),
                                    new ConstantNode('1', config.number)
                                ]);
                                break;
                            case 'sinh':
                                funcDerivative = new FunctionNode('cosh', [arg1.clone()]);
                                break;
                            case 'cosh':
                                funcDerivative = new FunctionNode('sinh', [arg1.clone()]);
                                break;
                            case 'tanh':
                                funcDerivative = new OperatorNode('^', 'pow', [
                                    new FunctionNode('sech', [arg1.clone()]),
                                    new ConstantNode('2', config.number)
                                ]);
                                break;
                            case 'sech':
                                negative = true;
                                funcDerivative = new OperatorNode('*', 'multiply', [
                                    node,
                                    new FunctionNode('tanh', [arg1.clone()])
                                ]);
                                break;
                            case 'csch':
                                negative = true;
                                funcDerivative = new OperatorNode('*', 'multiply', [
                                    node,
                                    new FunctionNode('coth', [arg1.clone()])
                                ]);
                                break;
                            case 'coth':
                                negative = true;
                                funcDerivative = new OperatorNode('^', 'pow', [
                                    new FunctionNode('csch', [arg1.clone()]),
                                    new ConstantNode('2', config.number)
                                ]);
                                break;
                            case 'asinh':
                                div = true;
                                funcDerivative = new FunctionNode('sqrt', [
                                    new OperatorNode('+', 'add', [
                                        new OperatorNode('^', 'pow', [
                                            arg1.clone(),
                                            new ConstantNode('2', config.number)
                                        ]),
                                        new ConstantNode('1', config.number)
                                    ])
                                ]);
                                break;
                            case 'acosh':
                                div = true;
                                funcDerivative = new FunctionNode('sqrt', [
                                    new OperatorNode('-', 'subtract', [
                                        new OperatorNode('^', 'pow', [
                                            arg1.clone(),
                                            new ConstantNode('2', config.number)
                                        ]),
                                        new ConstantNode('1', config.number),
                                    ])
                                ]);
                                break;
                            case 'atanh':
                                div = true;
                                funcDerivative = new OperatorNode('-', 'subtract', [
                                    new ConstantNode('1', config.number),
                                    new OperatorNode('^', 'pow', [
                                        arg1.clone(),
                                        new ConstantNode('2', config.number)
                                    ])
                                ]);
                                break;
                            case 'asech':
                                div = true;
                                negative = true;
                                funcDerivative = new OperatorNode('*', 'multiply', [
                                    arg1.clone(),
                                    new FunctionNode('sqrt', [
                                        new OperatorNode('-', 'subtract', [
                                            new ConstantNode('1', config.number),
                                            new OperatorNode('^', 'pow', [
                                                arg1.clone(),
                                                new ConstantNode('2', config.number)
                                            ])
                                        ])
                                    ])
                                ]);
                                break;
                            case 'acsch':
                                div = true;
                                negative = true;
                                funcDerivative = new OperatorNode('*', 'multiply', [
                                    new FunctionNode('abs', [arg1.clone()]),
                                    new FunctionNode('sqrt', [
                                        new OperatorNode('+', 'add', [
                                            new OperatorNode('^', 'pow', [
                                                arg1.clone(),
                                                new ConstantNode('2', config.number)
                                            ]),
                                            new ConstantNode('1', config.number)
                                        ])
                                    ])
                                ]);
                                break;
                            case 'acoth':
                                div = true;
                                negative = true;
                                funcDerivative = new OperatorNode('-', 'subtract', [
                                    new ConstantNode('1', config.number),
                                    new OperatorNode('^', 'pow', [
                                        arg1.clone(),
                                        new ConstantNode('2', config.number)
                                    ])
                                ]);
                                break;
                            case 'abs':
                                funcDerivative = new OperatorNode('/', 'divide', [
                                    new FunctionNode(new SymbolNode('abs'), [arg1.clone()]),
                                    arg1.clone()
                                ]);
                                break;
                            case 'gamma':
                            default: throw new Error('Function "' + node.name + '" not supported by derivative');
                        }
                        var op, func;
                        if (div) {
                            op = '/';
                            func = 'divide';
                        }
                        else {
                            op = '*';
                            func = 'multiply';
                        }
                        var chainDerivative = _derivative(arg1, constNodes);
                        if (negative) {
                            chainDerivative = new OperatorNode('-', 'unaryMinus', [chainDerivative]);
                        }
                        return new OperatorNode(op, func, [chainDerivative, funcDerivative]);
                    },
                    'OperatorNode, Object': function (node, constNodes) {
                        if (constNodes[node] !== undefined) {
                            return new ConstantNode('0', config.number);
                        }
                        var arg1 = node.args[0];
                        var arg2 = node.args[1];
                        switch (node.op) {
                            case '+':
                            case '-':
                                if (node.args.length == 1) {
                                    return new OperatorNode(node.op, node.fn, [_derivative(arg1, constNodes)]);
                                }
                                return new OperatorNode(node.op, node.fn, [
                                    _derivative(arg1, constNodes),
                                    _derivative(arg2, constNodes)
                                ]);
                            case '*':
                                if (constNodes[arg1] !== undefined || constNodes[arg2] !== undefined) {
                                    var newArgs = (constNodes[arg1] !== undefined)
                                        ? [arg1.clone(), _derivative(arg2, constNodes)]
                                        : [arg2.clone(), _derivative(arg1, constNodes)];
                                    return new OperatorNode('*', 'multiply', newArgs);
                                }
                                return new OperatorNode('+', 'add', [
                                    new OperatorNode('*', 'multiply', [_derivative(arg1, constNodes), arg2.clone()]),
                                    new OperatorNode('*', 'multiply', [arg1.clone(), _derivative(arg2, constNodes)])
                                ]);
                            case '/':
                                if (constNodes[arg2] !== undefined) {
                                    return new OperatorNode('/', 'divide', [_derivative(arg1, constNodes), arg2]);
                                }
                                if (constNodes[arg1] !== undefined) {
                                    return new OperatorNode('*', 'multiply', [
                                        new OperatorNode('-', 'unaryMinus', [arg1]),
                                        new OperatorNode('/', 'divide', [
                                            _derivative(arg2, constNodes),
                                            new OperatorNode('^', 'pow', [arg2.clone(), new ConstantNode('2', config.number)])
                                        ])
                                    ]);
                                }
                                return new OperatorNode('/', 'divide', [
                                    new OperatorNode('-', 'subtract', [
                                        new OperatorNode('*', 'multiply', [_derivative(arg1, constNodes), arg2.clone()]),
                                        new OperatorNode('*', 'multiply', [arg1.clone(), _derivative(arg2, constNodes)])
                                    ]),
                                    new OperatorNode('^', 'pow', [arg2.clone(), new ConstantNode('2', config.number)])
                                ]);
                            case '^':
                                if (constNodes[arg1] !== undefined) {
                                    if (type.isConstantNode(arg1) && (arg1.value === '0' || arg1.value === '1')) {
                                        return new ConstantNode('0', config.number);
                                    }
                                    return new OperatorNode('*', 'multiply', [
                                        node,
                                        new OperatorNode('*', 'multiply', [
                                            new FunctionNode('log', [arg1.clone()]),
                                            _derivative(arg2.clone(), constNodes)
                                        ])
                                    ]);
                                }
                                if (constNodes[arg2] !== undefined) {
                                    if (type.isConstantNode(arg2)) {
                                        var expValue = arg2.value;
                                        if (expValue === '0') {
                                            return new ConstantNode('0', config.number);
                                        }
                                        if (expValue === '1') {
                                            return _derivative(arg1, constNodes);
                                        }
                                    }
                                    var powMinusOne = new OperatorNode('^', 'pow', [
                                        arg1.clone(),
                                        new OperatorNode('-', 'subtract', [
                                            arg2,
                                            new ConstantNode('1', config.number)
                                        ])
                                    ]);
                                    return new OperatorNode('*', 'multiply', [
                                        arg2.clone(),
                                        new OperatorNode('*', 'multiply', [
                                            _derivative(arg1, constNodes),
                                            powMinusOne
                                        ]),
                                    ]);
                                }
                                return new OperatorNode('*', 'multiply', [
                                    new OperatorNode('^', 'pow', [arg1.clone(), arg2.clone()]),
                                    new OperatorNode('+', 'add', [
                                        new OperatorNode('*', 'multiply', [
                                            _derivative(arg1, constNodes),
                                            new OperatorNode('/', 'divide', [arg2.clone(), arg1.clone()])
                                        ]),
                                        new OperatorNode('*', 'multiply', [
                                            _derivative(arg2, constNodes),
                                            new FunctionNode('log', [arg1.clone()])
                                        ])
                                    ])
                                ]);
                            case '%':
                            case 'mod':
                            default: throw new Error('Operator "' + node.op + '" not supported by derivative');
                        }
                    }
                });
                function funcArgsCheck(node) {
                    if ((node.name == 'log' || node.name == 'nthRoot') && node.args.length == 2) {
                        return;
                    }
                    for (var i = 0; i < node.args.length; ++i) {
                        node.args[i] = new ConstantNode(0);
                    }
                    node.compile().eval();
                    throw new Error('Expected TypeError, but none found');
                }
                return derivative;
            }
            exports.name = 'derivative';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var digits = __webpack_require__(3).digits;
            function factory(type, config, load, typed, math) {
                var util = load(__webpack_require__(119));
                var isCommutative = util.isCommutative;
                var isAssociative = util.isAssociative;
                var allChildren = util.allChildren;
                var createMakeNodeFunction = util.createMakeNodeFunction;
                var ConstantNode = math.expression.node.ConstantNode;
                var OperatorNode = math.expression.node.OperatorNode;
                function simplifyConstant(expr) {
                    var res = foldFraction(expr);
                    return type.isNode(res) ? res : _toNode(res);
                }
                function _eval(fnname, args) {
                    try {
                        return _toNumber(math[fnname].apply(null, args));
                    }
                    catch (ignore) {
                        args = args.map(function (x) {
                            if (type.isFraction(x)) {
                                return x.valueOf();
                            }
                            return x;
                        });
                        return _toNumber(math[fnname].apply(null, args));
                    }
                }
                var _toNode = typed({
                    'Fraction': _fractionToNode,
                    'number': function (n) {
                        if (n < 0) {
                            return unaryMinusNode(new ConstantNode(-n));
                        }
                        return new ConstantNode(n);
                    },
                    'BigNumber': function (n) {
                        if (n < 0) {
                            return unaryMinusNode(new ConstantNode(n.negated().toString(), 'number'));
                        }
                        return new ConstantNode(n.toString(), 'number');
                    },
                    'Complex': function (s) {
                        throw 'Cannot convert Complex number to Node';
                    }
                });
                function _exactFraction(n) {
                    if (isFinite(n)) {
                        var f = math.fraction(n);
                        if (f.valueOf() === n) {
                            return f;
                        }
                    }
                    return n;
                }
                var _toNumber = typed({
                    'string': function (s) {
                        if (config.number === 'BigNumber') {
                            return math.bignumber(s);
                        }
                        else if (config.number === 'Fraction') {
                            return math.fraction(s);
                        }
                        else {
                            return _exactFraction(parseFloat(s));
                        }
                    },
                    'Fraction': function (s) { return s; },
                    'BigNumber': function (s) { return s; },
                    'number': function (s) {
                        return _exactFraction(s);
                    },
                    'Complex': function (s) {
                        if (s.im !== 0) {
                            return s;
                        }
                        return _exactFraction(s.re);
                    },
                });
                function unaryMinusNode(n) {
                    return new OperatorNode('-', 'unaryMinus', [n]);
                }
                function _fractionToNode(f) {
                    var n;
                    var vn = f.s * f.n;
                    if (vn < 0) {
                        n = new OperatorNode('-', 'unaryMinus', [new ConstantNode(-vn)]);
                    }
                    else {
                        n = new ConstantNode(vn);
                    }
                    if (f.d === 1) {
                        return n;
                    }
                    return new OperatorNode('/', 'divide', [n, new ConstantNode(f.d)]);
                }
                function foldOp(fn, args, makeNode) {
                    return args.reduce(function (a, b) {
                        if (!type.isNode(a) && !type.isNode(b)) {
                            try {
                                return _eval(fn, [a, b]);
                            }
                            catch (ignoreandcontinue) { }
                            a = _toNode(a);
                            b = _toNode(b);
                        }
                        else if (!type.isNode(a)) {
                            a = _toNode(a);
                        }
                        else if (!type.isNode(b)) {
                            b = _toNode(b);
                        }
                        return makeNode([a, b]);
                    });
                }
                function foldFraction(node) {
                    switch (node.type) {
                        case 'SymbolNode':
                            return node;
                        case 'ConstantNode':
                            if (node.valueType === 'number') {
                                return _toNumber(node.value);
                            }
                            return node;
                        case 'FunctionNode':
                            if (math[node.name] && math[node.name].rawArgs) {
                                return node;
                            }
                        case 'OperatorNode':
                            var fn = node.fn.toString();
                            var args;
                            var res;
                            var makeNode = createMakeNodeFunction(node);
                            if (node.args.length === 1) {
                                args = [foldFraction(node.args[0])];
                                if (!type.isNode(args[0])) {
                                    res = _eval(fn, args);
                                }
                                else {
                                    res = makeNode(args);
                                }
                            }
                            else if (isAssociative(node)) {
                                args = allChildren(node);
                                args = args.map(foldFraction);
                                if (isCommutative(fn)) {
                                    var consts = [], vars = [];
                                    for (var i = 0; i < args.length; i++) {
                                        if (!type.isNode(args[i])) {
                                            consts.push(args[i]);
                                        }
                                        else {
                                            vars.push(args[i]);
                                        }
                                    }
                                    if (consts.length > 1) {
                                        res = foldOp(fn, consts, makeNode);
                                        vars.unshift(res);
                                        res = foldOp(fn, vars, makeNode);
                                    }
                                    else {
                                        res = foldOp(fn, args, makeNode);
                                    }
                                }
                                else {
                                    res = foldOp(fn, args, makeNode);
                                }
                            }
                            else {
                                args = node.args.map(foldFraction);
                                res = foldOp(fn, args, makeNode);
                            }
                            return res;
                        case 'ParenthesisNode':
                            return foldFraction(node.content);
                        case 'AccessorNode':
                        case 'ArrayNode':
                        case 'AssignmentNode':
                        case 'BlockNode':
                        case 'FunctionAssignmentNode':
                        case 'IndexNode':
                        case 'ObjectNode':
                        case 'RangeNode':
                        case 'UpdateNode':
                        case 'ConditionalNode':
                        default:
                            throw 'Unimplemented node type in simplifyConstant: ' + node.type;
                    }
                }
                return simplifyConstant;
            }
            exports.math = true;
            exports.name = 'simplifyConstant';
            exports.path = 'algebra.simplify';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load, typed, math) {
                var ConstantNode = math.expression.node.ConstantNode;
                var OperatorNode = math.expression.node.OperatorNode;
                var FunctionNode = math.expression.node.FunctionNode;
                var node0 = new ConstantNode(0);
                var node1 = new ConstantNode(1);
                function simplifyCore(node) {
                    if (type.isOperatorNode(node) && node.args.length <= 2) {
                        var a0 = simplifyCore(node.args[0]);
                        var a1 = node.args[1] && simplifyCore(node.args[1]);
                        if (node.op === "+") {
                            if (node.args.length === 1) {
                                return node.args[0];
                            }
                            if (type.isConstantNode(a0)) {
                                if (a0.value === "0") {
                                    return a1;
                                }
                                else if (type.isConstantNode(a1) && a0.value && a0.value.length < 5 && a1.value && a1.value.length < 5) {
                                    return new ConstantNode(Number(a0.value) + Number(a1.value));
                                }
                            }
                            if (type.isConstantNode(a1) && a1.value === "0") {
                                return a0;
                            }
                            if (node.args.length === 2 && type.isOperatorNode(a1) && a1.op === '-' && a1.fn === 'unaryMinus') {
                                return new OperatorNode('-', 'subtract', [a0, a1.args[0]]);
                            }
                            return new OperatorNode(node.op, node.fn, a1 ? [a0, a1] : [a0]);
                        }
                        else if (node.op === "-") {
                            if (type.isConstantNode(a0) && a1) {
                                if (type.isConstantNode(a1) && a0.value && a0.value.length < 5 && a1.value && a1.value.length < 5) {
                                    return new ConstantNode(Number(a0.value) - Number(a1.value));
                                }
                                else if (a0.value === "0") {
                                    return new OperatorNode("-", "unaryMinus", [a1]);
                                }
                            }
                            if (node.fn === "subtract" && node.args.length === 2) {
                                if (type.isConstantNode(a1) && a1.value === "0") {
                                    return a0;
                                }
                                if (type.isOperatorNode(a1) && a1.fn === "unaryMinus") {
                                    return simplifyCore(new OperatorNode("+", "add", [a0, a1.args[0]]));
                                }
                                return new OperatorNode(node.op, node.fn, [a0, a1]);
                            }
                            else if (node.fn === "unaryMinus") {
                                if (type.isOperatorNode(a0)) {
                                    if (a0.fn === 'unaryMinus') {
                                        return a0.args[0];
                                    }
                                }
                                return new OperatorNode(node.op, node.fn, [a0]);
                            }
                            throw new Error('never happens');
                        }
                        else if (node.op === "*") {
                            if (type.isConstantNode(a0)) {
                                if (a0.value === "0") {
                                    return node0;
                                }
                                else if (a0.value === "1") {
                                    return a1;
                                }
                                else if (type.isConstantNode(a1) && a0.value && a0.value.length < 5 && a1.value && a1.value.length < 5) {
                                    return new ConstantNode(Number(a0.value) * Number(a1.value));
                                }
                            }
                            if (type.isConstantNode(a1)) {
                                if (a1.value === "0") {
                                    return node0;
                                }
                                else if (a1.value === "1") {
                                    return a0;
                                }
                                else if (type.isOperatorNode(a0) && a0.op === node.op) {
                                    var a00 = a0.args[0];
                                    if (type.isConstantNode(a00) && a1.value && a1.value.length < 5 && a00.value && a00.value.length < 5) {
                                        var a00_a1 = new ConstantNode(Number(a0.args[0].value) * Number(a1.value));
                                        return new OperatorNode(node.op, node.fn, [a00_a1, a0.args[1]]);
                                    }
                                }
                                return new OperatorNode(node.op, node.fn, [a1, a0]);
                            }
                            return new OperatorNode(node.op, node.fn, [a0, a1]);
                        }
                        else if (node.op === "/") {
                            if (type.isConstantNode(a0)) {
                                if (a0.value === "0") {
                                    return node0;
                                }
                                else if (type.isConstantNode(a1) && a0.value && a0.value.length < 5 && (a1.value === "1" || a1.value === "2" || a1.value === "4")) {
                                    return new ConstantNode(Number(a0.value) / Number(a1.value));
                                }
                            }
                            return new OperatorNode(node.op, node.fn, [a0, a1]);
                        }
                        else if (node.op === "^") {
                            if (type.isConstantNode(a1)) {
                                if (a1.value === "0") {
                                    return node1;
                                }
                                else if (a1.value === "1") {
                                    return a0;
                                }
                                else if (type.isConstantNode(a1) && a0.value && a0.value.length < 5 && a1.value && a1.value.length < 2) {
                                    return new ConstantNode(math.pow(Number(a0.value), Number(a1.value)));
                                }
                            }
                            return new OperatorNode(node.op, node.fn, [a0, a1]);
                        }
                    }
                    else if (type.isParenthesisNode(node)) {
                        var c = simplifyCore(node.content);
                        if (type.isParenthesisNode(c) || type.isSymbolNode(c) || type.isConstantNode(c)) {
                            return c;
                        }
                        return new ParenthesisNode(c);
                    }
                    else if (type.isFunctionNode(node)) {
                        var args = node.args.map(simplifyCore);
                        if (args.length === 1) {
                            if (type.isParenthesisNode(args[0])) {
                                args[0] = args[0].content;
                            }
                        }
                        return new FunctionNode(simplifyCore(node.fn), args);
                    }
                    else {
                    }
                    return node;
                }
                return simplifyCore;
            }
            exports.math = true;
            exports.name = 'simplifyCore';
            exports.path = 'algebra.simplify';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load, typed, math) {
                var Node = math.expression.node.Node;
                var OperatorNode = math.expression.node.OperatorNode;
                var FunctionNode = math.expression.node.FunctionNode;
                var ParenthesisNode = math.expression.node.ParenthesisNode;
                function resolve(node, scope) {
                    if (!scope) {
                        return node;
                    }
                    if (type.isSymbolNode(node)) {
                        var value = scope[node.name];
                        if (value instanceof Node) {
                            return resolve(value, scope);
                        }
                        else if (typeof value === 'number') {
                            return math.parse(String(value));
                        }
                    }
                    else if (type.isOperatorNode(node)) {
                        var args = node.args.map(function (arg) {
                            return resolve(arg, scope);
                        });
                        return new OperatorNode(node.op, node.fn, args);
                    }
                    else if (type.isParenthesisNode(node)) {
                        return new ParenthesisNode(resolve(node.content, scope));
                    }
                    else if (type.isFunctionNode(node)) {
                        var args = node.args.map(function (arg) {
                            return resolve(arg, scope);
                        });
                        return new FunctionNode(node.name, args);
                    }
                    return node;
                }
                return resolve;
            }
            exports.math = true;
            exports.name = 'resolve';
            exports.path = 'algebra.simplify';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load, typed) {
                var matrix = load(__webpack_require__(0));
                var zeros = load(__webpack_require__(38));
                var eye = load(__webpack_require__(61));
                var clone = load(__webpack_require__(120));
                var isZero = load(__webpack_require__(82));
                var isPositive = load(__webpack_require__(55));
                var unequal = load(__webpack_require__(121));
                var abs = load(__webpack_require__(29));
                var sign = load(__webpack_require__(122));
                var sqrt = load(__webpack_require__(56));
                var conj = load(__webpack_require__(123));
                var unaryMinus = load(__webpack_require__(37));
                var addScalar = load(__webpack_require__(20));
                var divideScalar = load(__webpack_require__(19));
                var multiplyScalar = load(__webpack_require__(23));
                var subtract = load(__webpack_require__(21));
                var qr = typed('qr', {
                    'DenseMatrix': function (m) {
                        return _denseQR(m);
                    },
                    'SparseMatrix': function (m) {
                        return _sparseQR(m);
                    },
                    'Array': function (a) {
                        var m = matrix(a);
                        var r = _denseQR(m);
                        return {
                            Q: r.Q.valueOf(),
                            R: r.R.valueOf()
                        };
                    }
                });
                var _denseQR = function (m) {
                    var rows = m._size[0];
                    var cols = m._size[1];
                    var Q = eye([rows], 'dense');
                    var Qdata = Q._data;
                    var R = m.clone();
                    var Rdata = R._data;
                    var i, j, k;
                    var w = zeros([rows], '');
                    for (k = 0; k < Math.min(cols, rows); ++k) {
                        var pivot = Rdata[k][k];
                        var sgn = unaryMinus(sign(pivot));
                        var conjSgn = conj(sgn);
                        var alphaSquared = 0;
                        for (i = k; i < rows; i++) {
                            alphaSquared = addScalar(alphaSquared, multiplyScalar(Rdata[i][k], conj(Rdata[i][k])));
                        }
                        var alpha = multiplyScalar(sgn, sqrt(alphaSquared));
                        if (!isZero(alpha)) {
                            var u1 = subtract(pivot, alpha);
                            w[k] = 1;
                            for (i = k + 1; i < rows; i++) {
                                w[i] = divideScalar(Rdata[i][k], u1);
                            }
                            var tau = unaryMinus(conj(divideScalar(u1, alpha)));
                            var s;
                            for (j = k; j < cols; j++) {
                                s = 0.0;
                                for (i = k; i < rows; i++) {
                                    s = addScalar(s, multiplyScalar(conj(w[i]), Rdata[i][j]));
                                }
                                s = multiplyScalar(s, tau);
                                for (i = k; i < rows; i++) {
                                    Rdata[i][j] = multiplyScalar(subtract(Rdata[i][j], multiplyScalar(w[i], s)), conjSgn);
                                }
                            }
                            for (i = 0; i < rows; i++) {
                                s = 0.0;
                                for (j = k; j < rows; j++) {
                                    s = addScalar(s, multiplyScalar(Qdata[i][j], w[j]));
                                }
                                s = multiplyScalar(s, tau);
                                for (j = k; j < rows; ++j) {
                                    Qdata[i][j] = divideScalar(subtract(Qdata[i][j], multiplyScalar(s, conj(w[j]))), conjSgn);
                                }
                            }
                        }
                    }
                    for (i = 0; i < rows; ++i) {
                        for (j = 0; j < i && j < cols; ++j) {
                            if (unequal(0, divideScalar(Rdata[i][j], 1e5))) {
                                throw new Error('math.qr(): unknown error - ' +
                                    'R is not lower triangular (element (' +
                                    i + ', ' + j + ')  = ' + Rdata[i][j] + ')');
                            }
                            Rdata[i][j] = multiplyScalar(Rdata[i][j], 0);
                        }
                    }
                    return {
                        Q: Q,
                        R: R,
                        toString: function () {
                            return 'Q: ' + this.Q.toString() + '\nR: ' + this.R.toString();
                        }
                    };
                };
                var _sparseQR = function (m) {
                    throw new Error('qr not implemented for sparse matrices yet');
                };
                return qr;
            }
            exports.name = 'qr';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load) {
                var cs_amd = load(__webpack_require__(411));
                var cs_permute = load(__webpack_require__(413));
                var cs_etree = load(__webpack_require__(414));
                var cs_post = load(__webpack_require__(415));
                var cs_counts = load(__webpack_require__(416));
                var cs_sqr = function (order, a, qr) {
                    var aptr = a._ptr;
                    var asize = a._size;
                    var n = asize[1];
                    var k;
                    var s = {};
                    s.q = cs_amd(order, a);
                    if (order && !s.q)
                        return null;
                    if (qr) {
                        var c = order ? cs_permute(a, null, s.q, 0) : a;
                        s.parent = cs_etree(c, 1);
                        var post = cs_post(s.parent, n);
                        s.cp = cs_counts(c, s.parent, post, 1);
                        if (c && s.parent && s.cp && _vcount(c, s)) {
                            for (s.unz = 0, k = 0; k < n; k++)
                                s.unz += s.cp[k];
                        }
                    }
                    else {
                        s.unz = 4 * (aptr[n]) + n;
                        s.lnz = s.unz;
                    }
                    return s;
                };
                var _vcount = function (a, s) {
                    var aptr = a._ptr;
                    var aindex = a._index;
                    var asize = a._size;
                    var m = asize[0];
                    var n = asize[1];
                    s.pinv = [];
                    s.leftmost = [];
                    var parent = s.parent;
                    var pinv = s.pinv;
                    var leftmost = s.leftmost;
                    var w = [];
                    var next = 0;
                    var head = m;
                    var tail = m + n;
                    var nque = m + 2 * n;
                    var i, k, p, p0, p1;
                    for (k = 0; k < n; k++) {
                        w[head + k] = -1;
                        w[tail + k] = -1;
                        w[nque + k] = 0;
                    }
                    for (i = 0; i < m; i++)
                        leftmost[i] = -1;
                    for (k = n - 1; k >= 0; k--) {
                        for (p0 = aptr[k], p1 = aptr[k + 1], p = p0; p < p1; p++) {
                            leftmost[aindex[p]] = k;
                        }
                    }
                    for (i = m - 1; i >= 0; i--) {
                        pinv[i] = -1;
                        k = leftmost[i];
                        if (k == -1)
                            continue;
                        if (w[nque + k]++ === 0)
                            w[tail + k] = i;
                        w[next + i] = w[head + k];
                        w[head + k] = i;
                    }
                    s.lnz = 0;
                    s.m2 = m;
                    for (k = 0; k < n; k++) {
                        i = w[head + k];
                        s.lnz++;
                        if (i < 0)
                            i = s.m2++;
                        pinv[i] = k;
                        if (--nque[k] <= 0)
                            continue;
                        s.lnz += w[nque + k];
                        var pa = parent[k];
                        if (pa != -1) {
                            if (w[nque + pa] === 0)
                                w[tail + pa] = w[tail + k];
                            w[next + w[tail + k]] = w[head + pa];
                            w[head + pa] = w[next + i];
                            w[nque + pa] += w[nque + k];
                        }
                    }
                    for (i = 0; i < m; i++) {
                        if (pinv[i] < 0)
                            pinv[i] = k++;
                    }
                    return true;
                };
                return cs_sqr;
            }
            exports.name = 'cs_sqr';
            exports.path = 'sparse';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load) {
                var cs_flip = load(__webpack_require__(83));
                var cs_fkeep = load(__webpack_require__(412));
                var cs_tdfs = load(__webpack_require__(126));
                var add = load(__webpack_require__(18));
                var multiply = load(__webpack_require__(12));
                var transpose = load(__webpack_require__(67));
                var cs_amd = function (order, a) {
                    if (!a || order <= 0 || order > 3)
                        return null;
                    var asize = a._size;
                    var m = asize[0];
                    var n = asize[1];
                    var lemax = 0;
                    var dense = Math.max(16, 10 * Math.sqrt(n));
                    dense = Math.min(n - 2, dense);
                    var cm = _createTargetMatrix(order, a, m, n, dense);
                    cs_fkeep(cm, _diag, null);
                    var cindex = cm._index;
                    var cptr = cm._ptr;
                    var cnz = cptr[n];
                    var P = [];
                    var W = [];
                    var len = 0;
                    var nv = n + 1;
                    var next = 2 * (n + 1);
                    var head = 3 * (n + 1);
                    var elen = 4 * (n + 1);
                    var degree = 5 * (n + 1);
                    var w = 6 * (n + 1);
                    var hhead = 7 * (n + 1);
                    var last = P;
                    var mark = _initializeQuotientGraph(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree);
                    var nel = _initializeDegreeLists(n, cptr, W, degree, elen, w, dense, nv, head, last, next);
                    var mindeg = 0;
                    var i, j, k, k1, k2, e, pj, ln, nvi, pk, eln, p1, p2, pn, h, d;
                    while (nel < n) {
                        for (k = -1; mindeg < n && (k = W[head + mindeg]) == -1; mindeg++)
                            ;
                        if (W[next + k] != -1)
                            last[W[next + k]] = -1;
                        W[head + mindeg] = W[next + k];
                        var elenk = W[elen + k];
                        var nvk = W[nv + k];
                        nel += nvk;
                        var dk = 0;
                        W[nv + k] = -nvk;
                        var p = cptr[k];
                        var pk1 = (elenk === 0) ? p : cnz;
                        var pk2 = pk1;
                        for (k1 = 1; k1 <= elenk + 1; k1++) {
                            if (k1 > elenk) {
                                e = k;
                                pj = p;
                                ln = W[len + k] - elenk;
                            }
                            else {
                                e = cindex[p++];
                                pj = cptr[e];
                                ln = W[len + e];
                            }
                            for (k2 = 1; k2 <= ln; k2++) {
                                i = cindex[pj++];
                                if ((nvi = W[nv + i]) <= 0)
                                    continue;
                                dk += nvi;
                                W[nv + i] = -nvi;
                                cindex[pk2++] = i;
                                if (W[next + i] != -1)
                                    last[W[next + i]] = last[i];
                                if (last[i] != -1)
                                    W[next + last[i]] = W[next + i];
                                else
                                    W[head + W[degree + i]] = W[next + i];
                            }
                            if (e != k) {
                                cptr[e] = cs_flip(k);
                                W[w + e] = 0;
                            }
                        }
                        if (elenk !== 0)
                            cnz = pk2;
                        W[degree + k] = dk;
                        cptr[k] = pk1;
                        W[len + k] = pk2 - pk1;
                        W[elen + k] = -2;
                        mark = _wclear(mark, lemax, W, w, n);
                        for (pk = pk1; pk < pk2; pk++) {
                            i = cindex[pk];
                            if ((eln = W[elen + i]) <= 0)
                                continue;
                            nvi = -W[nv + i];
                            var wnvi = mark - nvi;
                            for (p = cptr[i], p1 = cptr[i] + eln - 1; p <= p1; p++) {
                                e = cindex[p];
                                if (W[w + e] >= mark) {
                                    W[w + e] -= nvi;
                                }
                                else if (W[w + e] !== 0) {
                                    W[w + e] = W[degree + e] + wnvi;
                                }
                            }
                        }
                        for (pk = pk1; pk < pk2; pk++) {
                            i = cindex[pk];
                            p1 = cptr[i];
                            p2 = p1 + W[elen + i] - 1;
                            pn = p1;
                            for (h = 0, d = 0, p = p1; p <= p2; p++) {
                                e = cindex[p];
                                if (W[w + e] !== 0) {
                                    var dext = W[w + e] - mark;
                                    if (dext > 0) {
                                        d += dext;
                                        cindex[pn++] = e;
                                        h += e;
                                    }
                                    else {
                                        cptr[e] = cs_flip(k);
                                        W[w + e] = 0;
                                    }
                                }
                            }
                            W[elen + i] = pn - p1 + 1;
                            var p3 = pn;
                            var p4 = p1 + W[len + i];
                            for (p = p2 + 1; p < p4; p++) {
                                j = cindex[p];
                                var nvj = W[nv + j];
                                if (nvj <= 0)
                                    continue;
                                d += nvj;
                                cindex[pn++] = j;
                                h += j;
                            }
                            if (d === 0) {
                                cptr[i] = cs_flip(k);
                                nvi = -W[nv + i];
                                dk -= nvi;
                                nvk += nvi;
                                nel += nvi;
                                W[nv + i] = 0;
                                W[elen + i] = -1;
                            }
                            else {
                                W[degree + i] = Math.min(W[degree + i], d);
                                cindex[pn] = cindex[p3];
                                cindex[p3] = cindex[p1];
                                cindex[p1] = k;
                                W[len + i] = pn - p1 + 1;
                                h = (h < 0 ? -h : h) % n;
                                W[next + i] = W[hhead + h];
                                W[hhead + h] = i;
                                last[i] = h;
                            }
                        }
                        W[degree + k] = dk;
                        lemax = Math.max(lemax, dk);
                        mark = _wclear(mark + lemax, lemax, W, w, n);
                        for (pk = pk1; pk < pk2; pk++) {
                            i = cindex[pk];
                            if (W[nv + i] >= 0)
                                continue;
                            h = last[i];
                            i = W[hhead + h];
                            W[hhead + h] = -1;
                            for (; i != -1 && W[next + i] != -1; i = W[next + i], mark++) {
                                ln = W[len + i];
                                eln = W[elen + i];
                                for (p = cptr[i] + 1; p <= cptr[i] + ln - 1; p++)
                                    W[w + cindex[p]] = mark;
                                var jlast = i;
                                for (j = W[next + i]; j != -1;) {
                                    var ok = W[len + j] === ln && W[elen + j] === eln;
                                    for (p = cptr[j] + 1; ok && p <= cptr[j] + ln - 1; p++) {
                                        if (W[w + cindex[p]] != mark)
                                            ok = 0;
                                    }
                                    if (ok) {
                                        cptr[j] = cs_flip(i);
                                        W[nv + i] += W[nv + j];
                                        W[nv + j] = 0;
                                        W[elen + j] = -1;
                                        j = W[next + j];
                                        W[next + jlast] = j;
                                    }
                                    else {
                                        jlast = j;
                                        j = W[next + j];
                                    }
                                }
                            }
                        }
                        for (p = pk1, pk = pk1; pk < pk2; pk++) {
                            i = cindex[pk];
                            if ((nvi = -W[nv + i]) <= 0)
                                continue;
                            W[nv + i] = nvi;
                            d = W[degree + i] + dk - nvi;
                            d = Math.min(d, n - nel - nvi);
                            if (W[head + d] != -1)
                                last[W[head + d]] = i;
                            W[next + i] = W[head + d];
                            last[i] = -1;
                            W[head + d] = i;
                            mindeg = Math.min(mindeg, d);
                            W[degree + i] = d;
                            cindex[p++] = i;
                        }
                        W[nv + k] = nvk;
                        if ((W[len + k] = p - pk1) === 0) {
                            cptr[k] = -1;
                            W[w + k] = 0;
                        }
                        if (elenk !== 0) {
                            cnz = p;
                        }
                    }
                    for (i = 0; i < n; i++)
                        cptr[i] = cs_flip(cptr[i]);
                    for (j = 0; j <= n; j++)
                        W[head + j] = -1;
                    for (j = n; j >= 0; j--) {
                        if (W[nv + j] > 0)
                            continue;
                        W[next + j] = W[head + cptr[j]];
                        W[head + cptr[j]] = j;
                    }
                    for (e = n; e >= 0; e--) {
                        if (W[nv + e] <= 0)
                            continue;
                        if (cptr[e] != -1) {
                            W[next + e] = W[head + cptr[e]];
                            W[head + cptr[e]] = e;
                        }
                    }
                    for (k = 0, i = 0; i <= n; i++) {
                        if (cptr[i] == -1)
                            k = cs_tdfs(i, k, W, head, next, P, w);
                    }
                    P.splice(P.length - 1, 1);
                    return P;
                };
                var _createTargetMatrix = function (order, a, m, n, dense) {
                    var at = transpose(a);
                    if (order === 1 && n === m) {
                        return add(a, at);
                    }
                    if (order == 2) {
                        var tindex = at._index;
                        var tptr = at._ptr;
                        var p2 = 0;
                        for (var j = 0; j < m; j++) {
                            var p = tptr[j];
                            tptr[j] = p2;
                            if (tptr[j + 1] - p > dense)
                                continue;
                            for (var p1 = tptr[j + 1]; p < p1; p++)
                                tindex[p2++] = tindex[p];
                        }
                        tptr[m] = p2;
                        a = transpose(at);
                        return multiply(at, a);
                    }
                    return multiply(at, a);
                };
                var _initializeQuotientGraph = function (n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree) {
                    for (var k = 0; k < n; k++)
                        W[len + k] = cptr[k + 1] - cptr[k];
                    W[len + n] = 0;
                    for (var i = 0; i <= n; i++) {
                        W[head + i] = -1;
                        last[i] = -1;
                        W[next + i] = -1;
                        W[hhead + i] = -1;
                        W[nv + i] = 1;
                        W[w + i] = 1;
                        W[elen + i] = 0;
                        W[degree + i] = W[len + i];
                    }
                    var mark = _wclear(0, 0, W, w, n);
                    W[elen + n] = -2;
                    cptr[n] = -1;
                    W[w + n] = 0;
                    return mark;
                };
                var _initializeDegreeLists = function (n, cptr, W, degree, elen, w, dense, nv, head, last, next) {
                    var nel = 0;
                    for (var i = 0; i < n; i++) {
                        var d = W[degree + i];
                        if (d === 0) {
                            W[elen + i] = -2;
                            nel++;
                            cptr[i] = -1;
                            W[w + i] = 0;
                        }
                        else if (d > dense) {
                            W[nv + i] = 0;
                            W[elen + i] = -1;
                            nel++;
                            cptr[i] = cs_flip(n);
                            W[nv + n]++;
                        }
                        else {
                            var h = W[head + d];
                            if (h != -1)
                                last[h] = i;
                            W[next + i] = W[head + d];
                            W[head + d] = i;
                        }
                    }
                    return nel;
                };
                var _wclear = function (mark, lemax, W, w, n) {
                    if (mark < 2 || (mark + lemax < 0)) {
                        for (var k = 0; k < n; k++) {
                            if (W[w + k] !== 0)
                                W[w + k] = 1;
                        }
                        mark = 2;
                    }
                    return mark;
                };
                var _diag = function (i, j) {
                    return i != j;
                };
                return cs_amd;
            }
            exports.name = 'cs_amd';
            exports.path = 'sparse';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory() {
                var cs_fkeep = function (a, callback, other) {
                    var avalues = a._values;
                    var aindex = a._index;
                    var aptr = a._ptr;
                    var asize = a._size;
                    var n = asize[1];
                    var nz = 0;
                    for (var j = 0; j < n; j++) {
                        var p = aptr[j];
                        aptr[j] = nz;
                        for (; p < aptr[j + 1]; p++) {
                            if (callback(aindex[p], j, avalues ? avalues[p] : 1, other)) {
                                aindex[nz] = aindex[p];
                                if (avalues)
                                    avalues[nz] = avalues[p];
                                nz++;
                            }
                        }
                    }
                    aptr[n] = nz;
                    aindex.splice(nz, aindex.length - nz);
                    if (avalues)
                        avalues.splice(nz, avalues.length - nz);
                    return (nz);
                };
                return cs_fkeep;
            }
            exports.name = 'cs_fkeep';
            exports.path = 'sparse';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type) {
                var SparseMatrix = type.SparseMatrix;
                var cs_permute = function (a, pinv, q, values) {
                    var avalues = a._values;
                    var aindex = a._index;
                    var aptr = a._ptr;
                    var asize = a._size;
                    var adt = a._datatype;
                    var m = asize[0];
                    var n = asize[1];
                    var cvalues = values && a._values ? [] : null;
                    var cindex = [];
                    var cptr = [];
                    var nz = 0;
                    for (var k = 0; k < n; k++) {
                        cptr[k] = nz;
                        var j = q ? (q[k]) : k;
                        for (var t0 = aptr[j], t1 = aptr[j + 1], t = t0; t < t1; t++) {
                            var r = pinv ? pinv[aindex[t]] : aindex[t];
                            cindex[nz] = r;
                            if (cvalues)
                                cvalues[nz] = avalues[t];
                            nz++;
                        }
                    }
                    cptr[n] = nz;
                    return new SparseMatrix({
                        values: cvalues,
                        index: cindex,
                        ptr: cptr,
                        size: [m, n],
                        datatype: adt
                    });
                };
                return cs_permute;
            }
            exports.name = 'cs_permute';
            exports.path = 'sparse';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory() {
                var cs_etree = function (a, ata) {
                    if (!a)
                        return null;
                    var aindex = a._index;
                    var aptr = a._ptr;
                    var asize = a._size;
                    var m = asize[0];
                    var n = asize[1];
                    var parent = [];
                    var w = [];
                    var ancestor = 0;
                    var prev = n;
                    var i, inext;
                    if (ata) {
                        for (i = 0; i < m; i++)
                            w[prev + i] = -1;
                    }
                    for (var k = 0; k < n; k++) {
                        parent[k] = -1;
                        w[ancestor + k] = -1;
                        for (var p0 = aptr[k], p1 = aptr[k + 1], p = p0; p < p1; p++) {
                            var r = aindex[p];
                            i = ata ? (w[prev + r]) : r;
                            for (; i != -1 && i < k; i = inext) {
                                inext = w[ancestor + i];
                                w[ancestor + i] = k;
                                if (inext == -1)
                                    parent[i] = k;
                            }
                            if (ata)
                                w[prev + r] = k;
                        }
                    }
                    return parent;
                };
                return cs_etree;
            }
            exports.name = 'cs_etree';
            exports.path = 'sparse';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load) {
                var cs_tdfs = load(__webpack_require__(126));
                var cs_post = function (parent, n) {
                    if (!parent)
                        return null;
                    var k = 0;
                    var j;
                    var post = [];
                    var w = [];
                    var head = 0;
                    var next = n;
                    var stack = 2 * n;
                    for (j = 0; j < n; j++) {
                        w[head + j] = -1;
                    }
                    for (j = n - 1; j >= 0; j--) {
                        if (parent[j] == -1)
                            continue;
                        w[next + j] = w[head + parent[j]];
                        w[head + parent[j]] = j;
                    }
                    for (j = 0; j < n; j++) {
                        if (parent[j] != -1)
                            continue;
                        k = cs_tdfs(j, k, w, head, next, post, stack);
                    }
                    return post;
                };
                return cs_post;
            }
            exports.name = 'cs_post';
            exports.path = 'sparse';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load) {
                var transpose = load(__webpack_require__(67));
                var cs_leaf = load(__webpack_require__(417));
                var cs_counts = function (a, parent, post, ata) {
                    if (!a || !parent || !post)
                        return null;
                    var asize = a._size;
                    var m = asize[0];
                    var n = asize[1];
                    var i, j, k, J, p, p0, p1;
                    var s = 4 * n + (ata ? (n + m + 1) : 0);
                    var w = [];
                    var ancestor = 0;
                    var maxfirst = n;
                    var prevleaf = 2 * n;
                    var first = 3 * n;
                    var head = 4 * n;
                    var next = 5 * n + 1;
                    for (k = 0; k < s; k++)
                        w[k] = -1;
                    var colcount = [];
                    var at = transpose(a);
                    var tindex = at._index;
                    var tptr = at._ptr;
                    for (k = 0; k < n; k++) {
                        j = post[k];
                        colcount[j] = (w[first + j] == -1) ? 1 : 0;
                        for (; j != -1 && w[first + j] == -1; j = parent[j])
                            w[first + j] = k;
                    }
                    if (ata) {
                        for (k = 0; k < n; k++)
                            w[post[k]] = k;
                        for (i = 0; i < m; i++) {
                            for (k = n, p0 = tptr[i], p1 = tptr[i + 1], p = p0; p < p1; p++)
                                k = Math.min(k, w[tindex[p]]);
                            w[next + i] = w[head + k];
                            w[head + k] = i;
                        }
                    }
                    for (i = 0; i < n; i++)
                        w[ancestor + i] = i;
                    for (k = 0; k < n; k++) {
                        j = post[k];
                        if (parent[j] != -1)
                            colcount[parent[j]]--;
                        for (J = (ata ? w[head + k] : j); J != -1; J = (ata ? w[next + J] : -1)) {
                            for (p = tptr[J]; p < tptr[J + 1]; p++) {
                                i = tindex[p];
                                var r = cs_leaf(i, j, w, first, maxfirst, prevleaf, ancestor);
                                if (r.jleaf >= 1)
                                    colcount[j]++;
                                if (r.jleaf == 2)
                                    colcount[r.q]--;
                            }
                        }
                        if (parent[j] != -1)
                            w[ancestor + j] = parent[j];
                    }
                    for (j = 0; j < n; j++) {
                        if (parent[j] != -1)
                            colcount[parent[j]] += colcount[j];
                    }
                    return colcount;
                };
                return cs_counts;
            }
            exports.name = 'cs_counts';
            exports.path = 'sparse';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory() {
                var cs_leaf = function (i, j, w, first, maxfirst, prevleaf, ancestor) {
                    var s, sparent, jprev;
                    var jleaf = 0;
                    var q;
                    if (i <= j || w[first + j] <= w[maxfirst + i])
                        return (-1);
                    w[maxfirst + i] = w[first + j];
                    jprev = w[prevleaf + i];
                    w[prevleaf + i] = j;
                    if (jprev === -1) {
                        jleaf = 1;
                        q = i;
                    }
                    else {
                        jleaf = 2;
                        for (q = jprev; q != w[ancestor + q]; q = w[ancestor + q])
                            ;
                        for (s = jprev; s != q; s = sparent) {
                            sparent = w[ancestor + s];
                            w[ancestor + s] = q;
                        }
                    }
                    return {
                        jleaf: jleaf,
                        q: q
                    };
                };
                return cs_leaf;
            }
            exports.name = 'cs_leaf';
            exports.path = 'sparse';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load) {
                var abs = load(__webpack_require__(29));
                var divideScalar = load(__webpack_require__(19));
                var multiply = load(__webpack_require__(12));
                var larger = load(__webpack_require__(34));
                var largerEq = load(__webpack_require__(127));
                var cs_spsolve = load(__webpack_require__(419));
                var SparseMatrix = type.SparseMatrix;
                var cs_lu = function (m, s, tol) {
                    if (!m)
                        return null;
                    var size = m._size;
                    var n = size[1];
                    var q;
                    var lnz = 100;
                    var unz = 100;
                    if (s) {
                        q = s.q;
                        lnz = s.lnz || lnz;
                        unz = s.unz || unz;
                    }
                    var lvalues = [];
                    var lindex = [];
                    var lptr = [];
                    var L = new SparseMatrix({
                        values: lvalues,
                        index: lindex,
                        ptr: lptr,
                        size: [n, n]
                    });
                    var uvalues = [];
                    var uindex = [];
                    var uptr = [];
                    var U = new SparseMatrix({
                        values: uvalues,
                        index: uindex,
                        ptr: uptr,
                        size: [n, n]
                    });
                    var pinv = [];
                    var i, p;
                    var x = [];
                    var xi = [];
                    for (i = 0; i < n; i++) {
                        x[i] = 0;
                        pinv[i] = -1;
                        lptr[i + 1] = 0;
                    }
                    lnz = 0;
                    unz = 0;
                    for (var k = 0; k < n; k++) {
                        lptr[k] = lnz;
                        uptr[k] = unz;
                        var col = q ? q[k] : k;
                        var top = cs_spsolve(L, m, col, xi, x, pinv, 1);
                        var ipiv = -1;
                        var a = -1;
                        for (p = top; p < n; p++) {
                            i = xi[p];
                            if (pinv[i] < 0) {
                                var xabs = abs(x[i]);
                                if (larger(xabs, a)) {
                                    a = xabs;
                                    ipiv = i;
                                }
                            }
                            else {
                                uindex[unz] = pinv[i];
                                uvalues[unz++] = x[i];
                            }
                        }
                        if (ipiv == -1 || a <= 0)
                            return null;
                        if (pinv[col] < 0 && largerEq(abs(x[col]), multiply(a, tol)))
                            ipiv = col;
                        var pivot = x[ipiv];
                        uindex[unz] = k;
                        uvalues[unz++] = pivot;
                        pinv[ipiv] = k;
                        lindex[lnz] = ipiv;
                        lvalues[lnz++] = 1;
                        for (p = top; p < n; p++) {
                            i = xi[p];
                            if (pinv[i] < 0) {
                                lindex[lnz] = i;
                                lvalues[lnz++] = divideScalar(x[i], pivot);
                            }
                            x[i] = 0;
                        }
                    }
                    lptr[n] = lnz;
                    uptr[n] = unz;
                    for (p = 0; p < lnz; p++)
                        lindex[p] = pinv[lindex[p]];
                    lvalues.splice(lnz, lvalues.length - lnz);
                    lindex.splice(lnz, lindex.length - lnz);
                    uvalues.splice(unz, uvalues.length - unz);
                    uindex.splice(unz, uindex.length - unz);
                    return {
                        L: L,
                        U: U,
                        pinv: pinv
                    };
                };
                return cs_lu;
            }
            exports.name = 'cs_lu';
            exports.path = 'sparse';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load) {
                var divideScalar = load(__webpack_require__(19));
                var multiply = load(__webpack_require__(12));
                var subtract = load(__webpack_require__(21));
                var cs_reach = load(__webpack_require__(420));
                var cs_spsolve = function (g, b, k, xi, x, pinv, lo) {
                    var gvalues = g._values;
                    var gindex = g._index;
                    var gptr = g._ptr;
                    var gsize = g._size;
                    var n = gsize[1];
                    var bvalues = b._values;
                    var bindex = b._index;
                    var bptr = b._ptr;
                    var p, p0, p1, q;
                    var top = cs_reach(g, b, k, xi, pinv);
                    for (p = top; p < n; p++)
                        x[xi[p]] = 0;
                    for (p0 = bptr[k], p1 = bptr[k + 1], p = p0; p < p1; p++)
                        x[bindex[p]] = bvalues[p];
                    for (var px = top; px < n; px++) {
                        var j = xi[px];
                        var J = pinv ? pinv[j] : j;
                        if (J < 0)
                            continue;
                        p0 = gptr[J];
                        p1 = gptr[J + 1];
                        x[j] = divideScalar(x[j], gvalues[lo ? p0 : (p1 - 1)]);
                        p = lo ? (p0 + 1) : p0;
                        q = lo ? (p1) : (p1 - 1);
                        for (; p < q; p++) {
                            var i = gindex[p];
                            x[i] = subtract(x[i], multiply(gvalues[p], x[j]));
                        }
                    }
                    return top;
                };
                return cs_spsolve;
            }
            exports.name = 'cs_spsolve';
            exports.path = 'sparse';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load) {
                var cs_dfs = load(__webpack_require__(421));
                var cs_marked = load(__webpack_require__(128));
                var cs_mark = load(__webpack_require__(129));
                var cs_reach = function (g, b, k, xi, pinv) {
                    var gptr = g._ptr;
                    var gsize = g._size;
                    var bindex = b._index;
                    var bptr = b._ptr;
                    var n = gsize[1];
                    var p, p0, p1;
                    var top = n;
                    for (p0 = bptr[k], p1 = bptr[k + 1], p = p0; p < p1; p++) {
                        var i = bindex[p];
                        if (!cs_marked(gptr, i)) {
                            top = cs_dfs(i, g, top, xi, pinv);
                        }
                    }
                    for (p = top; p < n; p++) {
                        cs_mark(gptr, xi[p]);
                    }
                    return top;
                };
                return cs_reach;
            }
            exports.name = 'cs_reach';
            exports.path = 'sparse';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load) {
                var cs_marked = load(__webpack_require__(128));
                var cs_mark = load(__webpack_require__(129));
                var cs_unflip = load(__webpack_require__(422));
                var cs_dfs = function (j, g, top, xi, pinv) {
                    var index = g._index;
                    var ptr = g._ptr;
                    var size = g._size;
                    var n = size[1];
                    var i, p, p2;
                    var head = 0;
                    xi[0] = j;
                    while (head >= 0) {
                        j = xi[head];
                        var jnew = pinv ? pinv[j] : j;
                        if (!cs_marked(ptr, j)) {
                            cs_mark(ptr, j);
                            xi[n + head] = jnew < 0 ? 0 : cs_unflip(ptr[jnew]);
                        }
                        var done = 1;
                        for (p = xi[n + head], p2 = jnew < 0 ? 0 : cs_unflip(ptr[jnew + 1]); p < p2; p++) {
                            i = index[p];
                            if (cs_marked(ptr, i))
                                continue;
                            xi[n + head] = p;
                            xi[++head] = i;
                            done = 0;
                            break;
                        }
                        if (done) {
                            head--;
                            xi[--top] = j;
                        }
                    }
                    return top;
                };
                return cs_dfs;
            }
            exports.name = 'cs_dfs';
            exports.path = 'sparse';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load) {
                var cs_flip = load(__webpack_require__(83));
                var cs_unflip = function (i) {
                    return i < 0 ? cs_flip(i) : i;
                };
                return cs_unflip;
            }
            exports.name = 'cs_unflip';
            exports.path = 'sparse';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var isArray = Array.isArray;
            function factory(type, config, load, typed) {
                var matrix = load(__webpack_require__(0));
                var lup = load(__webpack_require__(124));
                var slu = load(__webpack_require__(125));
                var cs_ipvec = load(__webpack_require__(424));
                var solveValidation = load(__webpack_require__(84));
                var usolve = load(__webpack_require__(131));
                var lsolve = load(__webpack_require__(130));
                var lusolve = typed('lusolve', {
                    'Array, Array | Matrix': function (a, b) {
                        a = matrix(a);
                        var d = lup(a);
                        var x = _lusolve(d.L, d.U, d.p, null, b);
                        return x.valueOf();
                    },
                    'DenseMatrix, Array | Matrix': function (a, b) {
                        var d = lup(a);
                        return _lusolve(d.L, d.U, d.p, null, b);
                    },
                    'SparseMatrix, Array | Matrix': function (a, b) {
                        var d = lup(a);
                        return _lusolve(d.L, d.U, d.p, null, b);
                    },
                    'SparseMatrix, Array | Matrix, number, number': function (a, b, order, threshold) {
                        var d = slu(a, order, threshold);
                        return _lusolve(d.L, d.U, d.p, d.q, b);
                    },
                    'Object, Array | Matrix': function (d, b) {
                        return _lusolve(d.L, d.U, d.p, d.q, b);
                    }
                });
                var _toMatrix = function (a) {
                    if (type.isMatrix(a))
                        return a;
                    if (isArray(a))
                        return matrix(a);
                    throw new TypeError('Invalid Matrix LU decomposition');
                };
                var _lusolve = function (l, u, p, q, b) {
                    l = _toMatrix(l);
                    u = _toMatrix(u);
                    b = solveValidation(l, b, false);
                    if (p)
                        b._data = cs_ipvec(p, b._data);
                    var y = lsolve(l, b);
                    var x = usolve(u, y);
                    if (q)
                        x._data = cs_ipvec(q, x._data);
                    return x;
                };
                return lusolve;
            }
            exports.name = 'lusolve';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory() {
                var cs_ipvec = function (p, b, n) {
                    var k;
                    var n = b.length;
                    var x = [];
                    if (p) {
                        for (k = 0; k < n; k++) {
                            x[p[k]] = b[k];
                        }
                    }
                    else {
                        for (k = 0; k < n; k++) {
                            x[k] = b[k];
                        }
                    }
                    return x;
                };
                return cs_ipvec;
            }
            exports.name = 'cs_ipvec';
            exports.path = 'sparse';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            module.exports = [
                __webpack_require__(29),
                __webpack_require__(18),
                __webpack_require__(20),
                __webpack_require__(426),
                __webpack_require__(427),
                __webpack_require__(428),
                __webpack_require__(47),
                __webpack_require__(132),
                __webpack_require__(429),
                __webpack_require__(430),
                __webpack_require__(431),
                __webpack_require__(96),
                __webpack_require__(432),
                __webpack_require__(433),
                __webpack_require__(434),
                __webpack_require__(435),
                __webpack_require__(134),
                __webpack_require__(437),
                __webpack_require__(438),
                __webpack_require__(12),
                __webpack_require__(439),
                __webpack_require__(440),
                __webpack_require__(45),
                __webpack_require__(97),
                __webpack_require__(122),
                __webpack_require__(56),
                __webpack_require__(441),
                __webpack_require__(21),
                __webpack_require__(37),
                __webpack_require__(442),
                __webpack_require__(443)
            ];
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            function factory(type, config, load, typed) {
                var unaryMinus = load(__webpack_require__(37));
                var isNegative = load(__webpack_require__(57));
                var matrix = load(__webpack_require__(0));
                var cbrt = typed('cbrt', {
                    'number': _cbrtNumber,
                    'Complex': _cbrtComplex,
                    'Complex, boolean': _cbrtComplex,
                    'BigNumber': function (x) {
                        return x.cbrt();
                    },
                    'Unit': _cbrtUnit,
                    'Array | Matrix': function (x) {
                        return deepMap(x, cbrt, true);
                    }
                });
                function _cbrtComplex(x, allRoots) {
                    var arg_3 = x.arg() / 3;
                    var abs = x.abs();
                    var principal = new type.Complex(_cbrtNumber(abs), 0).mul(new type.Complex(0, arg_3).exp());
                    if (allRoots) {
                        var all = [
                            principal,
                            new type.Complex(_cbrtNumber(abs), 0).mul(new type.Complex(0, arg_3 + Math.PI * 2 / 3).exp()),
                            new type.Complex(_cbrtNumber(abs), 0).mul(new type.Complex(0, arg_3 - Math.PI * 2 / 3).exp())
                        ];
                        return (config.matrix === 'Array') ? all : matrix(all);
                    }
                    else {
                        return principal;
                    }
                }
                function _cbrtUnit(x) {
                    if (x.value && type.isComplex(x.value)) {
                        var result = x.clone();
                        result.value = 1.0;
                        result = result.pow(1.0 / 3);
                        result.value = _cbrtComplex(x.value);
                        return result;
                    }
                    else {
                        var negate = isNegative(x.value);
                        if (negate) {
                            x.value = unaryMinus(x.value);
                        }
                        var third;
                        if (type.isBigNumber(x.value)) {
                            third = new type.BigNumber(1).div(3);
                        }
                        else if (type.isFraction(x.value)) {
                            third = new type.Fraction(1, 3);
                        }
                        else {
                            third = 1 / 3;
                        }
                        var result = x.pow(third);
                        if (negate) {
                            result.value = unaryMinus(result.value);
                        }
                        return result;
                    }
                }
                cbrt.toTex = { 1: '\\sqrt[3]{${args[0]}}' };
                return cbrt;
            }
            var _cbrtNumber = Math.cbrt || function (x) {
                if (x === 0) {
                    return x;
                }
                var negate = x < 0;
                var result;
                if (negate) {
                    x = -x;
                }
                if (isFinite(x)) {
                    result = Math.exp(Math.log(x) / 3);
                    result = (x / (result * result) + (2 * result)) / 3;
                }
                else {
                    result = x;
                }
                return negate ? -result : result;
            };
            exports.name = 'cbrt';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            function factory(type, config, load, typed) {
                var ceil = typed('ceil', {
                    'number': Math.ceil,
                    'Complex': function (x) {
                        return x.ceil();
                    },
                    'BigNumber': function (x) {
                        return x.ceil();
                    },
                    'Fraction': function (x) {
                        return x.ceil();
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, ceil, true);
                    }
                });
                ceil.toTex = { 1: '\\left\\lceil${args[0]}\\right\\rceil' };
                return ceil;
            }
            exports.name = 'ceil';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            function factory(type, config, load, typed) {
                var cube = typed('cube', {
                    'number': function (x) {
                        return x * x * x;
                    },
                    'Complex': function (x) {
                        return x.mul(x).mul(x);
                    },
                    'BigNumber': function (x) {
                        return x.times(x).times(x);
                    },
                    'Fraction': function (x) {
                        return x.pow(3);
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, cube, true);
                    },
                    'Unit': function (x) {
                        return x.pow(3);
                    }
                });
                cube.toTex = { 1: '\\left(${args[0]}\\right)^3' };
                return cube;
            }
            exports.name = 'cube';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load, typed) {
                var matrix = load(__webpack_require__(0));
                var multiplyScalar = load(__webpack_require__(23));
                var latex = __webpack_require__(4);
                var algorithm02 = load(__webpack_require__(24));
                var algorithm09 = load(__webpack_require__(133));
                var algorithm11 = load(__webpack_require__(17));
                var algorithm13 = load(__webpack_require__(8));
                var algorithm14 = load(__webpack_require__(6));
                var dotMultiply = typed('dotMultiply', {
                    'any, any': multiplyScalar,
                    'Matrix, Matrix': function (x, y) {
                        var c;
                        switch (x.storage()) {
                            case 'sparse':
                                switch (y.storage()) {
                                    case 'sparse':
                                        c = algorithm09(x, y, multiplyScalar, false);
                                        break;
                                    default:
                                        c = algorithm02(y, x, multiplyScalar, true);
                                        break;
                                }
                                break;
                            default:
                                switch (y.storage()) {
                                    case 'sparse':
                                        c = algorithm02(x, y, multiplyScalar, false);
                                        break;
                                    default:
                                        c = algorithm13(x, y, multiplyScalar);
                                        break;
                                }
                                break;
                        }
                        return c;
                    },
                    'Array, Array': function (x, y) {
                        return dotMultiply(matrix(x), matrix(y)).valueOf();
                    },
                    'Array, Matrix': function (x, y) {
                        return dotMultiply(matrix(x), y);
                    },
                    'Matrix, Array': function (x, y) {
                        return dotMultiply(x, matrix(y));
                    },
                    'Matrix, any': function (x, y) {
                        var c;
                        switch (x.storage()) {
                            case 'sparse':
                                c = algorithm11(x, y, multiplyScalar, false);
                                break;
                            default:
                                c = algorithm14(x, y, multiplyScalar, false);
                                break;
                        }
                        return c;
                    },
                    'any, Matrix': function (x, y) {
                        var c;
                        switch (y.storage()) {
                            case 'sparse':
                                c = algorithm11(y, x, multiplyScalar, true);
                                break;
                            default:
                                c = algorithm14(y, x, multiplyScalar, true);
                                break;
                        }
                        return c;
                    },
                    'Array, any': function (x, y) {
                        return algorithm14(matrix(x), y, multiplyScalar, false).valueOf();
                    },
                    'any, Array': function (x, y) {
                        return algorithm14(matrix(y), x, multiplyScalar, true).valueOf();
                    }
                });
                dotMultiply.toTex = {
                    2: '\\left(${args[0]}' + latex.operators['dotMultiply'] + '${args[1]}\\right)'
                };
                return dotMultiply;
            }
            exports.name = 'dotMultiply';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load, typed) {
                var matrix = load(__webpack_require__(0));
                var pow = load(__webpack_require__(45));
                var latex = __webpack_require__(4);
                var algorithm03 = load(__webpack_require__(15));
                var algorithm07 = load(__webpack_require__(26));
                var algorithm11 = load(__webpack_require__(17));
                var algorithm12 = load(__webpack_require__(16));
                var algorithm13 = load(__webpack_require__(8));
                var algorithm14 = load(__webpack_require__(6));
                var dotPow = typed('dotPow', {
                    'any, any': pow,
                    'Matrix, Matrix': function (x, y) {
                        var c;
                        switch (x.storage()) {
                            case 'sparse':
                                switch (y.storage()) {
                                    case 'sparse':
                                        c = algorithm07(x, y, pow, false);
                                        break;
                                    default:
                                        c = algorithm03(y, x, pow, true);
                                        break;
                                }
                                break;
                            default:
                                switch (y.storage()) {
                                    case 'sparse':
                                        c = algorithm03(x, y, pow, false);
                                        break;
                                    default:
                                        c = algorithm13(x, y, pow);
                                        break;
                                }
                                break;
                        }
                        return c;
                    },
                    'Array, Array': function (x, y) {
                        return dotPow(matrix(x), matrix(y)).valueOf();
                    },
                    'Array, Matrix': function (x, y) {
                        return dotPow(matrix(x), y);
                    },
                    'Matrix, Array': function (x, y) {
                        return dotPow(x, matrix(y));
                    },
                    'Matrix, any': function (x, y) {
                        var c;
                        switch (x.storage()) {
                            case 'sparse':
                                c = algorithm11(x, y, dotPow, false);
                                break;
                            default:
                                c = algorithm14(x, y, dotPow, false);
                                break;
                        }
                        return c;
                    },
                    'any, Matrix': function (x, y) {
                        var c;
                        switch (y.storage()) {
                            case 'sparse':
                                c = algorithm12(y, x, dotPow, true);
                                break;
                            default:
                                c = algorithm14(y, x, dotPow, true);
                                break;
                        }
                        return c;
                    },
                    'Array, any': function (x, y) {
                        return algorithm14(matrix(x), y, dotPow, false).valueOf();
                    },
                    'any, Array': function (x, y) {
                        return algorithm14(matrix(y), x, dotPow, true).valueOf();
                    }
                });
                dotPow.toTex = {
                    2: '\\left(${args[0]}' + latex.operators['dotPow'] + '${args[1]}\\right)'
                };
                return dotPow;
            }
            exports.name = 'dotPow';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            function factory(type, config, load, typed) {
                var exp = typed('exp', {
                    'number': Math.exp,
                    'Complex': function (x) {
                        return x.exp();
                    },
                    'BigNumber': function (x) {
                        return x.exp();
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, exp);
                    }
                });
                exp.toTex = { 1: '\\exp\\left(${args[0]}\\right)' };
                return exp;
            }
            exports.name = 'exp';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            function factory(type, config, load, typed) {
                var floor = typed('floor', {
                    'number': Math.floor,
                    'Complex': function (x) {
                        return x.floor();
                    },
                    'BigNumber': function (x) {
                        return x.floor();
                    },
                    'Fraction': function (x) {
                        return x.floor();
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, floor, true);
                    }
                });
                floor.toTex = { 1: '\\left\\lfloor${args[0]}\\right\\rfloor' };
                return floor;
            }
            exports.name = 'floor';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var isInteger = __webpack_require__(3).isInteger;
            function factory(type, config, load, typed) {
                var matrix = load(__webpack_require__(0));
                var algorithm01 = load(__webpack_require__(33));
                var algorithm04 = load(__webpack_require__(73));
                var algorithm10 = load(__webpack_require__(36));
                var algorithm13 = load(__webpack_require__(8));
                var algorithm14 = load(__webpack_require__(6));
                var gcd = typed('gcd', {
                    'number, number': _gcd,
                    'BigNumber, BigNumber': _gcdBigNumber,
                    'Fraction, Fraction': function (x, y) {
                        return x.gcd(y);
                    },
                    'Matrix, Matrix': function (x, y) {
                        var c;
                        switch (x.storage()) {
                            case 'sparse':
                                switch (y.storage()) {
                                    case 'sparse':
                                        c = algorithm04(x, y, gcd);
                                        break;
                                    default:
                                        c = algorithm01(y, x, gcd, true);
                                        break;
                                }
                                break;
                            default:
                                switch (y.storage()) {
                                    case 'sparse':
                                        c = algorithm01(x, y, gcd, false);
                                        break;
                                    default:
                                        c = algorithm13(x, y, gcd);
                                        break;
                                }
                                break;
                        }
                        return c;
                    },
                    'Array, Array': function (x, y) {
                        return gcd(matrix(x), matrix(y)).valueOf();
                    },
                    'Array, Matrix': function (x, y) {
                        return gcd(matrix(x), y);
                    },
                    'Matrix, Array': function (x, y) {
                        return gcd(x, matrix(y));
                    },
                    'Matrix, number | BigNumber': function (x, y) {
                        var c;
                        switch (x.storage()) {
                            case 'sparse':
                                c = algorithm10(x, y, gcd, false);
                                break;
                            default:
                                c = algorithm14(x, y, gcd, false);
                                break;
                        }
                        return c;
                    },
                    'number | BigNumber, Matrix': function (x, y) {
                        var c;
                        switch (y.storage()) {
                            case 'sparse':
                                c = algorithm10(y, x, gcd, true);
                                break;
                            default:
                                c = algorithm14(y, x, gcd, true);
                                break;
                        }
                        return c;
                    },
                    'Array, number | BigNumber': function (x, y) {
                        return algorithm14(matrix(x), y, gcd, false).valueOf();
                    },
                    'number | BigNumber, Array': function (x, y) {
                        return algorithm14(matrix(y), x, gcd, true).valueOf();
                    },
                    'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function (a, b, args) {
                        var res = gcd(a, b);
                        for (var i = 0; i < args.length; i++) {
                            res = gcd(res, args[i]);
                        }
                        return res;
                    }
                });
                gcd.toTex = '\\gcd\\left(${args}\\right)';
                return gcd;
                function _gcdBigNumber(a, b) {
                    if (!a.isInt() || !b.isInt()) {
                        throw new Error('Parameters in function gcd must be integer numbers');
                    }
                    var zero = new type.BigNumber(0);
                    while (!b.isZero()) {
                        var r = a.mod(b);
                        a = b;
                        b = r;
                    }
                    return a.lt(zero) ? a.neg() : a;
                }
            }
            function _gcd(a, b) {
                if (!isInteger(a) || !isInteger(b)) {
                    throw new Error('Parameters in function gcd must be integer numbers');
                }
                var r;
                while (b != 0) {
                    r = a % b;
                    a = b;
                    b = r;
                }
                return (a < 0) ? -a : a;
            }
            exports.name = 'gcd';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var flatten = __webpack_require__(2).flatten;
            function factory(type, config, load, typed) {
                var abs = load(__webpack_require__(29));
                var add = load(__webpack_require__(20));
                var divide = load(__webpack_require__(19));
                var multiply = load(__webpack_require__(23));
                var sqrt = load(__webpack_require__(56));
                var smaller = load(__webpack_require__(44));
                var isPositive = load(__webpack_require__(55));
                var hypot = typed('hypot', {
                    '... number | BigNumber': _hypot,
                    'Array': function (x) {
                        return hypot.apply(hypot, flatten(x));
                    },
                    'Matrix': function (x) {
                        return hypot.apply(hypot, flatten(x.toArray()));
                    }
                });
                function _hypot(args) {
                    var result = 0;
                    var largest = 0;
                    for (var i = 0; i < args.length; i++) {
                        var value = abs(args[i]);
                        if (smaller(largest, value)) {
                            result = multiply(result, multiply(divide(largest, value), divide(largest, value)));
                            result = add(result, 1);
                            largest = value;
                        }
                        else {
                            result = add(result, isPositive(value) ? multiply(divide(value, largest), divide(value, largest)) : value);
                        }
                    }
                    return multiply(largest, sqrt(result));
                }
                hypot.toTex = '\\hypot\\left(${args}\\right)';
                return hypot;
            }
            exports.name = 'hypot';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var isInteger = __webpack_require__(3).isInteger;
            function factory(type, config, load, typed) {
                var matrix = load(__webpack_require__(0));
                var algorithm02 = load(__webpack_require__(24));
                var algorithm06 = load(__webpack_require__(68));
                var algorithm11 = load(__webpack_require__(17));
                var algorithm13 = load(__webpack_require__(8));
                var algorithm14 = load(__webpack_require__(6));
                var lcm = typed('lcm', {
                    'number, number': _lcm,
                    'BigNumber, BigNumber': _lcmBigNumber,
                    'Fraction, Fraction': function (x, y) {
                        return x.lcm(y);
                    },
                    'Matrix, Matrix': function (x, y) {
                        var c;
                        switch (x.storage()) {
                            case 'sparse':
                                switch (y.storage()) {
                                    case 'sparse':
                                        c = algorithm06(x, y, lcm);
                                        break;
                                    default:
                                        c = algorithm02(y, x, lcm, true);
                                        break;
                                }
                                break;
                            default:
                                switch (y.storage()) {
                                    case 'sparse':
                                        c = algorithm02(x, y, lcm, false);
                                        break;
                                    default:
                                        c = algorithm13(x, y, lcm);
                                        break;
                                }
                                break;
                        }
                        return c;
                    },
                    'Array, Array': function (x, y) {
                        return lcm(matrix(x), matrix(y)).valueOf();
                    },
                    'Array, Matrix': function (x, y) {
                        return lcm(matrix(x), y);
                    },
                    'Matrix, Array': function (x, y) {
                        return lcm(x, matrix(y));
                    },
                    'Matrix, number | BigNumber': function (x, y) {
                        var c;
                        switch (x.storage()) {
                            case 'sparse':
                                c = algorithm11(x, y, lcm, false);
                                break;
                            default:
                                c = algorithm14(x, y, lcm, false);
                                break;
                        }
                        return c;
                    },
                    'number | BigNumber, Matrix': function (x, y) {
                        var c;
                        switch (y.storage()) {
                            case 'sparse':
                                c = algorithm11(y, x, lcm, true);
                                break;
                            default:
                                c = algorithm14(y, x, lcm, true);
                                break;
                        }
                        return c;
                    },
                    'Array, number | BigNumber': function (x, y) {
                        return algorithm14(matrix(x), y, lcm, false).valueOf();
                    },
                    'number | BigNumber, Array': function (x, y) {
                        return algorithm14(matrix(y), x, lcm, true).valueOf();
                    },
                    'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function (a, b, args) {
                        var res = lcm(a, b);
                        for (var i = 0; i < args.length; i++) {
                            res = lcm(res, args[i]);
                        }
                        return res;
                    }
                });
                lcm.toTex = undefined;
                return lcm;
                function _lcmBigNumber(a, b) {
                    if (!a.isInt() || !b.isInt()) {
                        throw new Error('Parameters in function lcm must be integer numbers');
                    }
                    if (a.isZero() || b.isZero()) {
                        return new type.BigNumber(0);
                    }
                    var prod = a.times(b);
                    while (!b.isZero()) {
                        var t = b;
                        b = a.mod(t);
                        a = t;
                    }
                    return prod.div(a).abs();
                }
            }
            function _lcm(a, b) {
                if (!isInteger(a) || !isInteger(b)) {
                    throw new Error('Parameters in function lcm must be integer numbers');
                }
                if (a == 0 || b == 0) {
                    return 0;
                }
                var t;
                var prod = a * b;
                while (b != 0) {
                    t = b;
                    b = a % t;
                    a = t;
                }
                return Math.abs(prod / a);
            }
            exports.name = 'lcm';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            module.exports = function scatter(a, j, w, x, u, mark, c, f, inverse, update, value) {
                var avalues = a._values;
                var aindex = a._index;
                var aptr = a._ptr;
                var cindex = c._index;
                var k, k0, k1, i;
                if (x) {
                    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
                        i = aindex[k];
                        if (w[i] !== mark) {
                            w[i] = mark;
                            cindex.push(i);
                            if (update) {
                                x[i] = inverse ? f(avalues[k], value) : f(value, avalues[k]);
                                u[i] = mark;
                            }
                            else {
                                x[i] = avalues[k];
                            }
                        }
                        else {
                            x[i] = inverse ? f(avalues[k], x[i]) : f(x[i], avalues[k]);
                            u[i] = mark;
                        }
                    }
                }
                else {
                    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
                        i = aindex[k];
                        if (w[i] !== mark) {
                            w[i] = mark;
                            cindex.push(i);
                        }
                        else {
                            u[i] = mark;
                        }
                    }
                }
            };
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            function factory(type, config, load, typed) {
                var log10 = typed('log10', {
                    'number': function (x) {
                        if (x >= 0 || config.predictable) {
                            return _log10(x);
                        }
                        else {
                            return new type.Complex(x, 0).log().div(Math.LN10);
                        }
                    },
                    'Complex': function (x) {
                        return new type.Complex(x).log().div(Math.LN10);
                    },
                    'BigNumber': function (x) {
                        if (!x.isNegative() || config.predictable) {
                            return x.log();
                        }
                        else {
                            return new type.Complex(x.toNumber(), 0).log().div(Math.LN10);
                        }
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, log10);
                    }
                });
                log10.toTex = { 1: '\\log_{10}\\left(${args[0]}\\right)' };
                return log10;
            }
            var _log10 = Math.log10 || function (x) {
                return Math.log(x) / Math.LN10;
            };
            exports.name = 'log10';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load, typed) {
                var matrix = load(__webpack_require__(0));
                var latex = __webpack_require__(4);
                var algorithm02 = load(__webpack_require__(24));
                var algorithm03 = load(__webpack_require__(15));
                var algorithm05 = load(__webpack_require__(60));
                var algorithm11 = load(__webpack_require__(17));
                var algorithm12 = load(__webpack_require__(16));
                var algorithm13 = load(__webpack_require__(8));
                var algorithm14 = load(__webpack_require__(6));
                var mod = typed('mod', {
                    'number, number': _mod,
                    'BigNumber, BigNumber': function (x, y) {
                        return y.isZero() ? x : x.mod(y);
                    },
                    'Fraction, Fraction': function (x, y) {
                        return x.mod(y);
                    },
                    'Matrix, Matrix': function (x, y) {
                        var c;
                        switch (x.storage()) {
                            case 'sparse':
                                switch (y.storage()) {
                                    case 'sparse':
                                        c = algorithm05(x, y, mod, false);
                                        break;
                                    default:
                                        c = algorithm02(y, x, mod, true);
                                        break;
                                }
                                break;
                            default:
                                switch (y.storage()) {
                                    case 'sparse':
                                        c = algorithm03(x, y, mod, false);
                                        break;
                                    default:
                                        c = algorithm13(x, y, mod);
                                        break;
                                }
                                break;
                        }
                        return c;
                    },
                    'Array, Array': function (x, y) {
                        return mod(matrix(x), matrix(y)).valueOf();
                    },
                    'Array, Matrix': function (x, y) {
                        return mod(matrix(x), y);
                    },
                    'Matrix, Array': function (x, y) {
                        return mod(x, matrix(y));
                    },
                    'Matrix, any': function (x, y) {
                        var c;
                        switch (x.storage()) {
                            case 'sparse':
                                c = algorithm11(x, y, mod, false);
                                break;
                            default:
                                c = algorithm14(x, y, mod, false);
                                break;
                        }
                        return c;
                    },
                    'any, Matrix': function (x, y) {
                        var c;
                        switch (y.storage()) {
                            case 'sparse':
                                c = algorithm12(y, x, mod, true);
                                break;
                            default:
                                c = algorithm14(y, x, mod, true);
                                break;
                        }
                        return c;
                    },
                    'Array, any': function (x, y) {
                        return algorithm14(matrix(x), y, mod, false).valueOf();
                    },
                    'any, Array': function (x, y) {
                        return algorithm14(matrix(y), x, mod, true).valueOf();
                    }
                });
                mod.toTex = {
                    2: '\\left(${args[0]}' + latex.operators['mod'] + '${args[1]}\\right)'
                };
                return mod;
                function _mod(x, y) {
                    if (y > 0) {
                        return x - y * Math.floor(x / y);
                    }
                    else if (y === 0) {
                        return x;
                    }
                    else {
                        throw new Error('Cannot calculate mod for a negative divisor');
                    }
                }
            }
            exports.name = 'mod';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load, typed) {
                var abs = load(__webpack_require__(29));
                var add = load(__webpack_require__(18));
                var pow = load(__webpack_require__(45));
                var sqrt = load(__webpack_require__(56));
                var multiply = load(__webpack_require__(12));
                var equalScalar = load(__webpack_require__(11));
                var larger = load(__webpack_require__(34));
                var smaller = load(__webpack_require__(44));
                var matrix = load(__webpack_require__(0));
                var trace = load(__webpack_require__(135));
                var transpose = load(__webpack_require__(67));
                var norm = typed('norm', {
                    'number': Math.abs,
                    'Complex': function (x) {
                        return x.abs();
                    },
                    'BigNumber': function (x) {
                        return x.abs();
                    },
                    'boolean | null': function (x) {
                        return Math.abs(x);
                    },
                    'Array': function (x) {
                        return _norm(matrix(x), 2);
                    },
                    'Matrix': function (x) {
                        return _norm(x, 2);
                    },
                    'number | Complex | BigNumber | boolean | null, number | BigNumber | string': function (x) {
                        return norm(x);
                    },
                    'Array, number | BigNumber | string': function (x, p) {
                        return _norm(matrix(x), p);
                    },
                    'Matrix, number | BigNumber | string': function (x, p) {
                        return _norm(x, p);
                    }
                });
                function _norm(x, p) {
                    var sizeX = x.size();
                    if (sizeX.length == 1) {
                        if (p === Number.POSITIVE_INFINITY || p === 'inf') {
                            var pinf = 0;
                            x.forEach(function (value) {
                                var v = abs(value);
                                if (larger(v, pinf))
                                    pinf = v;
                            }, true);
                            return pinf;
                        }
                        if (p === Number.NEGATIVE_INFINITY || p === '-inf') {
                            var ninf;
                            x.forEach(function (value) {
                                var v = abs(value);
                                if (!ninf || smaller(v, ninf))
                                    ninf = v;
                            }, true);
                            return ninf || 0;
                        }
                        if (p === 'fro') {
                            return _norm(x, 2);
                        }
                        if (typeof p === 'number' && !isNaN(p)) {
                            if (!equalScalar(p, 0)) {
                                var n = 0;
                                x.forEach(function (value) {
                                    n = add(pow(abs(value), p), n);
                                }, true);
                                return pow(n, 1 / p);
                            }
                            return Number.POSITIVE_INFINITY;
                        }
                        throw new Error('Unsupported parameter value');
                    }
                    if (sizeX.length == 2) {
                        if (p === 1) {
                            var c = [];
                            var maxc = 0;
                            x.forEach(function (value, index) {
                                var j = index[1];
                                var cj = add(c[j] || 0, abs(value));
                                if (larger(cj, maxc))
                                    maxc = cj;
                                c[j] = cj;
                            }, true);
                            return maxc;
                        }
                        if (p === Number.POSITIVE_INFINITY || p === 'inf') {
                            var r = [];
                            var maxr = 0;
                            x.forEach(function (value, index) {
                                var i = index[0];
                                var ri = add(r[i] || 0, abs(value));
                                if (larger(ri, maxr))
                                    maxr = ri;
                                r[i] = ri;
                            }, true);
                            return maxr;
                        }
                        if (p === 'fro') {
                            return sqrt(trace(multiply(transpose(x), x)));
                        }
                        if (p === 2) {
                            throw new Error('Unsupported parameter value, missing implementation of matrix singular value decomposition');
                        }
                        throw new Error('Unsupported parameter value');
                    }
                }
                norm.toTex = {
                    1: '\\left\\|${args[0]}\\right\\|',
                    2: undefined
                };
                return norm;
            }
            exports.name = 'norm';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load, typed) {
                var matrix = load(__webpack_require__(0));
                var algorithm01 = load(__webpack_require__(33));
                var algorithm02 = load(__webpack_require__(24));
                var algorithm06 = load(__webpack_require__(68));
                var algorithm11 = load(__webpack_require__(17));
                var algorithm13 = load(__webpack_require__(8));
                var algorithm14 = load(__webpack_require__(6));
                var nthRoot = typed('nthRoot', {
                    'number': function (x) {
                        return _nthRoot(x, 2);
                    },
                    'number, number': _nthRoot,
                    'BigNumber': function (x) {
                        return _bigNthRoot(x, new type.BigNumber(2));
                    },
                    'Complex': function (x) {
                        return _nthComplexRoot(x, 2);
                    },
                    'Complex, number': _nthComplexRoot,
                    'BigNumber, BigNumber': _bigNthRoot,
                    'Array | Matrix': function (x) {
                        return nthRoot(x, 2);
                    },
                    'Matrix, Matrix': function (x, y) {
                        var c;
                        switch (x.storage()) {
                            case 'sparse':
                                switch (y.storage()) {
                                    case 'sparse':
                                        if (y.density() === 1) {
                                            c = algorithm06(x, y, nthRoot);
                                        }
                                        else {
                                            throw new Error('Root must be non-zero');
                                        }
                                        break;
                                    default:
                                        c = algorithm02(y, x, nthRoot, true);
                                        break;
                                }
                                break;
                            default:
                                switch (y.storage()) {
                                    case 'sparse':
                                        if (y.density() === 1) {
                                            c = algorithm01(x, y, nthRoot, false);
                                        }
                                        else {
                                            throw new Error('Root must be non-zero');
                                        }
                                        break;
                                    default:
                                        c = algorithm13(x, y, nthRoot);
                                        break;
                                }
                                break;
                        }
                        return c;
                    },
                    'Array, Array': function (x, y) {
                        return nthRoot(matrix(x), matrix(y)).valueOf();
                    },
                    'Array, Matrix': function (x, y) {
                        return nthRoot(matrix(x), y);
                    },
                    'Matrix, Array': function (x, y) {
                        return nthRoot(x, matrix(y));
                    },
                    'Matrix, number | BigNumber': function (x, y) {
                        var c;
                        switch (x.storage()) {
                            case 'sparse':
                                c = algorithm11(x, y, nthRoot, false);
                                break;
                            default:
                                c = algorithm14(x, y, nthRoot, false);
                                break;
                        }
                        return c;
                    },
                    'number | BigNumber, Matrix': function (x, y) {
                        var c;
                        switch (y.storage()) {
                            case 'sparse':
                                if (y.density() === 1) {
                                    c = algorithm11(y, x, nthRoot, true);
                                }
                                else {
                                    throw new Error('Root must be non-zero');
                                }
                                break;
                            default:
                                c = algorithm14(y, x, nthRoot, true);
                                break;
                        }
                        return c;
                    },
                    'Array, number | BigNumber': function (x, y) {
                        return nthRoot(matrix(x), y).valueOf();
                    },
                    'number | BigNumber, Array': function (x, y) {
                        return nthRoot(x, matrix(y)).valueOf();
                    }
                });
                nthRoot.toTex = { 2: '\\sqrt[${args[1]}]{${args[0]}}' };
                return nthRoot;
                function _bigNthRoot(a, root) {
                    var precision = type.BigNumber.precision;
                    var Big = type.BigNumber.clone({ precision: precision + 2 });
                    var zero = new type.BigNumber(0);
                    var one = new Big(1);
                    var inv = root.isNegative();
                    if (inv) {
                        root = root.neg();
                    }
                    if (root.isZero()) {
                        throw new Error('Root must be non-zero');
                    }
                    if (a.isNegative() && !root.abs().mod(2).equals(1)) {
                        throw new Error('Root must be odd when a is negative.');
                    }
                    if (a.isZero()) {
                        return inv ? new Big(Infinity) : 0;
                    }
                    if (!a.isFinite()) {
                        return inv ? zero : a;
                    }
                    var x = a.abs().pow(one.div(root));
                    x = a.isNeg() ? x.neg() : x;
                    return new type.BigNumber((inv ? one.div(x) : x).toPrecision(precision));
                }
            }
            function _nthRoot(a, root) {
                var inv = root < 0;
                if (inv) {
                    root = -root;
                }
                if (root === 0) {
                    throw new Error('Root must be non-zero');
                }
                if (a < 0 && (Math.abs(root) % 2 != 1)) {
                    throw new Error('Root must be odd when a is negative.');
                }
                if (a == 0) {
                    return inv ? Infinity : 0;
                }
                if (!isFinite(a)) {
                    return inv ? 0 : a;
                }
                var x = Math.pow(Math.abs(a), 1 / root);
                x = a < 0 ? -x : x;
                return inv ? 1 / x : x;
            }
            function _nthComplexRoot(a, root) {
                if (root < 0)
                    throw new Error('Root must be greater than zero');
                if (root === 0)
                    throw new Error('Root must be non-zero');
                if (root % 1 !== 0)
                    throw new Error('Root must be an integer');
                var arg = a.arg();
                var abs = a.abs();
                var roots = [];
                var r = Math.pow(abs, 1 / root);
                for (var k = 0; k < root; k++) {
                    roots.push({ r: r, phi: (arg + 2 * Math.PI * k) / root });
                }
                return roots;
            }
            exports.name = 'nthRoot';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            function factory(type, config, load, typed) {
                var square = typed('square', {
                    'number': function (x) {
                        return x * x;
                    },
                    'Complex': function (x) {
                        return x.mul(x);
                    },
                    'BigNumber': function (x) {
                        return x.times(x);
                    },
                    'Fraction': function (x) {
                        return x.mul(x);
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, square, true);
                    },
                    'Unit': function (x) {
                        return x.pow(2);
                    }
                });
                square.toTex = { 1: '\\left(${args[0]}\\right)^2' };
                return square;
            }
            exports.name = 'square';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            function factory(type, config, load, typed) {
                var latex = __webpack_require__(4);
                var unaryPlus = typed('unaryPlus', {
                    'number': function (x) {
                        return x;
                    },
                    'Complex': function (x) {
                        return x;
                    },
                    'BigNumber': function (x) {
                        return x;
                    },
                    'Fraction': function (x) {
                        return x;
                    },
                    'Unit': function (x) {
                        return x.clone();
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, unaryPlus, true);
                    },
                    'boolean | string | null': function (x) {
                        return (config.number == 'BigNumber') ? new type.BigNumber(+x) : +x;
                    }
                });
                unaryPlus.toTex = {
                    1: latex.operators['unaryPlus'] + '\\left(${args[0]}\\right)'
                };
                return unaryPlus;
            }
            exports.name = 'unaryPlus';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var isInteger = __webpack_require__(3).isInteger;
            function factory(type, config, load, typed) {
                var matrix = load(__webpack_require__(0));
                var xgcd = typed('xgcd', {
                    'number, number': _xgcd,
                    'BigNumber, BigNumber': _xgcdBigNumber
                });
                xgcd.toTex = undefined;
                return xgcd;
                function _xgcd(a, b) {
                    var t, q, r, x = 0, lastx = 1, y = 1, lasty = 0;
                    if (!isInteger(a) || !isInteger(b)) {
                        throw new Error('Parameters in function xgcd must be integer numbers');
                    }
                    while (b) {
                        q = Math.floor(a / b);
                        r = a - q * b;
                        t = x;
                        x = lastx - q * x;
                        lastx = t;
                        t = y;
                        y = lasty - q * y;
                        lasty = t;
                        a = b;
                        b = r;
                    }
                    var res;
                    if (a < 0) {
                        res = [-a, -lastx, -lasty];
                    }
                    else {
                        res = [a, a ? lastx : 0, lasty];
                    }
                    return (config.matrix === 'Array') ? res : matrix(res);
                }
                function _xgcdBigNumber(a, b) {
                    var t, q, r, zero = new type.BigNumber(0), one = new type.BigNumber(1), x = zero, lastx = one, y = one, lasty = zero;
                    if (!a.isInt() || !b.isInt()) {
                        throw new Error('Parameters in function xgcd must be integer numbers');
                    }
                    while (!b.isZero()) {
                        q = a.div(b).floor();
                        r = a.mod(b);
                        t = x;
                        x = lastx.minus(q.times(x));
                        lastx = t;
                        t = y;
                        y = lasty.minus(q.times(y));
                        lasty = t;
                        a = b;
                        b = r;
                    }
                    var res;
                    if (a.lt(zero)) {
                        res = [a.neg(), lastx.neg(), lasty.neg()];
                    }
                    else {
                        res = [a, !a.isZero() ? lastx : 0, lasty];
                    }
                    return (config.matrix === 'Array') ? res : matrix(res);
                }
            }
            exports.name = 'xgcd';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            module.exports = [
                __webpack_require__(445),
                __webpack_require__(447),
                __webpack_require__(448),
                __webpack_require__(450),
                __webpack_require__(452),
                __webpack_require__(454),
                __webpack_require__(456)
            ];
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var isInteger = __webpack_require__(3).isInteger;
            var bigBitAnd = __webpack_require__(446);
            function factory(type, config, load, typed) {
                var latex = __webpack_require__(4);
                var matrix = load(__webpack_require__(0));
                var algorithm02 = load(__webpack_require__(24));
                var algorithm06 = load(__webpack_require__(68));
                var algorithm11 = load(__webpack_require__(17));
                var algorithm13 = load(__webpack_require__(8));
                var algorithm14 = load(__webpack_require__(6));
                var bitAnd = typed('bitAnd', {
                    'number, number': function (x, y) {
                        if (!isInteger(x) || !isInteger(y)) {
                            throw new Error('Integers expected in function bitAnd');
                        }
                        return x & y;
                    },
                    'BigNumber, BigNumber': bigBitAnd,
                    'Matrix, Matrix': function (x, y) {
                        var c;
                        switch (x.storage()) {
                            case 'sparse':
                                switch (y.storage()) {
                                    case 'sparse':
                                        c = algorithm06(x, y, bitAnd, false);
                                        break;
                                    default:
                                        c = algorithm02(y, x, bitAnd, true);
                                        break;
                                }
                                break;
                            default:
                                switch (y.storage()) {
                                    case 'sparse':
                                        c = algorithm02(x, y, bitAnd, false);
                                        break;
                                    default:
                                        c = algorithm13(x, y, bitAnd);
                                        break;
                                }
                                break;
                        }
                        return c;
                    },
                    'Array, Array': function (x, y) {
                        return bitAnd(matrix(x), matrix(y)).valueOf();
                    },
                    'Array, Matrix': function (x, y) {
                        return bitAnd(matrix(x), y);
                    },
                    'Matrix, Array': function (x, y) {
                        return bitAnd(x, matrix(y));
                    },
                    'Matrix, any': function (x, y) {
                        var c;
                        switch (x.storage()) {
                            case 'sparse':
                                c = algorithm11(x, y, bitAnd, false);
                                break;
                            default:
                                c = algorithm14(x, y, bitAnd, false);
                                break;
                        }
                        return c;
                    },
                    'any, Matrix': function (x, y) {
                        var c;
                        switch (y.storage()) {
                            case 'sparse':
                                c = algorithm11(y, x, bitAnd, true);
                                break;
                            default:
                                c = algorithm14(y, x, bitAnd, true);
                                break;
                        }
                        return c;
                    },
                    'Array, any': function (x, y) {
                        return algorithm14(matrix(x), y, bitAnd, false).valueOf();
                    },
                    'any, Array': function (x, y) {
                        return algorithm14(matrix(y), x, bitAnd, true).valueOf();
                    }
                });
                bitAnd.toTex = {
                    2: '\\left(${args[0]}' + latex.operators['bitAnd'] + '${args[1]}\\right)'
                };
                return bitAnd;
            }
            exports.name = 'bitAnd';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            var bitwise = __webpack_require__(85);
            module.exports = function bitAnd(x, y) {
                if ((x.isFinite() && !x.isInteger()) || (y.isFinite() && !y.isInteger())) {
                    throw new Error('Integers expected in function bitAnd');
                }
                var BigNumber = x.constructor;
                if (x.isNaN() || y.isNaN()) {
                    return new BigNumber(NaN);
                }
                if (x.isZero() || y.eq(-1) || x.eq(y)) {
                    return x;
                }
                if (y.isZero() || x.eq(-1)) {
                    return y;
                }
                if (!x.isFinite() || !y.isFinite()) {
                    if (!x.isFinite() && !y.isFinite()) {
                        if (x.isNegative() == y.isNegative()) {
                            return x;
                        }
                        return new BigNumber(0);
                    }
                    if (!x.isFinite()) {
                        if (y.isNegative()) {
                            return x;
                        }
                        if (x.isNegative()) {
                            return new BigNumber(0);
                        }
                        return y;
                    }
                    if (!y.isFinite()) {
                        if (x.isNegative()) {
                            return y;
                        }
                        if (y.isNegative()) {
                            return new BigNumber(0);
                        }
                        return x;
                    }
                }
                return bitwise(x, y, function (a, b) { return a & b; });
            };
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            var bigBitNot = __webpack_require__(86);
            var isInteger = __webpack_require__(3).isInteger;
            function factory(type, config, load, typed) {
                var latex = __webpack_require__(4);
                var bitNot = typed('bitNot', {
                    'number': function (x) {
                        if (!isInteger(x)) {
                            throw new Error('Integer expected in function bitNot');
                        }
                        return ~x;
                    },
                    'BigNumber': bigBitNot,
                    'Array | Matrix': function (x) {
                        return deepMap(x, bitNot);
                    }
                });
                bitNot.toTex = {
                    1: latex.operators['bitNot'] + '\\left(${args[0]}\\right)'
                };
                return bitNot;
            }
            exports.name = 'bitNot';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var isInteger = __webpack_require__(3).isInteger;
            var bigBitOr = __webpack_require__(449);
            function factory(type, config, load, typed) {
                var latex = __webpack_require__(4);
                var matrix = load(__webpack_require__(0));
                var algorithm01 = load(__webpack_require__(33));
                var algorithm04 = load(__webpack_require__(73));
                var algorithm10 = load(__webpack_require__(36));
                var algorithm13 = load(__webpack_require__(8));
                var algorithm14 = load(__webpack_require__(6));
                var bitOr = typed('bitOr', {
                    'number, number': function (x, y) {
                        if (!isInteger(x) || !isInteger(y)) {
                            throw new Error('Integers expected in function bitOr');
                        }
                        return x | y;
                    },
                    'BigNumber, BigNumber': bigBitOr,
                    'Matrix, Matrix': function (x, y) {
                        var c;
                        switch (x.storage()) {
                            case 'sparse':
                                switch (y.storage()) {
                                    case 'sparse':
                                        c = algorithm04(x, y, bitOr);
                                        break;
                                    default:
                                        c = algorithm01(y, x, bitOr, true);
                                        break;
                                }
                                break;
                            default:
                                switch (y.storage()) {
                                    case 'sparse':
                                        c = algorithm01(x, y, bitOr, false);
                                        break;
                                    default:
                                        c = algorithm13(x, y, bitOr);
                                        break;
                                }
                                break;
                        }
                        return c;
                    },
                    'Array, Array': function (x, y) {
                        return bitOr(matrix(x), matrix(y)).valueOf();
                    },
                    'Array, Matrix': function (x, y) {
                        return bitOr(matrix(x), y);
                    },
                    'Matrix, Array': function (x, y) {
                        return bitOr(x, matrix(y));
                    },
                    'Matrix, any': function (x, y) {
                        var c;
                        switch (x.storage()) {
                            case 'sparse':
                                c = algorithm10(x, y, bitOr, false);
                                break;
                            default:
                                c = algorithm14(x, y, bitOr, false);
                                break;
                        }
                        return c;
                    },
                    'any, Matrix': function (x, y) {
                        var c;
                        switch (y.storage()) {
                            case 'sparse':
                                c = algorithm10(y, x, bitOr, true);
                                break;
                            default:
                                c = algorithm14(y, x, bitOr, true);
                                break;
                        }
                        return c;
                    },
                    'Array, any': function (x, y) {
                        return algorithm14(matrix(x), y, bitOr, false).valueOf();
                    },
                    'any, Array': function (x, y) {
                        return algorithm14(matrix(y), x, bitOr, true).valueOf();
                    }
                });
                bitOr.toTex = {
                    2: '\\left(${args[0]}' + latex.operators['bitOr'] + '${args[1]}\\right)'
                };
                return bitOr;
            }
            exports.name = 'bitOr';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            var bitwise = __webpack_require__(85);
            module.exports = function bitOr(x, y) {
                if ((x.isFinite() && !x.isInteger()) || (y.isFinite() && !y.isInteger())) {
                    throw new Error('Integers expected in function bitOr');
                }
                var BigNumber = x.constructor;
                if (x.isNaN() || y.isNaN()) {
                    return new BigNumber(NaN);
                }
                var negOne = new BigNumber(-1);
                if (x.isZero() || y.eq(negOne) || x.eq(y)) {
                    return y;
                }
                if (y.isZero() || x.eq(negOne)) {
                    return x;
                }
                if (!x.isFinite() || !y.isFinite()) {
                    if ((!x.isFinite() && !x.isNegative() && y.isNegative()) ||
                        (x.isNegative() && !y.isNegative() && !y.isFinite())) {
                        return negOne;
                    }
                    if (x.isNegative() && y.isNegative()) {
                        return x.isFinite() ? x : y;
                    }
                    return x.isFinite() ? y : x;
                }
                return bitwise(x, y, function (a, b) { return a | b; });
            };
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var isInteger = __webpack_require__(3).isInteger;
            var bigBitXor = __webpack_require__(451);
            function factory(type, config, load, typed) {
                var latex = __webpack_require__(4);
                var matrix = load(__webpack_require__(0));
                var algorithm03 = load(__webpack_require__(15));
                var algorithm07 = load(__webpack_require__(26));
                var algorithm12 = load(__webpack_require__(16));
                var algorithm13 = load(__webpack_require__(8));
                var algorithm14 = load(__webpack_require__(6));
                var bitXor = typed('bitXor', {
                    'number, number': function (x, y) {
                        if (!isInteger(x) || !isInteger(y)) {
                            throw new Error('Integers expected in function bitXor');
                        }
                        return x ^ y;
                    },
                    'BigNumber, BigNumber': bigBitXor,
                    'Matrix, Matrix': function (x, y) {
                        var c;
                        switch (x.storage()) {
                            case 'sparse':
                                switch (y.storage()) {
                                    case 'sparse':
                                        c = algorithm07(x, y, bitXor);
                                        break;
                                    default:
                                        c = algorithm03(y, x, bitXor, true);
                                        break;
                                }
                                break;
                            default:
                                switch (y.storage()) {
                                    case 'sparse':
                                        c = algorithm03(x, y, bitXor, false);
                                        break;
                                    default:
                                        c = algorithm13(x, y, bitXor);
                                        break;
                                }
                                break;
                        }
                        return c;
                    },
                    'Array, Array': function (x, y) {
                        return bitXor(matrix(x), matrix(y)).valueOf();
                    },
                    'Array, Matrix': function (x, y) {
                        return bitXor(matrix(x), y);
                    },
                    'Matrix, Array': function (x, y) {
                        return bitXor(x, matrix(y));
                    },
                    'Matrix, any': function (x, y) {
                        var c;
                        switch (x.storage()) {
                            case 'sparse':
                                c = algorithm12(x, y, bitXor, false);
                                break;
                            default:
                                c = algorithm14(x, y, bitXor, false);
                                break;
                        }
                        return c;
                    },
                    'any, Matrix': function (x, y) {
                        var c;
                        switch (y.storage()) {
                            case 'sparse':
                                c = algorithm12(y, x, bitXor, true);
                                break;
                            default:
                                c = algorithm14(y, x, bitXor, true);
                                break;
                        }
                        return c;
                    },
                    'Array, any': function (x, y) {
                        return algorithm14(matrix(x), y, bitXor, false).valueOf();
                    },
                    'any, Array': function (x, y) {
                        return algorithm14(matrix(y), x, bitXor, true).valueOf();
                    }
                });
                bitXor.toTex = {
                    2: '\\left(${args[0]}' + latex.operators['bitXor'] + '${args[1]}\\right)'
                };
                return bitXor;
            }
            exports.name = 'bitXor';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            var bitwise = __webpack_require__(85);
            var bitNot = __webpack_require__(86);
            module.exports = function bitXor(x, y) {
                if ((x.isFinite() && !x.isInteger()) || (y.isFinite() && !y.isInteger())) {
                    throw new Error('Integers expected in function bitXor');
                }
                var BigNumber = x.constructor;
                if (x.isNaN() || y.isNaN()) {
                    return new BigNumber(NaN);
                }
                if (x.isZero()) {
                    return y;
                }
                if (y.isZero()) {
                    return x;
                }
                if (x.eq(y)) {
                    return new BigNumber(0);
                }
                var negOne = new BigNumber(-1);
                if (x.eq(negOne)) {
                    return bitNot(y);
                }
                if (y.eq(negOne)) {
                    return bitNot(x);
                }
                if (!x.isFinite() || !y.isFinite()) {
                    if (!x.isFinite() && !y.isFinite()) {
                        return negOne;
                    }
                    return new BigNumber(x.isNegative() == y.isNegative()
                        ? Infinity
                        : -Infinity);
                }
                return bitwise(x, y, function (a, b) { return a ^ b; });
            };
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var isInteger = __webpack_require__(3).isInteger;
            var bigLeftShift = __webpack_require__(453);
            function factory(type, config, load, typed) {
                var latex = __webpack_require__(4);
                var matrix = load(__webpack_require__(0));
                var equalScalar = load(__webpack_require__(11));
                var zeros = load(__webpack_require__(38));
                var algorithm01 = load(__webpack_require__(33));
                var algorithm02 = load(__webpack_require__(24));
                var algorithm08 = load(__webpack_require__(87));
                var algorithm10 = load(__webpack_require__(36));
                var algorithm11 = load(__webpack_require__(17));
                var algorithm13 = load(__webpack_require__(8));
                var algorithm14 = load(__webpack_require__(6));
                var leftShift = typed('leftShift', {
                    'number, number': function (x, y) {
                        if (!isInteger(x) || !isInteger(y)) {
                            throw new Error('Integers expected in function leftShift');
                        }
                        return x << y;
                    },
                    'BigNumber, BigNumber': bigLeftShift,
                    'Matrix, Matrix': function (x, y) {
                        var c;
                        switch (x.storage()) {
                            case 'sparse':
                                switch (y.storage()) {
                                    case 'sparse':
                                        c = algorithm08(x, y, leftShift, false);
                                        break;
                                    default:
                                        c = algorithm02(y, x, leftShift, true);
                                        break;
                                }
                                break;
                            default:
                                switch (y.storage()) {
                                    case 'sparse':
                                        c = algorithm01(x, y, leftShift, false);
                                        break;
                                    default:
                                        c = algorithm13(x, y, leftShift);
                                        break;
                                }
                                break;
                        }
                        return c;
                    },
                    'Array, Array': function (x, y) {
                        return leftShift(matrix(x), matrix(y)).valueOf();
                    },
                    'Array, Matrix': function (x, y) {
                        return leftShift(matrix(x), y);
                    },
                    'Matrix, Array': function (x, y) {
                        return leftShift(x, matrix(y));
                    },
                    'Matrix, number | BigNumber': function (x, y) {
                        if (!equalScalar(y, 0)) {
                            var c;
                            switch (x.storage()) {
                                case 'sparse':
                                    c = algorithm11(x, y, leftShift, false);
                                    break;
                                default:
                                    c = algorithm14(x, y, leftShift, false);
                                    break;
                            }
                            return c;
                        }
                        return x.clone();
                    },
                    'number | BigNumber, Matrix': function (x, y) {
                        if (!equalScalar(x, 0)) {
                            var c;
                            switch (y.storage()) {
                                case 'sparse':
                                    c = algorithm10(y, x, leftShift, true);
                                    break;
                                default:
                                    c = algorithm14(y, x, leftShift, true);
                                    break;
                            }
                            return c;
                        }
                        return zeros(y.size(), y.storage());
                    },
                    'Array, number | BigNumber': function (x, y) {
                        return leftShift(matrix(x), y).valueOf();
                    },
                    'number | BigNumber, Array': function (x, y) {
                        return leftShift(x, matrix(y)).valueOf();
                    }
                });
                leftShift.toTex = {
                    2: '\\left(${args[0]}' + latex.operators['leftShift'] + '${args[1]}\\right)'
                };
                return leftShift;
            }
            exports.name = 'leftShift';
            exports.factory = factory;
        }),
        (function (module, exports) {
            module.exports = function leftShift(x, y) {
                if ((x.isFinite() && !x.isInteger()) || (y.isFinite() && !y.isInteger())) {
                    throw new Error('Integers expected in function leftShift');
                }
                var BigNumber = x.constructor;
                if (x.isNaN() || y.isNaN() || (y.isNegative() && !y.isZero())) {
                    return new BigNumber(NaN);
                }
                if (x.isZero() || y.isZero()) {
                    return x;
                }
                if (!x.isFinite() && !y.isFinite()) {
                    return new BigNumber(NaN);
                }
                if (y.lt(55)) {
                    return x.times(Math.pow(2, y.toNumber()) + '');
                }
                return x.times(new BigNumber(2).pow(y));
            };
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var isInteger = __webpack_require__(3).isInteger;
            var bigRightArithShift = __webpack_require__(455);
            function factory(type, config, load, typed) {
                var latex = __webpack_require__(4);
                var matrix = load(__webpack_require__(0));
                var equalScalar = load(__webpack_require__(11));
                var zeros = load(__webpack_require__(38));
                var algorithm01 = load(__webpack_require__(33));
                var algorithm02 = load(__webpack_require__(24));
                var algorithm08 = load(__webpack_require__(87));
                var algorithm10 = load(__webpack_require__(36));
                var algorithm11 = load(__webpack_require__(17));
                var algorithm13 = load(__webpack_require__(8));
                var algorithm14 = load(__webpack_require__(6));
                var rightArithShift = typed('rightArithShift', {
                    'number, number': function (x, y) {
                        if (!isInteger(x) || !isInteger(y)) {
                            throw new Error('Integers expected in function rightArithShift');
                        }
                        return x >> y;
                    },
                    'BigNumber, BigNumber': bigRightArithShift,
                    'Matrix, Matrix': function (x, y) {
                        var c;
                        switch (x.storage()) {
                            case 'sparse':
                                switch (y.storage()) {
                                    case 'sparse':
                                        c = algorithm08(x, y, rightArithShift, false);
                                        break;
                                    default:
                                        c = algorithm02(y, x, rightArithShift, true);
                                        break;
                                }
                                break;
                            default:
                                switch (y.storage()) {
                                    case 'sparse':
                                        c = algorithm01(x, y, rightArithShift, false);
                                        break;
                                    default:
                                        c = algorithm13(x, y, rightArithShift);
                                        break;
                                }
                                break;
                        }
                        return c;
                    },
                    'Array, Array': function (x, y) {
                        return rightArithShift(matrix(x), matrix(y)).valueOf();
                    },
                    'Array, Matrix': function (x, y) {
                        return rightArithShift(matrix(x), y);
                    },
                    'Matrix, Array': function (x, y) {
                        return rightArithShift(x, matrix(y));
                    },
                    'Matrix, number | BigNumber': function (x, y) {
                        if (!equalScalar(y, 0)) {
                            var c;
                            switch (x.storage()) {
                                case 'sparse':
                                    c = algorithm11(x, y, rightArithShift, false);
                                    break;
                                default:
                                    c = algorithm14(x, y, rightArithShift, false);
                                    break;
                            }
                            return c;
                        }
                        return x.clone();
                    },
                    'number | BigNumber, Matrix': function (x, y) {
                        if (!equalScalar(x, 0)) {
                            var c;
                            switch (y.storage()) {
                                case 'sparse':
                                    c = algorithm10(y, x, rightArithShift, true);
                                    break;
                                default:
                                    c = algorithm14(y, x, rightArithShift, true);
                                    break;
                            }
                            return c;
                        }
                        return zeros(y.size(), y.storage());
                    },
                    'Array, number | BigNumber': function (x, y) {
                        return rightArithShift(matrix(x), y).valueOf();
                    },
                    'number | BigNumber, Array': function (x, y) {
                        return rightArithShift(x, matrix(y)).valueOf();
                    }
                });
                rightArithShift.toTex = {
                    2: '\\left(${args[0]}' + latex.operators['rightArithShift'] + '${args[1]}\\right)'
                };
                return rightArithShift;
            }
            exports.name = 'rightArithShift';
            exports.factory = factory;
        }),
        (function (module, exports) {
            module.exports = function rightArithShift(x, y) {
                if ((x.isFinite() && !x.isInteger()) || (y.isFinite() && !y.isInteger())) {
                    throw new Error('Integers expected in function rightArithShift');
                }
                var BigNumber = x.constructor;
                if (x.isNaN() || y.isNaN() || (y.isNegative() && !y.isZero())) {
                    return new BigNumber(NaN);
                }
                if (x.isZero() || y.isZero()) {
                    return x;
                }
                if (!y.isFinite()) {
                    if (x.isNegative()) {
                        return new BigNumber(-1);
                    }
                    if (!x.isFinite()) {
                        return new BigNumber(NaN);
                    }
                    return new BigNumber(0);
                }
                if (y.lt(55)) {
                    return x.div(Math.pow(2, y.toNumber()) + '').floor();
                }
                return x.div(new BigNumber(2).pow(y)).floor();
            };
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var isInteger = __webpack_require__(3).isInteger;
            function factory(type, config, load, typed) {
                var latex = __webpack_require__(4);
                var matrix = load(__webpack_require__(0));
                var equalScalar = load(__webpack_require__(11));
                var zeros = load(__webpack_require__(38));
                var algorithm01 = load(__webpack_require__(33));
                var algorithm02 = load(__webpack_require__(24));
                var algorithm08 = load(__webpack_require__(87));
                var algorithm10 = load(__webpack_require__(36));
                var algorithm11 = load(__webpack_require__(17));
                var algorithm13 = load(__webpack_require__(8));
                var algorithm14 = load(__webpack_require__(6));
                var rightLogShift = typed('rightLogShift', {
                    'number, number': function (x, y) {
                        if (!isInteger(x) || !isInteger(y)) {
                            throw new Error('Integers expected in function rightLogShift');
                        }
                        return x >>> y;
                    },
                    'Matrix, Matrix': function (x, y) {
                        var c;
                        switch (x.storage()) {
                            case 'sparse':
                                switch (y.storage()) {
                                    case 'sparse':
                                        c = algorithm08(x, y, rightLogShift, false);
                                        break;
                                    default:
                                        c = algorithm02(y, x, rightLogShift, true);
                                        break;
                                }
                                break;
                            default:
                                switch (y.storage()) {
                                    case 'sparse':
                                        c = algorithm01(x, y, rightLogShift, false);
                                        break;
                                    default:
                                        c = algorithm13(x, y, rightLogShift);
                                        break;
                                }
                                break;
                        }
                        return c;
                    },
                    'Array, Array': function (x, y) {
                        return rightLogShift(matrix(x), matrix(y)).valueOf();
                    },
                    'Array, Matrix': function (x, y) {
                        return rightLogShift(matrix(x), y);
                    },
                    'Matrix, Array': function (x, y) {
                        return rightLogShift(x, matrix(y));
                    },
                    'Matrix, number | BigNumber': function (x, y) {
                        if (!equalScalar(y, 0)) {
                            var c;
                            switch (x.storage()) {
                                case 'sparse':
                                    c = algorithm11(x, y, rightLogShift, false);
                                    break;
                                default:
                                    c = algorithm14(x, y, rightLogShift, false);
                                    break;
                            }
                            return c;
                        }
                        return x.clone();
                    },
                    'number | BigNumber, Matrix': function (x, y) {
                        if (!equalScalar(x, 0)) {
                            var c;
                            switch (y.storage()) {
                                case 'sparse':
                                    c = algorithm10(y, x, rightLogShift, true);
                                    break;
                                default:
                                    c = algorithm14(y, x, rightLogShift, true);
                                    break;
                            }
                            return c;
                        }
                        return zeros(y.size(), y.storage());
                    },
                    'Array, number | BigNumber': function (x, y) {
                        return rightLogShift(matrix(x), y).valueOf();
                    },
                    'number | BigNumber, Array': function (x, y) {
                        return rightLogShift(x, matrix(y)).valueOf();
                    }
                });
                rightLogShift.toTex = {
                    2: '\\left(${args[0]}' + latex.operators['rightLogShift'] + '${args[1]}\\right)'
                };
                return rightLogShift;
            }
            exports.name = 'rightLogShift';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            module.exports = [
                __webpack_require__(458),
                __webpack_require__(459),
                __webpack_require__(136),
                __webpack_require__(460)
            ];
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load, typed) {
                var add = load(__webpack_require__(18));
                var stirlingS2 = load(__webpack_require__(136));
                var isNegative = load(__webpack_require__(57));
                var isInteger = load(__webpack_require__(48));
                var bellNumbers = typed('bellNumbers', {
                    'number | BigNumber': function (n) {
                        if (!isInteger(n) || isNegative(n)) {
                            throw new TypeError('Non-negative integer value expected in function bellNumbers');
                        }
                        var result = 0;
                        for (var i = 0; i <= n; i++) {
                            result = add(result, stirlingS2(n, i));
                        }
                        return result;
                    }
                });
                bellNumbers.toTex = { 1: '\\mathrm{B}_{${args[0]}}' };
                return bellNumbers;
            }
            exports.name = 'bellNumbers';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load, typed) {
                var combinations = load(__webpack_require__(70));
                var add = load(__webpack_require__(20));
                var isPositive = load(__webpack_require__(55));
                var isInteger = load(__webpack_require__(48));
                var larger = load(__webpack_require__(34));
                var composition = typed('composition', {
                    'number | BigNumber, number | BigNumber': function (n, k) {
                        if (!isInteger(n) || !isPositive(n) || !isInteger(k) || !isPositive(k)) {
                            throw new TypeError('Positive integer value expected in function composition');
                        }
                        else if (larger(k, n)) {
                            throw new TypeError('k must be less than or equal to n in function composition');
                        }
                        return combinations(add(n, -1), add(k, -1));
                    }
                });
                composition.toTex = undefined;
                return composition;
            }
            exports.name = 'composition';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load, typed) {
                var add = load(__webpack_require__(18));
                var divide = load(__webpack_require__(47));
                var multiply = load(__webpack_require__(12));
                var combinations = load(__webpack_require__(70));
                var isNegative = load(__webpack_require__(57));
                var isInteger = load(__webpack_require__(48));
                var catalan = typed('catalan', {
                    'number | BigNumber': function (n) {
                        if (!isInteger(n) || isNegative(n)) {
                            throw new TypeError('Non-negative integer value expected in function catalan');
                        }
                        return divide(combinations(multiply(n, 2), n), add(n, 1));
                    }
                });
                catalan.toTex = { 1: '\\mathrm{C}_{${args[0]}}' };
                return catalan;
            }
            exports.name = 'catalan';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            module.exports = [
                __webpack_require__(462),
                __webpack_require__(123),
                __webpack_require__(463),
                __webpack_require__(464)
            ];
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            function factory(type, config, load, typed) {
                var arg = typed('arg', {
                    'number': function (x) {
                        return Math.atan2(0, x);
                    },
                    'BigNumber': function (x) {
                        return type.BigNumber.atan2(0, x);
                    },
                    'Complex': function (x) {
                        return x.arg();
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, arg);
                    }
                });
                arg.toTex = { 1: '\\arg\\left(${args[0]}\\right)' };
                return arg;
            }
            exports.name = 'arg';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            function factory(type, config, load, typed) {
                var im = typed('im', {
                    'number': function (x) {
                        return 0;
                    },
                    'BigNumber': function (x) {
                        return new type.BigNumber(0);
                    },
                    'Complex': function (x) {
                        return x.im;
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, im);
                    }
                });
                im.toTex = { 1: '\\Im\\left\\lbrace${args[0]}\\right\\rbrace' };
                return im;
            }
            exports.name = 'im';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            function factory(type, config, load, typed) {
                var re = typed('re', {
                    'number': function (x) {
                        return x;
                    },
                    'BigNumber': function (x) {
                        return x;
                    },
                    'Complex': function (x) {
                        return x.re;
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, re);
                    }
                });
                re.toTex = { 1: '\\Re\\left\\lbrace${args[0]}\\right\\rbrace' };
                return re;
            }
            exports.name = 're';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            module.exports = [
                __webpack_require__(466),
                __webpack_require__(467)
            ];
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load, typed) {
                var abs = load(__webpack_require__(29));
                var add = load(__webpack_require__(18));
                var matrix = load(__webpack_require__(0));
                var multiply = load(__webpack_require__(12));
                var subtract = load(__webpack_require__(21));
                var intersect = typed('intersect', {
                    'Array, Array, Array': function (x, y, plane) {
                        if (!_3d(x)) {
                            throw new TypeError('Array with 3 numbers expected for first argument');
                        }
                        if (!_3d(y)) {
                            throw new TypeError('Array with 3 numbers expected for second argument');
                        }
                        if (!_4d(plane)) {
                            throw new TypeError('Array with 4 numbers expected as third argument');
                        }
                        return _intersectLinePlane(x[0], x[1], x[2], y[0], y[1], y[2], plane[0], plane[1], plane[2], plane[3]);
                    },
                    'Array, Array, Array, Array': function (w, x, y, z) {
                        if (w.length === 2) {
                            if (!_2d(w)) {
                                throw new TypeError('Array with 2 numbers expected for first argument');
                            }
                            if (!_2d(x)) {
                                throw new TypeError('Array with 2 numbers expected for second argument');
                            }
                            if (!_2d(y)) {
                                throw new TypeError('Array with 2 numbers expected for third argument');
                            }
                            if (!_2d(z)) {
                                throw new TypeError('Array with 2 numbers expected for fourth argument');
                            }
                            return _intersect2d(w, x, y, z);
                        }
                        else if (w.length === 3) {
                            if (!_3d(w)) {
                                throw new TypeError('Array with 3 numbers expected for first argument');
                            }
                            if (!_3d(x)) {
                                throw new TypeError('Array with 3 numbers expected for second argument');
                            }
                            if (!_3d(y)) {
                                throw new TypeError('Array with 3 numbers expected for third argument');
                            }
                            if (!_3d(z)) {
                                throw new TypeError('Array with 3 numbers expected for fourth argument');
                            }
                            return _intersect3d(w[0], w[1], w[2], x[0], x[1], x[2], y[0], y[1], y[2], z[0], z[1], z[2]);
                        }
                        else {
                            throw new TypeError('Arrays with two or thee dimensional points expected');
                        }
                    },
                    'Matrix, Matrix, Matrix': function (x, y, plane) {
                        return matrix(intersect(x.valueOf(), y.valueOf(), plane.valueOf()));
                    },
                    'Matrix, Matrix, Matrix, Matrix': function (w, x, y, z) {
                        return matrix(intersect(w.valueOf(), x.valueOf(), y.valueOf(), z.valueOf()));
                    }
                });
                function _2d(x) {
                    return x.length === 2 && typeof x[0] === 'number' && typeof x[1] === 'number';
                }
                function _3d(x) {
                    return x.length === 3 && typeof x[0] === 'number' && typeof x[1] === 'number' && typeof x[2] === 'number';
                }
                function _4d(x) {
                    return x.length === 4 && typeof x[0] === 'number' && typeof x[1] === 'number' && typeof x[2] === 'number' && typeof x[3] === 'number';
                }
                function _intersect2d(p1a, p1b, p2a, p2b) {
                    var o1 = p1a;
                    var o2 = p2a;
                    var d1 = subtract(o1, p1b);
                    var d2 = subtract(o2, p2b);
                    var det = d1[0] * d2[1] - d2[0] * d1[1];
                    if (abs(det) < config.epsilon) {
                        return null;
                    }
                    var t = (d2[0] * o1[1] - d2[1] * o1[0] - d2[0] * o2[1] + d2[1] * o2[0]) / det;
                    return add(multiply(d1, t), o1);
                }
                function _intersect3d(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4) {
                    var d1343 = (x1 - x3) * (x4 - x3) + (y1 - y3) * (y4 - y3) + (z1 - z3) * (z4 - z3);
                    var d4321 = (x4 - x3) * (x2 - x1) + (y4 - y3) * (y2 - y1) + (z4 - z3) * (z2 - z1);
                    var d1321 = (x1 - x3) * (x2 - x1) + (y1 - y3) * (y2 - y1) + (z1 - z3) * (z2 - z1);
                    var d4343 = (x4 - x3) * (x4 - x3) + (y4 - y3) * (y4 - y3) + (z4 - z3) * (z4 - z3);
                    var d2121 = (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1) + (z2 - z1) * (z2 - z1);
                    var ta = (d1343 * d4321 - d1321 * d4343) / (d2121 * d4343 - d4321 * d4321);
                    var tb = (d1343 + ta * d4321) / (d4343);
                    var pax = x1 + ta * (x2 - x1);
                    var pay = y1 + ta * (y2 - y1);
                    var paz = z1 + ta * (z2 - z1);
                    var pbx = x3 + tb * (x4 - x3);
                    var pby = y3 + tb * (y4 - y3);
                    var pbz = z3 + tb * (z4 - z3);
                    if (pax === pbx && pay === pby && paz === pbz) {
                        return [pax, pay, paz];
                    }
                    else {
                        return null;
                    }
                }
                function _intersectLinePlane(x1, y1, z1, x2, y2, z2, x, y, z, c) {
                    var t = (c - x1 * x - y1 * y - z1 * z) / (x2 * x + y2 * y + z2 * z - x1 * x - y1 * y - z1 * z);
                    var px = x1 + t * (x2 - x1);
                    var py = y1 + t * (y2 - y1);
                    var pz = z1 + t * (z2 - z1);
                    return [px, py, pz];
                }
                return intersect;
            }
            exports.name = 'intersect';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load, typed) {
                var matrix = load(__webpack_require__(0));
                var distance = typed('distance', {
                    'Array, Array, Array': function (x, y, z) {
                        if (x.length == 2 && y.length == 2 && z.length == 2) {
                            if (!_2d(x)) {
                                throw new TypeError('Array with 2 numbers expected for first argument');
                            }
                            if (!_2d(y)) {
                                throw new TypeError('Array with 2 numbers expected for second argument');
                            }
                            if (!_2d(z)) {
                                throw new TypeError('Array with 2 numbers expected for third argument');
                            }
                            var m = (z[1] - z[0]) / (y[1] - y[0]);
                            var xCoeff = m * m * y[0];
                            var yCoeff = -1 * (m * y[0]);
                            var constant = x[1];
                            return _distancePointLine2D(x[0], x[1], xCoeff, yCoeff, constant);
                        }
                        else {
                            throw new TypeError('Invalid Arguments: Try again');
                        }
                    },
                    'Object, Object, Object': function (x, y, z) {
                        if (Object.keys(x).length == 2 && Object.keys(y).length == 2 && Object.keys(z).length == 2) {
                            if (!_2d(x)) {
                                throw new TypeError('Values of pointX and pointY should be numbers');
                            }
                            if (!_2d(y)) {
                                throw new TypeError('Values of lineOnePtX and lineOnePtY should be numbers');
                            }
                            if (!_2d(z)) {
                                throw new TypeError('Values of lineTwoPtX and lineTwoPtY should be numbers');
                            }
                            if (x.hasOwnProperty('pointX') && x.hasOwnProperty('pointY') && y.hasOwnProperty('lineOnePtX') &&
                                y.hasOwnProperty('lineOnePtY') && z.hasOwnProperty('lineTwoPtX') && z.hasOwnProperty('lineTwoPtY')) {
                                var m = (z.lineTwoPtY - z.lineTwoPtX) / (y.lineOnePtY - y.lineOnePtX);
                                var xCoeff = m * m * y.lineOnePtX;
                                var yCoeff = -1 * (m * y.lineOnePtX);
                                var constant = x.pointX;
                                return _distancePointLine2D(x.pointX, x.pointY, xCoeff, yCoeff, constant);
                            }
                            else {
                                throw new TypeError('Key names do not match');
                            }
                        }
                        else {
                            throw new TypeError('Invalid Arguments: Try again');
                        }
                    },
                    'Array, Array': function (x, y) {
                        if (x.length == 2 && y.length == 3) {
                            if (!_2d(x)) {
                                throw new TypeError('Array with 2 numbers expected for first argument');
                            }
                            if (!_3d(y)) {
                                throw new TypeError('Array with 3 numbers expected for second argument');
                            }
                            return _distancePointLine2D(x[0], x[1], y[0], y[1], y[2]);
                        }
                        else if (x.length == 3 && y.length == 6) {
                            if (!_3d(x)) {
                                throw new TypeError('Array with 3 numbers expected for first argument');
                            }
                            if (!_parametricLine(y)) {
                                throw new TypeError('Array with 6 numbers expected for second argument');
                            }
                            return _distancePointLine3D(x[0], x[1], x[2], y[0], y[1], y[2], y[3], y[4], y[5]);
                        }
                        else if (x.length == 2 && y.length == 2) {
                            if (!_2d(x)) {
                                throw new TypeError('Array with 2 numbers expected for first argument');
                            }
                            if (!_2d(y)) {
                                throw new TypeError('Array with 2 numbers expected for second argument');
                            }
                            return _distance2d(x[0], x[1], y[0], y[1]);
                        }
                        else if (x.length == 3 && y.length == 3) {
                            if (!_3d(x)) {
                                throw new TypeError('Array with 3 numbers expected for first argument');
                            }
                            if (!_3d(y)) {
                                throw new TypeError('Array with 3 numbers expected for second argument');
                            }
                            return _distance3d(x[0], x[1], x[2], y[0], y[1], y[2]);
                        }
                        else {
                            throw new TypeError('Invalid Arguments: Try again');
                        }
                    },
                    'Object, Object': function (x, y) {
                        if (Object.keys(x).length == 2 && Object.keys(y).length == 3) {
                            if (!_2d(x)) {
                                throw new TypeError('Values of pointX and pointY should be numbers');
                            }
                            if (!_3d(y)) {
                                throw new TypeError('Values of xCoeffLine, yCoeffLine and constant should be numbers');
                            }
                            if (x.hasOwnProperty('pointX') && x.hasOwnProperty('pointY') && y.hasOwnProperty('xCoeffLine') &&
                                y.hasOwnProperty('yCoeffLine') && y.hasOwnProperty('yCoeffLine')) {
                                return _distancePointLine2D(x.pointX, x.pointY, y.xCoeffLine, y.yCoeffLine, y.constant);
                            }
                            else {
                                throw new TypeError('Key names do not match');
                            }
                        }
                        else if (Object.keys(x).length == 3 && Object.keys(y).length == 6) {
                            if (!_3d(x)) {
                                throw new TypeError('Values of pointX, pointY and pointZ should be numbers');
                            }
                            if (!_parametricLine(y)) {
                                throw new TypeError('Values of x0, y0, z0, a, b and c should be numbers');
                            }
                            if (x.hasOwnProperty('pointX') && x.hasOwnProperty('pointY') && y.hasOwnProperty('x0') &&
                                y.hasOwnProperty('y0') && y.hasOwnProperty('z0') && y.hasOwnProperty('a') &&
                                y.hasOwnProperty('b') && y.hasOwnProperty('c')) {
                                return _distancePointLine3D(x.pointX, x.pointY, x.pointZ, y.x0, y.y0, y.z0, y.a, y.b, y.c);
                            }
                            else {
                                throw new TypeError('Key names do not match');
                            }
                        }
                        else if (Object.keys(x).length == 2 && Object.keys(y).length == 2) {
                            if (!_2d(x)) {
                                throw new TypeError('Values of pointOneX and pointOneY should be numbers');
                            }
                            if (!_2d(y)) {
                                throw new TypeError('Values of pointTwoX and pointTwoY should be numbers');
                            }
                            if (x.hasOwnProperty('pointOneX') && x.hasOwnProperty('pointOneY') &&
                                y.hasOwnProperty('pointTwoX') && y.hasOwnProperty('pointTwoY')) {
                                return _distance2d(x.pointOneX, x.pointOneY, y.pointTwoX, y.pointTwoY);
                            }
                            else {
                                throw new TypeError('Key names do not match');
                            }
                        }
                        else if (Object.keys(x).length == 3 && Object.keys(y).length == 3) {
                            if (!_3d(x)) {
                                throw new TypeError('Values of pointOneX, pointOneY and pointOneZ should be numbers');
                            }
                            if (!_3d(y)) {
                                throw new TypeError('Values of pointTwoX, pointTwoY and pointTwoZ should be numbers');
                            }
                            if (x.hasOwnProperty('pointOneX') && x.hasOwnProperty('pointOneY') && x.hasOwnProperty('pointOneZ') &&
                                y.hasOwnProperty('pointTwoX') && y.hasOwnProperty('pointTwoY') && y.hasOwnProperty('pointTwoZ')) {
                                return _distance3d(x.pointOneX, x.pointOneY, x.pointOneZ, y.pointTwoX, y.pointTwoY, y.pointTwoZ);
                            }
                            else {
                                throw new TypeError('Key names do not match');
                            }
                        }
                        else {
                            throw new TypeError('Invalid Arguments: Try again');
                        }
                    },
                    'Array': function (arr) {
                        if (!_pairwise(arr)) {
                            throw new TypeError('Incorrect array format entered for pairwise distance calculation');
                        }
                        return _distancePairwise(arr);
                    }
                });
                return distance;
            }
            function _2d(a) {
                if (a.constructor !== Array) {
                    a = _objectToArray(a);
                }
                return typeof a[0] === 'number' && typeof a[1] === 'number';
            }
            function _3d(a) {
                if (a.constructor !== Array) {
                    a = _objectToArray(a);
                }
                return typeof a[0] === 'number' && typeof a[1] === 'number' && typeof a[2] === 'number';
            }
            function _parametricLine(a) {
                if (a.constructor !== Array) {
                    a = _objectToArray(a);
                }
                return typeof a[0] === 'number' && typeof a[1] === 'number' && typeof a[2] === 'number' &&
                    typeof a[3] === 'number' && typeof a[4] === 'number' && typeof a[5] === 'number';
            }
            function _objectToArray(o) {
                var keys = Object.keys(o);
                var a = [];
                for (var i = 0; i < keys.length; i++) {
                    a.push(o[keys[i]]);
                }
                return a;
            }
            function _pairwise(a) {
                if (a[0].length == 2 && typeof a[0][0] === 'number' && typeof a[0][1] === 'number') {
                    for (var i in a) {
                        if (a[i].length != 2 || typeof a[i][0] !== 'number' || typeof a[i][1] !== 'number') {
                            return false;
                        }
                    }
                }
                else if (a[0].length == 3 && typeof a[0][0] === 'number' && typeof a[0][1] === 'number' && typeof a[0][2] === 'number') {
                    for (var i in a) {
                        if (a[i].length != 3 || typeof a[i][0] !== 'number' || typeof a[i][1] !== 'number' || typeof a[i][2] !== 'number') {
                            return false;
                        }
                    }
                }
                else {
                    return false;
                }
                return true;
            }
            function _distancePointLine2D(x, y, a, b, c) {
                var num = Math.abs(a * x + b * y + c);
                var den = Math.pow((a * a + b * b), 0.5);
                var result = (num / den);
                return result;
            }
            function _distancePointLine3D(x, y, z, x0, y0, z0, a, b, c) {
                var num = [((y0 - y) * (c)) - ((z0 - z) * (b)), ((z0 - z) * (a)) - ((x0 - x) * (c)), ((x0 - x) * (b)) - ((y0 - y) * (a))];
                num = Math.pow(num[0] * num[0] + num[1] * num[1] + num[2] * num[2], 0.5);
                var den = Math.pow(a * a + b * b + c * c, 0.5);
                var result = num / den;
                return result;
            }
            function _distance2d(x1, y1, x2, y2) {
                var yDiff = y2 - y1;
                var xDiff = x2 - x1;
                var radicant = yDiff * yDiff + xDiff * xDiff;
                var result = Math.pow(radicant, 0.5);
                return result;
            }
            function _distance3d(x1, y1, z1, x2, y2, z2) {
                var zDiff = z2 - z1;
                var yDiff = y2 - y1;
                var xDiff = x2 - x1;
                var radicant = zDiff * zDiff + yDiff * yDiff + xDiff * xDiff;
                var result = Math.pow(radicant, 0.5);
                return result;
            }
            function _distancePairwise(a) {
                var result = [];
                for (var i = 0; i < a.length - 1; i++) {
                    for (var j = i + 1; j < a.length; j++) {
                        if (a[0].length == 2) {
                            result.push(_distance2d(a[i][0], a[i][1], a[j][0], a[j][1]));
                        }
                        else if (a[0].length == 3) {
                            result.push(_distance3d(a[i][0], a[i][1], a[i][2], a[j][0], a[j][1], a[j][2]));
                        }
                    }
                }
                return result;
            }
            exports.name = 'distance';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            module.exports = [
                __webpack_require__(469),
                __webpack_require__(138),
                __webpack_require__(470),
                __webpack_require__(471)
            ];
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load, typed) {
                var latex = __webpack_require__(4);
                var matrix = load(__webpack_require__(0));
                var zeros = load(__webpack_require__(38));
                var not = load(__webpack_require__(138));
                var isZero = load(__webpack_require__(82));
                var algorithm02 = load(__webpack_require__(24));
                var algorithm06 = load(__webpack_require__(68));
                var algorithm11 = load(__webpack_require__(17));
                var algorithm13 = load(__webpack_require__(8));
                var algorithm14 = load(__webpack_require__(6));
                var and = typed('and', {
                    'number, number': function (x, y) {
                        return !!(x && y);
                    },
                    'Complex, Complex': function (x, y) {
                        return (x.re !== 0 || x.im !== 0) && (y.re !== 0 || y.im !== 0);
                    },
                    'BigNumber, BigNumber': function (x, y) {
                        return !x.isZero() && !y.isZero() && !x.isNaN() && !y.isNaN();
                    },
                    'Unit, Unit': function (x, y) {
                        return and(x.value, y.value);
                    },
                    'Matrix, Matrix': function (x, y) {
                        var c;
                        switch (x.storage()) {
                            case 'sparse':
                                switch (y.storage()) {
                                    case 'sparse':
                                        c = algorithm06(x, y, and, false);
                                        break;
                                    default:
                                        c = algorithm02(y, x, and, true);
                                        break;
                                }
                                break;
                            default:
                                switch (y.storage()) {
                                    case 'sparse':
                                        c = algorithm02(x, y, and, false);
                                        break;
                                    default:
                                        c = algorithm13(x, y, and);
                                        break;
                                }
                                break;
                        }
                        return c;
                    },
                    'Array, Array': function (x, y) {
                        return and(matrix(x), matrix(y)).valueOf();
                    },
                    'Array, Matrix': function (x, y) {
                        return and(matrix(x), y);
                    },
                    'Matrix, Array': function (x, y) {
                        return and(x, matrix(y));
                    },
                    'Matrix, any': function (x, y) {
                        if (not(y)) {
                            return zeros(x.size(), x.storage());
                        }
                        var c;
                        switch (x.storage()) {
                            case 'sparse':
                                c = algorithm11(x, y, and, false);
                                break;
                            default:
                                c = algorithm14(x, y, and, false);
                                break;
                        }
                        return c;
                    },
                    'any, Matrix': function (x, y) {
                        if (not(x)) {
                            return zeros(x.size(), x.storage());
                        }
                        var c;
                        switch (y.storage()) {
                            case 'sparse':
                                c = algorithm11(y, x, and, true);
                                break;
                            default:
                                c = algorithm14(y, x, and, true);
                                break;
                        }
                        return c;
                    },
                    'Array, any': function (x, y) {
                        return and(matrix(x), y).valueOf();
                    },
                    'any, Array': function (x, y) {
                        return and(x, matrix(y)).valueOf();
                    }
                });
                and.toTex = {
                    2: '\\left(${args[0]}' + latex.operators['and'] + '${args[1]}\\right)'
                };
                return and;
            }
            exports.name = 'and';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load, typed) {
                var latex = __webpack_require__(4);
                var matrix = load(__webpack_require__(0));
                var algorithm03 = load(__webpack_require__(15));
                var algorithm05 = load(__webpack_require__(60));
                var algorithm12 = load(__webpack_require__(16));
                var algorithm13 = load(__webpack_require__(8));
                var algorithm14 = load(__webpack_require__(6));
                var or = typed('or', {
                    'number, number': function (x, y) {
                        return !!(x || y);
                    },
                    'Complex, Complex': function (x, y) {
                        return (x.re !== 0 || x.im !== 0) || (y.re !== 0 || y.im !== 0);
                    },
                    'BigNumber, BigNumber': function (x, y) {
                        return (!x.isZero() && !x.isNaN()) || (!y.isZero() && !y.isNaN());
                    },
                    'Unit, Unit': function (x, y) {
                        return or(x.value, y.value);
                    },
                    'Matrix, Matrix': function (x, y) {
                        var c;
                        switch (x.storage()) {
                            case 'sparse':
                                switch (y.storage()) {
                                    case 'sparse':
                                        c = algorithm05(x, y, or);
                                        break;
                                    default:
                                        c = algorithm03(y, x, or, true);
                                        break;
                                }
                                break;
                            default:
                                switch (y.storage()) {
                                    case 'sparse':
                                        c = algorithm03(x, y, or, false);
                                        break;
                                    default:
                                        c = algorithm13(x, y, or);
                                        break;
                                }
                                break;
                        }
                        return c;
                    },
                    'Array, Array': function (x, y) {
                        return or(matrix(x), matrix(y)).valueOf();
                    },
                    'Array, Matrix': function (x, y) {
                        return or(matrix(x), y);
                    },
                    'Matrix, Array': function (x, y) {
                        return or(x, matrix(y));
                    },
                    'Matrix, any': function (x, y) {
                        var c;
                        switch (x.storage()) {
                            case 'sparse':
                                c = algorithm12(x, y, or, false);
                                break;
                            default:
                                c = algorithm14(x, y, or, false);
                                break;
                        }
                        return c;
                    },
                    'any, Matrix': function (x, y) {
                        var c;
                        switch (y.storage()) {
                            case 'sparse':
                                c = algorithm12(y, x, or, true);
                                break;
                            default:
                                c = algorithm14(y, x, or, true);
                                break;
                        }
                        return c;
                    },
                    'Array, any': function (x, y) {
                        return algorithm14(matrix(x), y, or, false).valueOf();
                    },
                    'any, Array': function (x, y) {
                        return algorithm14(matrix(y), x, or, true).valueOf();
                    }
                });
                or.toTex = {
                    2: '\\left(${args[0]}' + latex.operators['or'] + '${args[1]}\\right)'
                };
                return or;
            }
            exports.name = 'or';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load, typed) {
                var latex = __webpack_require__(4);
                var matrix = load(__webpack_require__(0));
                var algorithm03 = load(__webpack_require__(15));
                var algorithm07 = load(__webpack_require__(26));
                var algorithm12 = load(__webpack_require__(16));
                var algorithm13 = load(__webpack_require__(8));
                var algorithm14 = load(__webpack_require__(6));
                var xor = typed('xor', {
                    'number, number': function (x, y) {
                        return !!x !== !!y;
                    },
                    'Complex, Complex': function (x, y) {
                        return ((x.re !== 0 || x.im !== 0) !== (y.re !== 0 || y.im !== 0));
                    },
                    'BigNumber, BigNumber': function (x, y) {
                        return ((!x.isZero() && !x.isNaN()) !== (!y.isZero() && !y.isNaN()));
                    },
                    'Unit, Unit': function (x, y) {
                        return xor(x.value, y.value);
                    },
                    'Matrix, Matrix': function (x, y) {
                        var c;
                        switch (x.storage()) {
                            case 'sparse':
                                switch (y.storage()) {
                                    case 'sparse':
                                        c = algorithm07(x, y, xor);
                                        break;
                                    default:
                                        c = algorithm03(y, x, xor, true);
                                        break;
                                }
                                break;
                            default:
                                switch (y.storage()) {
                                    case 'sparse':
                                        c = algorithm03(x, y, xor, false);
                                        break;
                                    default:
                                        c = algorithm13(x, y, xor);
                                        break;
                                }
                                break;
                        }
                        return c;
                    },
                    'Array, Array': function (x, y) {
                        return xor(matrix(x), matrix(y)).valueOf();
                    },
                    'Array, Matrix': function (x, y) {
                        return xor(matrix(x), y);
                    },
                    'Matrix, Array': function (x, y) {
                        return xor(x, matrix(y));
                    },
                    'Matrix, any': function (x, y) {
                        var c;
                        switch (x.storage()) {
                            case 'sparse':
                                c = algorithm12(x, y, xor, false);
                                break;
                            default:
                                c = algorithm14(x, y, xor, false);
                                break;
                        }
                        return c;
                    },
                    'any, Matrix': function (x, y) {
                        var c;
                        switch (y.storage()) {
                            case 'sparse':
                                c = algorithm12(y, x, xor, true);
                                break;
                            default:
                                c = algorithm14(y, x, xor, true);
                                break;
                        }
                        return c;
                    },
                    'Array, any': function (x, y) {
                        return algorithm14(matrix(x), y, xor, false).valueOf();
                    },
                    'any, Array': function (x, y) {
                        return algorithm14(matrix(y), x, xor, true).valueOf();
                    }
                });
                xor.toTex = {
                    2: '\\left(${args[0]}' + latex.operators['xor'] + '${args[1]}\\right)'
                };
                return xor;
            }
            exports.name = 'xor';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            module.exports = [
                __webpack_require__(64),
                __webpack_require__(473),
                __webpack_require__(115),
                __webpack_require__(474),
                __webpack_require__(475),
                __webpack_require__(61),
                __webpack_require__(476),
                __webpack_require__(477),
                __webpack_require__(478),
                __webpack_require__(114),
                __webpack_require__(479),
                __webpack_require__(139),
                __webpack_require__(480),
                __webpack_require__(88),
                __webpack_require__(117),
                __webpack_require__(481),
                __webpack_require__(482),
                __webpack_require__(28),
                __webpack_require__(140),
                __webpack_require__(484),
                __webpack_require__(22),
                __webpack_require__(135),
                __webpack_require__(67),
                __webpack_require__(38)
            ];
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var array = __webpack_require__(2);
            function factory(type, config, load, typed) {
                var matrix = load(__webpack_require__(0));
                var subtract = load(__webpack_require__(21));
                var multiply = load(__webpack_require__(12));
                var cross = typed('cross', {
                    'Matrix, Matrix': function (x, y) {
                        return matrix(_cross(x.toArray(), y.toArray()));
                    },
                    'Matrix, Array': function (x, y) {
                        return matrix(_cross(x.toArray(), y));
                    },
                    'Array, Matrix': function (x, y) {
                        return matrix(_cross(x, y.toArray()));
                    },
                    'Array, Array': _cross
                });
                cross.toTex = {
                    2: '\\left(${args[0]}\\right)\\times\\left(${args[1]}\\right)'
                };
                return cross;
                function _cross(x, y) {
                    var highestDimension = Math.max(array.size(x).length, array.size(y).length);
                    x = array.squeeze(x);
                    y = array.squeeze(y);
                    var xSize = array.size(x);
                    var ySize = array.size(y);
                    if (xSize.length != 1 || ySize.length != 1 || xSize[0] != 3 || ySize[0] != 3) {
                        throw new RangeError('Vectors with length 3 expected ' +
                            '(Size A = [' + xSize.join(', ') + '], B = [' + ySize.join(', ') + '])');
                    }
                    var product = [
                        subtract(multiply(x[1], y[2]), multiply(x[2], y[1])),
                        subtract(multiply(x[2], y[0]), multiply(x[0], y[2])),
                        subtract(multiply(x[0], y[1]), multiply(x[1], y[0]))
                    ];
                    if (highestDimension > 1) {
                        return [product];
                    }
                    else {
                        return product;
                    }
                }
            }
            exports.name = 'cross';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var array = __webpack_require__(2);
            var clone = __webpack_require__(5).clone;
            var isInteger = __webpack_require__(3).isInteger;
            function factory(type, config, load, typed) {
                var matrix = load(__webpack_require__(0));
                var diag = typed('diag', {
                    'Array': function (x) {
                        return _diag(x, 0, array.size(x), null);
                    },
                    'Array, number': function (x, k) {
                        return _diag(x, k, array.size(x), null);
                    },
                    'Array, BigNumber': function (x, k) {
                        return _diag(x, k.toNumber(), array.size(x), null);
                    },
                    'Array, string': function (x, format) {
                        return _diag(x, 0, array.size(x), format);
                    },
                    'Array, number, string': function (x, k, format) {
                        return _diag(x, k, array.size(x), format);
                    },
                    'Array, BigNumber, string': function (x, k, format) {
                        return _diag(x, k.toNumber(), array.size(x), format);
                    },
                    'Matrix': function (x) {
                        return _diag(x, 0, x.size(), x.storage());
                    },
                    'Matrix, number': function (x, k) {
                        return _diag(x, k, x.size(), x.storage());
                    },
                    'Matrix, BigNumber': function (x, k) {
                        return _diag(x, k.toNumber(), x.size(), x.storage());
                    },
                    'Matrix, string': function (x, format) {
                        return _diag(x, 0, x.size(), format);
                    },
                    'Matrix, number, string': function (x, k, format) {
                        return _diag(x, k, x.size(), format);
                    },
                    'Matrix, BigNumber, string': function (x, k, format) {
                        return _diag(x, k.toNumber(), x.size(), format);
                    }
                });
                diag.toTex = undefined;
                return diag;
                function _diag(x, k, size, format) {
                    if (!isInteger(k)) {
                        throw new TypeError('Second parameter in function diag must be an integer');
                    }
                    var kSuper = k > 0 ? k : 0;
                    var kSub = k < 0 ? -k : 0;
                    switch (size.length) {
                        case 1:
                            return _createDiagonalMatrix(x, k, format, size[0], kSub, kSuper);
                        case 2:
                            return _getDiagonal(x, k, format, size, kSub, kSuper);
                    }
                    throw new RangeError('Matrix for function diag must be 2 dimensional');
                }
                function _createDiagonalMatrix(x, k, format, l, kSub, kSuper) {
                    var ms = [l + kSub, l + kSuper];
                    var F = type.Matrix.storage(format || 'dense');
                    var m = F.diagonal(ms, x, k);
                    return format !== null ? m : m.valueOf();
                }
                function _getDiagonal(x, k, format, s, kSub, kSuper) {
                    if (type.isMatrix(x)) {
                        var dm = x.diagonal(k);
                        if (format !== null) {
                            if (format !== dm.storage())
                                return matrix(dm, format);
                            return dm;
                        }
                        return dm.valueOf();
                    }
                    var n = Math.min(s[0] - kSub, s[1] - kSuper);
                    var vector = [];
                    for (var i = 0; i < n; i++) {
                        vector[i] = x[i + kSub][i + kSuper];
                    }
                    return format !== null ? matrix(vector) : vector;
                }
            }
            exports.name = 'diag';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var size = __webpack_require__(2).size;
            function factory(type, config, load, typed) {
                var add = load(__webpack_require__(18));
                var multiply = load(__webpack_require__(12));
                var dot = typed('dot', {
                    'Matrix, Matrix': function (x, y) {
                        return _dot(x.toArray(), y.toArray());
                    },
                    'Matrix, Array': function (x, y) {
                        return _dot(x.toArray(), y);
                    },
                    'Array, Matrix': function (x, y) {
                        return _dot(x, y.toArray());
                    },
                    'Array, Array': _dot
                });
                dot.toTex = { 2: '\\left(${args[0]}\\cdot${args[1]}\\right)' };
                return dot;
                function _dot(x, y) {
                    var xSize = size(x);
                    var ySize = size(y);
                    var len = xSize[0];
                    if (xSize.length !== 1 || ySize.length !== 1)
                        throw new RangeError('Vector expected');
                    if (xSize[0] != ySize[0])
                        throw new RangeError('Vectors must have equal length (' + xSize[0] + ' != ' + ySize[0] + ')');
                    if (len == 0)
                        throw new RangeError('Cannot calculate the dot product of empty vectors');
                    var prod = 0;
                    for (var i = 0; i < len; i++) {
                        prod = add(prod, multiply(x[i], y[i]));
                    }
                    return prod;
                }
            }
            exports.name = 'dot';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var filter = __webpack_require__(2).filter;
            var filterRegExp = __webpack_require__(2).filterRegExp;
            var maxArgumentCount = __webpack_require__(32).maxArgumentCount;
            function factory(type, config, load, typed) {
                var matrix = load(__webpack_require__(0));
                var filter = typed('filter', {
                    'Array, function': _filterCallback,
                    'Matrix, function': function (x, test) {
                        return matrix(_filterCallback(x.toArray(), test));
                    },
                    'Array, RegExp': filterRegExp,
                    'Matrix, RegExp': function (x, test) {
                        return matrix(filterRegExp(x.toArray(), test));
                    }
                });
                filter.toTex = undefined;
                return filter;
            }
            function _filterCallback(x, callback) {
                var args = maxArgumentCount(callback);
                return filter(x, function (value, index, array) {
                    if (args === 1) {
                        return callback(value);
                    }
                    else if (args === 2) {
                        return callback(value, [index]);
                    }
                    else {
                        return callback(value, [index], array);
                    }
                });
            }
            exports.name = 'filter';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var clone = __webpack_require__(5).clone;
            var _flatten = __webpack_require__(2).flatten;
            function factory(type, config, load, typed) {
                var matrix = load(__webpack_require__(0));
                var flatten = typed('flatten', {
                    'Array': function (x) {
                        return _flatten(clone(x));
                    },
                    'Matrix': function (x) {
                        var flat = _flatten(clone(x.toArray()));
                        return matrix(flat);
                    }
                });
                flatten.toTex = undefined;
                return flatten;
            }
            exports.name = 'flatten';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var maxArgumentCount = __webpack_require__(32).maxArgumentCount;
            var forEach = __webpack_require__(2).forEach;
            function factory(type, config, load, typed) {
                var forEach = typed('forEach', {
                    'Array, function': _forEach,
                    'Matrix, function': function (x, callback) {
                        return x.forEach(callback);
                    }
                });
                forEach.toTex = undefined;
                return forEach;
            }
            function _forEach(array, callback) {
                var args = maxArgumentCount(callback);
                var recurse = function (value, index) {
                    if (Array.isArray(value)) {
                        forEach(value, function (child, i) {
                            recurse(child, index.concat(i));
                        });
                    }
                    else {
                        if (args === 1) {
                            callback(value);
                        }
                        else if (args === 2) {
                            callback(value, index);
                        }
                        else {
                            callback(value, index, array);
                        }
                    }
                };
                recurse(array, []);
            }
            exports.name = 'forEach';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var size = __webpack_require__(2).size;
            function factory(type, config, load, typed) {
                var matrix = load(__webpack_require__(0));
                var multiplyScalar = load(__webpack_require__(23));
                var kron = typed('kron', {
                    'Matrix, Matrix': function (x, y) {
                        return matrix(_kron(x.toArray(), y.toArray()));
                    },
                    'Matrix, Array': function (x, y) {
                        return matrix(_kron(x.toArray(), y));
                    },
                    'Array, Matrix': function (x, y) {
                        return matrix(_kron(x, y.toArray()));
                    },
                    'Array, Array': _kron
                });
                return kron;
                function _kron(a, b) {
                    if (size(a).length === 1) {
                        a = [a];
                    }
                    if (size(b).length === 1) {
                        b = [b];
                    }
                    if (size(a).length > 2 || size(b).length > 2) {
                        throw new RangeError('Vectors with dimensions greater then 2 are not supported expected ' +
                            '(Size x = ' + JSON.stringify(a.length) + ', y = ' + JSON.stringify(b.length) + ')');
                    }
                    var t = [];
                    var r = [];
                    return a.map(function (a) {
                        return b.map(function (b) {
                            return a.map(function (y) {
                                return b.map(function (x) {
                                    return r.push(multiplyScalar(y, x));
                                });
                            }, t.push(r = []));
                        });
                    }, t = []) && t;
                }
            }
            exports.name = 'kron';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var isInteger = __webpack_require__(3).isInteger;
            var resize = __webpack_require__(2).resize;
            function factory(type, config, load, typed) {
                var matrix = load(__webpack_require__(0));
                var ones = typed('ones', {
                    '': function () {
                        return (config.matrix === 'Array')
                            ? _ones([])
                            : _ones([], 'default');
                    },
                    '...number | BigNumber | string': function (size) {
                        var last = size[size.length - 1];
                        if (typeof last === 'string') {
                            var format = size.pop();
                            return _ones(size, format);
                        }
                        else if (config.matrix === 'Array') {
                            return _ones(size);
                        }
                        else {
                            return _ones(size, 'default');
                        }
                    },
                    'Array': _ones,
                    'Matrix': function (size) {
                        var format = size.storage();
                        return _ones(size.valueOf(), format);
                    },
                    'Array | Matrix, string': function (size, format) {
                        return _ones(size.valueOf(), format);
                    }
                });
                ones.toTex = undefined;
                return ones;
                function _ones(size, format) {
                    var hasBigNumbers = _normalize(size);
                    var defaultValue = hasBigNumbers ? new type.BigNumber(1) : 1;
                    _validate(size);
                    if (format) {
                        var m = matrix(format);
                        if (size.length > 0) {
                            return m.resize(size, defaultValue);
                        }
                        return m;
                    }
                    else {
                        var arr = [];
                        if (size.length > 0) {
                            return resize(arr, size, defaultValue);
                        }
                        return arr;
                    }
                }
                function _normalize(size) {
                    var hasBigNumbers = false;
                    size.forEach(function (value, index, arr) {
                        if (type.isBigNumber(value)) {
                            hasBigNumbers = true;
                            arr[index] = value.toNumber();
                        }
                    });
                    return hasBigNumbers;
                }
                function _validate(size) {
                    size.forEach(function (value) {
                        if (typeof value !== 'number' || !isInteger(value) || value < 0) {
                            throw new Error('Parameters in function ones must be positive integers');
                        }
                    });
                }
            }
            exports.name = 'ones';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var DimensionError = __webpack_require__(10);
            var isInteger = __webpack_require__(3).isInteger;
            var array = __webpack_require__(2);
            function factory(type, config, load, typed) {
                var matrix = load(__webpack_require__(0));
                var reshape = typed('reshape', {
                    'Matrix, Array': function (x, sizes) {
                        if (x.reshape) {
                            return x.reshape(sizes);
                        }
                        else {
                            return matrix(array.reshape(x.valueOf(), sizes));
                        }
                    },
                    'Array, Array': function (x, sizes) {
                        sizes.forEach(function (size) {
                            if (!isInteger(size)) {
                                throw new TypeError('Invalid size for dimension: ' + size);
                            }
                        });
                        return array.reshape(x, sizes);
                    }
                });
                reshape.toTex = undefined;
                return reshape;
            }
            exports.name = 'reshape';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var DimensionError = __webpack_require__(10);
            var ArgumentsError = __webpack_require__(50);
            var isInteger = __webpack_require__(3).isInteger;
            var format = __webpack_require__(9).format;
            var clone = __webpack_require__(5).clone;
            var array = __webpack_require__(2);
            function factory(type, config, load, typed) {
                var matrix = load(__webpack_require__(0));
                var resize = function resize(x, size, defaultValue) {
                    if (arguments.length != 2 && arguments.length != 3) {
                        throw new ArgumentsError('resize', arguments.length, 2, 3);
                    }
                    if (type.isMatrix(size)) {
                        size = size.valueOf();
                    }
                    if (type.isBigNumber(size[0])) {
                        size = size.map(function (value) {
                            return type.isBigNumber(value) ? value.toNumber() : value;
                        });
                    }
                    if (type.isMatrix(x)) {
                        return x.resize(size, defaultValue, true);
                    }
                    if (typeof x === 'string') {
                        return _resizeString(x, size, defaultValue);
                    }
                    var asMatrix = Array.isArray(x) ? false : (config.matrix !== 'Array');
                    if (size.length == 0) {
                        while (Array.isArray(x)) {
                            x = x[0];
                        }
                        return clone(x);
                    }
                    else {
                        if (!Array.isArray(x)) {
                            x = [x];
                        }
                        x = clone(x);
                        var res = array.resize(x, size, defaultValue);
                        return asMatrix ? matrix(res) : res;
                    }
                };
                resize.toTex = undefined;
                return resize;
                function _resizeString(str, size, defaultChar) {
                    if (defaultChar !== undefined) {
                        if (typeof defaultChar !== 'string' || defaultChar.length !== 1) {
                            throw new TypeError('Single character expected as defaultValue');
                        }
                    }
                    else {
                        defaultChar = ' ';
                    }
                    if (size.length !== 1) {
                        throw new DimensionError(size.length, 1);
                    }
                    var len = size[0];
                    if (typeof len !== 'number' || !isInteger(len)) {
                        throw new TypeError('Invalid size, must contain positive integers ' +
                            '(size: ' + format(size) + ')');
                    }
                    if (str.length > len) {
                        return str.substring(0, len);
                    }
                    else if (str.length < len) {
                        var res = str;
                        for (var i = 0, ii = len - str.length; i < ii; i++) {
                            res += defaultChar;
                        }
                        return res;
                    }
                    else {
                        return str;
                    }
                }
            }
            exports.name = 'resize';
            exports.factory = factory;
        }),
        (function (module, exports) {
            module.exports = function naturalSort(a, b) {
                "use strict";
                var re = /(^([+\-]?(?:0|[1-9]\d*)(?:\.\d*)?(?:[eE][+\-]?\d+)?)?$|^0x[0-9a-f]+$|\d+)/gi, sre = /(^[ ]*|[ ]*$)/g, dre = /(^([\w ]+,?[\w ]+)?[\w ]+,?[\w ]+\d+:\d+(:\d+)?[\w ]?|^\d{1,4}[\/\-]\d{1,4}[\/\-]\d{1,4}|^\w+, \w+ \d+, \d{4})/, hre = /^0x[0-9a-f]+$/i, ore = /^0/, i = function (s) { return naturalSort.insensitive && ('' + s).toLowerCase() || '' + s; }, x = i(a).replace(sre, '') || '', y = i(b).replace(sre, '') || '', xN = x.replace(re, '\0$1\0').replace(/\0$/, '').replace(/^\0/, '').split('\0'), yN = y.replace(re, '\0$1\0').replace(/\0$/, '').replace(/^\0/, '').split('\0'), xD = parseInt(x.match(hre), 16) || (xN.length !== 1 && x.match(dre) && Date.parse(x)), yD = parseInt(y.match(hre), 16) || xD && y.match(dre) && Date.parse(y) || null, oFxNcL, oFyNcL;
                if (yD) {
                    if (xD < yD) {
                        return -1;
                    }
                    else if (xD > yD) {
                        return 1;
                    }
                }
                for (var cLoc = 0, numS = Math.max(xN.length, yN.length); cLoc < numS; cLoc++) {
                    oFxNcL = !(xN[cLoc] || '').match(ore) && parseFloat(xN[cLoc]) || xN[cLoc] || 0;
                    oFyNcL = !(yN[cLoc] || '').match(ore) && parseFloat(yN[cLoc]) || yN[cLoc] || 0;
                    if (isNaN(oFxNcL) !== isNaN(oFyNcL)) {
                        return (isNaN(oFxNcL)) ? 1 : -1;
                    }
                    else if (typeof oFxNcL !== typeof oFyNcL) {
                        oFxNcL += '';
                        oFyNcL += '';
                    }
                    if (oFxNcL < oFyNcL) {
                        return -1;
                    }
                    if (oFxNcL > oFyNcL) {
                        return 1;
                    }
                }
                return 0;
            };
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var object = __webpack_require__(5);
            var array = __webpack_require__(2);
            function factory(type, config, load, typed) {
                var matrix = load(__webpack_require__(0));
                var squeeze = typed('squeeze', {
                    'Array': function (x) {
                        return array.squeeze(object.clone(x));
                    },
                    'Matrix': function (x) {
                        var res = array.squeeze(x.toArray());
                        return Array.isArray(res) ? matrix(res) : res;
                    },
                    'any': function (x) {
                        return object.clone(x);
                    }
                });
                squeeze.toTex = undefined;
                return squeeze;
            }
            exports.name = 'squeeze';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            module.exports = [
                __webpack_require__(70),
                __webpack_require__(69),
                __webpack_require__(137),
                __webpack_require__(486),
                __webpack_require__(487),
                __webpack_require__(488),
                __webpack_require__(489),
                __webpack_require__(493),
                __webpack_require__(494)
            ];
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load, typed) {
                var matrix = load(__webpack_require__(0));
                var divide = load(__webpack_require__(47));
                var sum = load(__webpack_require__(141));
                var multiply = load(__webpack_require__(12));
                var dotDivide = load(__webpack_require__(132));
                var log = load(__webpack_require__(134));
                var isNumeric = load(__webpack_require__(75));
                var kldivergence = typed('kldivergence', {
                    'Array, Array': function (q, p) {
                        return _kldiv(matrix(q), matrix(p));
                    },
                    'Matrix, Array': function (q, p) {
                        return _kldiv(q, matrix(p));
                    },
                    'Array, Matrix': function (q, p) {
                        return _kldiv(matrix(q), p);
                    },
                    'Matrix, Matrix': function (q, p) {
                        return _kldiv(q, p);
                    }
                });
                function _kldiv(q, p) {
                    var plength = p.size().length;
                    var qlength = q.size().length;
                    if (plength > 1) {
                        throw new Error('first object must be one dimensional');
                    }
                    if (qlength > 1) {
                        throw new Error('second object must be one dimensional');
                    }
                    if (plength !== qlength) {
                        throw new Error("Length of two vectors must be equal");
                    }
                    var sumq = sum(q);
                    if (sumq === 0) {
                        throw new Error("Sum of elements in first object must be non zero");
                    }
                    var sump = sum(p);
                    if (sump === 0) {
                        throw new Error("Sum of elements in second object must be non zero");
                    }
                    var qnorm = divide(q, sum(q));
                    var pnorm = divide(p, sum(p));
                    var result = sum(multiply(qnorm, log(dotDivide(qnorm, pnorm))));
                    if (isNumeric(result)) {
                        return result;
                    }
                    else {
                        return Number.NaN;
                    }
                }
                return kldivergence;
            }
            exports.name = 'kldivergence';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepForEach = __webpack_require__(42);
            function factory(type, config, load, typed) {
                var add = load(__webpack_require__(18));
                var multiply = load(__webpack_require__(12));
                var divide = load(__webpack_require__(47));
                var factorial = load(__webpack_require__(69));
                var isInteger = load(__webpack_require__(48));
                var isPositive = load(__webpack_require__(55));
                return typed('multinomial', {
                    'Array | Matrix': function (a) {
                        var sum = 0;
                        var denom = 1;
                        deepForEach(a, function (ai) {
                            if (!isInteger(ai) || !isPositive(ai)) {
                                throw new TypeError('Positive integer value expected in function multinomial');
                            }
                            sum = add(sum, ai);
                            denom = multiply(denom, factorial(ai));
                        });
                        return divide(factorial(sum), denom);
                    }
                });
            }
            exports.name = 'multinomial';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var isInteger = __webpack_require__(3).isInteger;
            function factory(type, config, load, typed) {
                var factorial = load(__webpack_require__(69));
                var permutations = typed('permutations', {
                    'number | BigNumber': factorial,
                    'number, number': function (n, k) {
                        var result, i;
                        if (!isInteger(n) || n < 0) {
                            throw new TypeError('Positive integer value expected in function permutations');
                        }
                        if (!isInteger(k) || k < 0) {
                            throw new TypeError('Positive integer value expected in function permutations');
                        }
                        if (k > n) {
                            throw new TypeError('second argument k must be less than or equal to first argument n');
                        }
                        result = 1;
                        for (i = n - k + 1; i <= n; i++) {
                            result = result * i;
                        }
                        return result;
                    },
                    'BigNumber, BigNumber': function (n, k) {
                        var result, i;
                        if (!isPositiveInteger(n) || !isPositiveInteger(k)) {
                            throw new TypeError('Positive integer value expected in function permutations');
                        }
                        if (k.gt(n)) {
                            throw new TypeError('second argument k must be less than or equal to first argument n');
                        }
                        result = new type.BigNumber(1);
                        for (i = n.minus(k).plus(1); i.lte(n); i = i.plus(1)) {
                            result = result.times(i);
                        }
                        return result;
                    }
                });
                permutations.toTex = undefined;
                return permutations;
            }
            function isPositiveInteger(n) {
                return n.isInteger() && n.gte(0);
            }
            exports.name = 'permutations';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load, typed) {
                var distribution = load(__webpack_require__(89));
                var pickRandom = distribution('uniform').pickRandom;
                pickRandom.toTex = undefined;
                return pickRandom;
            }
            exports.name = 'pickRandom';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var seedrandom = __webpack_require__(491);
            var singletonRandom = seedrandom();
            function factory(type, config, load, typed, math) {
                var random;
                function setSeed(seed) {
                    random = seed === null ? singletonRandom : seedrandom(String(seed));
                }
                setSeed(config.randomSeed);
                function rng() {
                    return random();
                }
                math.on('config', function (curr, prev, changes) {
                    if (changes.randomSeed !== undefined) {
                        setSeed(curr.randomSeed);
                    }
                });
                return rng;
            }
            exports.factory = factory;
            exports.math = true;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            (function (global) {
                var width = 256;
                var chunks = 6;
                var digits = 52;
                var pool = [];
                var GLOBAL = typeof global === 'undefined' ? window : global;
                var startdenom = Math.pow(width, chunks), significance = Math.pow(2, digits), overflow = significance * 2, mask = width - 1;
                var oldRandom = Math.random;
                module.exports = function (seed, options) {
                    if (options && options.global === true) {
                        options.global = false;
                        Math.random = module.exports(seed, options);
                        options.global = true;
                        return Math.random;
                    }
                    var use_entropy = (options && options.entropy) || false;
                    var key = [];
                    var shortseed = mixkey(flatten(use_entropy ? [seed, tostring(pool)] :
                        0 in arguments ? seed : autoseed(), 3), key);
                    var arc4 = new ARC4(key);
                    mixkey(tostring(arc4.S), pool);
                    return function () {
                        var n = arc4.g(chunks), d = startdenom, x = 0;
                        while (n < significance) {
                            n = (n + x) * width;
                            d *= width;
                            x = arc4.g(1);
                        }
                        while (n >= overflow) {
                            n /= 2;
                            d /= 2;
                            x >>>= 1;
                        }
                        return (n + x) / d;
                    };
                };
                module.exports.resetGlobal = function () {
                    Math.random = oldRandom;
                };
                function ARC4(key) {
                    var t, keylen = key.length, me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];
                    if (!keylen) {
                        key = [keylen++];
                    }
                    while (i < width) {
                        s[i] = i++;
                    }
                    for (i = 0; i < width; i++) {
                        s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];
                        s[j] = t;
                    }
                    (me.g = function (count) {
                        var t, r = 0, i = me.i, j = me.j, s = me.S;
                        while (count--) {
                            t = s[i = mask & (i + 1)];
                            r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];
                        }
                        me.i = i;
                        me.j = j;
                        return r;
                    })(width);
                }
                function flatten(obj, depth) {
                    var result = [], typ = (typeof obj)[0], prop;
                    if (depth && typ == 'o') {
                        for (prop in obj) {
                            try {
                                result.push(flatten(obj[prop], depth - 1));
                            }
                            catch (e) { }
                        }
                    }
                    return (result.length ? result : typ == 's' ? obj : obj + '\0');
                }
                function mixkey(seed, key) {
                    var stringseed = seed + '', smear, j = 0;
                    while (j < stringseed.length) {
                        key[mask & j] =
                            mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));
                    }
                    return tostring(key);
                }
                function autoseed(seed) {
                    try {
                        GLOBAL.crypto.getRandomValues(seed = new Uint8Array(width));
                        return tostring(seed);
                    }
                    catch (e) {
                        return [+new Date, GLOBAL, GLOBAL.navigator && GLOBAL.navigator.plugins,
                            GLOBAL.screen, tostring(pool)];
                    }
                }
                function tostring(a) {
                    return String.fromCharCode.apply(0, a);
                }
                mixkey(Math.random(), pool);
            }.call(exports, __webpack_require__(492)));
        }),
        (function (module, exports) {
            var g;
            g = (function () {
                return this;
            })();
            try {
                g = g || Function("return this")() || (1, eval)("this");
            }
            catch (e) {
                if (typeof window === "object")
                    g = window;
            }
            module.exports = g;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load, typed) {
                var distribution = load(__webpack_require__(89));
                var random = distribution('uniform').random;
                random.toTex = undefined;
                return random;
            }
            exports.name = 'random';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load, typed) {
                var distribution = load(__webpack_require__(89));
                var randomInt = distribution('uniform').randomInt;
                randomInt.toTex = undefined;
                return randomInt;
            }
            exports.name = 'randomInt';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            module.exports = [
                __webpack_require__(49),
                __webpack_require__(31),
                __webpack_require__(496),
                __webpack_require__(30),
                __webpack_require__(34),
                __webpack_require__(127),
                __webpack_require__(44),
                __webpack_require__(497),
                __webpack_require__(121)
            ];
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load, typed) {
                var equal = load(__webpack_require__(30));
                var deepEqual = typed('deepEqual', {
                    'any, any': function (x, y) {
                        return _deepEqual(x.valueOf(), y.valueOf());
                    }
                });
                deepEqual.toTex = undefined;
                return deepEqual;
                function _deepEqual(x, y) {
                    if (Array.isArray(x)) {
                        if (Array.isArray(y)) {
                            var len = x.length;
                            if (len !== y.length) {
                                return false;
                            }
                            for (var i = 0; i < len; i++) {
                                if (!_deepEqual(x[i], y[i])) {
                                    return false;
                                }
                            }
                            return true;
                        }
                        else {
                            return false;
                        }
                    }
                    else {
                        if (Array.isArray(y)) {
                            return false;
                        }
                        else {
                            return equal(x, y);
                        }
                    }
                }
            }
            exports.name = 'deepEqual';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var nearlyEqual = __webpack_require__(3).nearlyEqual;
            var bigNearlyEqual = __webpack_require__(35);
            function factory(type, config, load, typed) {
                var matrix = load(__webpack_require__(0));
                var algorithm03 = load(__webpack_require__(15));
                var algorithm07 = load(__webpack_require__(26));
                var algorithm12 = load(__webpack_require__(16));
                var algorithm13 = load(__webpack_require__(8));
                var algorithm14 = load(__webpack_require__(6));
                var latex = __webpack_require__(4);
                var smallerEq = typed('smallerEq', {
                    'boolean, boolean': function (x, y) {
                        return x <= y;
                    },
                    'number, number': function (x, y) {
                        return x <= y || nearlyEqual(x, y, config.epsilon);
                    },
                    'BigNumber, BigNumber': function (x, y) {
                        return x.lte(y) || bigNearlyEqual(x, y, config.epsilon);
                    },
                    'Fraction, Fraction': function (x, y) {
                        return x.compare(y) !== 1;
                    },
                    'Complex, Complex': function () {
                        throw new TypeError('No ordering relation is defined for complex numbers');
                    },
                    'Unit, Unit': function (x, y) {
                        if (!x.equalBase(y)) {
                            throw new Error('Cannot compare units with different base');
                        }
                        return smallerEq(x.value, y.value);
                    },
                    'string, string': function (x, y) {
                        return x <= y;
                    },
                    'Matrix, Matrix': function (x, y) {
                        var c;
                        switch (x.storage()) {
                            case 'sparse':
                                switch (y.storage()) {
                                    case 'sparse':
                                        c = algorithm07(x, y, smallerEq);
                                        break;
                                    default:
                                        c = algorithm03(y, x, smallerEq, true);
                                        break;
                                }
                                break;
                            default:
                                switch (y.storage()) {
                                    case 'sparse':
                                        c = algorithm03(x, y, smallerEq, false);
                                        break;
                                    default:
                                        c = algorithm13(x, y, smallerEq);
                                        break;
                                }
                                break;
                        }
                        return c;
                    },
                    'Array, Array': function (x, y) {
                        return smallerEq(matrix(x), matrix(y)).valueOf();
                    },
                    'Array, Matrix': function (x, y) {
                        return smallerEq(matrix(x), y);
                    },
                    'Matrix, Array': function (x, y) {
                        return smallerEq(x, matrix(y));
                    },
                    'Matrix, any': function (x, y) {
                        var c;
                        switch (x.storage()) {
                            case 'sparse':
                                c = algorithm12(x, y, smallerEq, false);
                                break;
                            default:
                                c = algorithm14(x, y, smallerEq, false);
                                break;
                        }
                        return c;
                    },
                    'any, Matrix': function (x, y) {
                        var c;
                        switch (y.storage()) {
                            case 'sparse':
                                c = algorithm12(y, x, smallerEq, true);
                                break;
                            default:
                                c = algorithm14(y, x, smallerEq, true);
                                break;
                        }
                        return c;
                    },
                    'Array, any': function (x, y) {
                        return algorithm14(matrix(x), y, smallerEq, false).valueOf();
                    },
                    'any, Array': function (x, y) {
                        return algorithm14(matrix(y), x, smallerEq, true).valueOf();
                    }
                });
                smallerEq.toTex = {
                    2: '\\left(${args[0]}' + latex.operators['smallerEq'] + '${args[1]}\\right)'
                };
                return smallerEq;
            }
            exports.name = 'smallerEq';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            module.exports = [
                __webpack_require__(499),
                __webpack_require__(142),
                __webpack_require__(500),
                __webpack_require__(143),
                __webpack_require__(501),
                __webpack_require__(502),
                __webpack_require__(503),
                __webpack_require__(504),
                __webpack_require__(144),
                __webpack_require__(505)
            ];
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var flatten = __webpack_require__(2).flatten;
            function factory(type, config, load, typed) {
                var index = load(__webpack_require__(27));
                var matrix = load(__webpack_require__(43));
                var size = load(__webpack_require__(28));
                var subset = load(__webpack_require__(22));
                var compareNatural = load(__webpack_require__(31));
                var setCartesian = typed('setCartesian', {
                    'Array | Matrix, Array | Matrix': function (a1, a2) {
                        if (subset(size(a1), new index(0)) === 0 || subset(size(a2), new index(0)) === 0) {
                            var result = [];
                        }
                        else {
                            var b1 = flatten(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural);
                            var b2 = flatten(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural);
                            var result = [];
                            for (var i = 0; i < b1.length; i++) {
                                for (var j = 0; j < b2.length; j++) {
                                    result.push([b1[i], b2[j]]);
                                }
                            }
                        }
                        if (Array.isArray(a1) && Array.isArray(a2)) {
                            return result;
                        }
                        return new matrix(result);
                    }
                });
                return setCartesian;
            }
            exports.name = 'setCartesian';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var flatten = __webpack_require__(2).flatten;
            function factory(type, config, load, typed) {
                var equal = load(__webpack_require__(30));
                var index = load(__webpack_require__(27));
                var matrix = load(__webpack_require__(43));
                var size = load(__webpack_require__(28));
                var subset = load(__webpack_require__(22));
                var compareNatural = load(__webpack_require__(31));
                var setDistinct = typed('setDistinct', {
                    'Array | Matrix': function (a) {
                        if (subset(size(a), new index(0)) === 0) {
                            var result = [];
                        }
                        else {
                            var b = flatten(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);
                            var result = [];
                            result.push(b[0]);
                            for (var i = 1; i < b.length; i++) {
                                if (!equal(b[i], b[i - 1])) {
                                    result.push(b[i]);
                                }
                            }
                        }
                        if (Array.isArray(a)) {
                            return result;
                        }
                        return new matrix(result);
                    }
                });
                return setDistinct;
            }
            exports.name = 'setDistinct';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var flatten = __webpack_require__(2).flatten;
            var identify = __webpack_require__(2).identify;
            function factory(type, config, load, typed) {
                var equal = load(__webpack_require__(30));
                var index = load(__webpack_require__(27));
                var size = load(__webpack_require__(28));
                var subset = load(__webpack_require__(22));
                var compareNatural = load(__webpack_require__(31));
                var setIsSubset = typed('setIsSubset', {
                    'Array | Matrix, Array | Matrix': function (a1, a2) {
                        if (subset(size(a1), new index(0)) === 0) {
                            return true;
                        }
                        else if (subset(size(a2), new index(0)) === 0) {
                            return false;
                        }
                        var b1 = identify(flatten(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));
                        var b2 = identify(flatten(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));
                        var inb2;
                        for (var i = 0; i < b1.length; i++) {
                            inb2 = false;
                            for (var j = 0; j < b2.length; j++) {
                                if (equal(b1[i].value, b2[j].value) && b1[i].identifier === b2[j].identifier) {
                                    inb2 = true;
                                    break;
                                }
                            }
                            if (inb2 === false) {
                                return false;
                            }
                        }
                        return true;
                    }
                });
                return setIsSubset;
            }
            exports.name = 'setIsSubset';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var flatten = __webpack_require__(2).flatten;
            function factory(type, config, load, typed) {
                var equal = load(__webpack_require__(30));
                var index = load(__webpack_require__(27));
                var size = load(__webpack_require__(28));
                var subset = load(__webpack_require__(22));
                var setMultiplicity = typed('setMultiplicity', {
                    'number | BigNumber | Fraction | Complex, Array | Matrix': function (e, a) {
                        if (subset(size(a), new index(0)) === 0) {
                            return 0;
                        }
                        var b = flatten(Array.isArray(a) ? a : a.toArray());
                        var count = 0;
                        for (var i = 0; i < b.length; i++) {
                            if (equal(b[i], e)) {
                                count++;
                            }
                        }
                        return count;
                    }
                });
                return setMultiplicity;
            }
            exports.name = 'setMultiplicity';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var flatten = __webpack_require__(2).flatten;
            function factory(type, config, load, typed) {
                var index = load(__webpack_require__(27));
                var size = load(__webpack_require__(28));
                var subset = load(__webpack_require__(22));
                var compareNatural = load(__webpack_require__(31));
                var setPowerset = typed('setPowerset', {
                    'Array | Matrix': function (a) {
                        if (subset(size(a), new index(0)) === 0) {
                            return [];
                        }
                        var b = flatten(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);
                        var result = [];
                        var number = 0;
                        while (number.toString(2).length <= b.length) {
                            result.push(_subset(b, number.toString(2).split("").reverse()));
                            number++;
                        }
                        return _sort(result);
                    }
                });
                return setPowerset;
                function _subset(array, bitarray) {
                    var result = [];
                    for (var i = 0; i < bitarray.length; i++) {
                        if (bitarray[i] === "1") {
                            result.push(array[i]);
                        }
                    }
                    return result;
                }
                function _sort(array) {
                    var temp = [];
                    for (var i = array.length - 1; i > 0; i--) {
                        for (var j = 0; j < i; j++) {
                            if (array[j].length > array[j + 1].length) {
                                temp = array[j];
                                array[j] = array[j + 1];
                                array[j + 1] = temp;
                            }
                        }
                    }
                    return array;
                }
            }
            exports.name = 'setPowerset';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var flatten = __webpack_require__(2).flatten;
            function factory(type, config, load, typed) {
                var equal = load(__webpack_require__(30));
                var compareNatural = load(__webpack_require__(31));
                var setSize = typed('setSize', {
                    'Array | Matrix': function (a) {
                        return Array.isArray(a) ? flatten(a).length : flatten(a.toArray()).length;
                    },
                    'Array | Matrix, boolean': function (a, unique) {
                        if (unique === false || a.length === 0) {
                            return Array.isArray(a) ? flatten(a).length : flatten(a.toArray()).length;
                        }
                        else {
                            var b = flatten(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);
                            var count = 1;
                            for (var i = 1; i < b.length; i++) {
                                if (!equal(b[i], b[i - 1])) {
                                    count++;
                                }
                            }
                            return count;
                        }
                    }
                });
                return setSize;
            }
            exports.name = 'setSize';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var flatten = __webpack_require__(2).flatten;
            function factory(type, config, load, typed) {
                var index = load(__webpack_require__(27));
                var concat = load(__webpack_require__(64));
                var size = load(__webpack_require__(28));
                var subset = load(__webpack_require__(22));
                var setIntersect = load(__webpack_require__(143));
                var setSymDifference = load(__webpack_require__(144));
                var setUnion = typed('setUnion', {
                    'Array | Matrix, Array | Matrix': function (a1, a2) {
                        if (subset(size(a1), new index(0)) === 0) {
                            return flatten(a2);
                        }
                        else if (subset(size(a2), new index(0)) === 0) {
                            return flatten(a1);
                        }
                        var b1 = flatten(a1);
                        var b2 = flatten(a2);
                        return concat(setSymDifference(b1, b2), setIntersect(b1, b2));
                    }
                });
                return setUnion;
            }
            exports.name = 'setUnion';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            module.exports = [
                __webpack_require__(507)
            ];
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            var sign = __webpack_require__(3).sign;
            function factory(type, config, load, typed) {
                var erf = typed('erf', {
                    'number': function (x) {
                        var y = Math.abs(x);
                        if (y >= MAX_NUM) {
                            return sign(x);
                        }
                        if (y <= THRESH) {
                            return sign(x) * erf1(y);
                        }
                        if (y <= 4.0) {
                            return sign(x) * (1 - erfc2(y));
                        }
                        return sign(x) * (1 - erfc3(y));
                    },
                    'BigNumber': function (n) {
                        return new type.BigNumber(erf(n.toNumber()));
                    },
                    'Array | Matrix': function (n) {
                        return deepMap(n, erf);
                    }
                });
                function erf1(y) {
                    var ysq = y * y;
                    var xnum = P[0][4] * ysq;
                    var xden = ysq;
                    var i;
                    for (i = 0; i < 3; i += 1) {
                        xnum = (xnum + P[0][i]) * ysq;
                        xden = (xden + Q[0][i]) * ysq;
                    }
                    return y * (xnum + P[0][3]) / (xden + Q[0][3]);
                }
                function erfc2(y) {
                    var xnum = P[1][8] * y;
                    var xden = y;
                    var i;
                    for (i = 0; i < 7; i += 1) {
                        xnum = (xnum + P[1][i]) * y;
                        xden = (xden + Q[1][i]) * y;
                    }
                    var result = (xnum + P[1][7]) / (xden + Q[1][7]);
                    var ysq = parseInt(y * 16) / 16;
                    var del = (y - ysq) * (y + ysq);
                    return Math.exp(-ysq * ysq) * Math.exp(-del) * result;
                }
                function erfc3(y) {
                    var ysq = 1 / (y * y);
                    var xnum = P[2][5] * ysq;
                    var xden = ysq;
                    var i;
                    for (i = 0; i < 4; i += 1) {
                        xnum = (xnum + P[2][i]) * ysq;
                        xden = (xden + Q[2][i]) * ysq;
                    }
                    var result = ysq * (xnum + P[2][4]) / (xden + Q[2][4]);
                    result = (SQRPI - result) / y;
                    ysq = parseInt(y * 16) / 16;
                    var del = (y - ysq) * (y + ysq);
                    return Math.exp(-ysq * ysq) * Math.exp(-del) * result;
                }
                erf.toTex = { 1: 'erf\\left(${args[0]}\\right)' };
                return erf;
            }
            var THRESH = 0.46875;
            var SQRPI = 5.6418958354775628695e-1;
            var P = [[
                    3.16112374387056560e00, 1.13864154151050156e02,
                    3.77485237685302021e02, 3.20937758913846947e03,
                    1.85777706184603153e-1
                ], [
                    5.64188496988670089e-1, 8.88314979438837594e00,
                    6.61191906371416295e01, 2.98635138197400131e02,
                    8.81952221241769090e02, 1.71204761263407058e03,
                    2.05107837782607147e03, 1.23033935479799725e03,
                    2.15311535474403846e-8
                ], [
                    3.05326634961232344e-1, 3.60344899949804439e-1,
                    1.25781726111229246e-1, 1.60837851487422766e-2,
                    6.58749161529837803e-4, 1.63153871373020978e-2
                ]];
            var Q = [[
                    2.36012909523441209e01, 2.44024637934444173e02,
                    1.28261652607737228e03, 2.84423683343917062e03
                ], [
                    1.57449261107098347e01, 1.17693950891312499e02,
                    5.37181101862009858e02, 1.62138957456669019e03,
                    3.29079923573345963e03, 4.36261909014324716e03,
                    3.43936767414372164e03, 1.23033935480374942e03
                ], [
                    2.56852019228982242e00, 1.87295284992346047e00,
                    5.27905102951428412e-1, 6.05183413124413191e-2,
                    2.33520497626869185e-3
                ]];
            var MAX_NUM = Math.pow(2, 53);
            exports.name = 'erf';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            module.exports = [
                __webpack_require__(509),
                __webpack_require__(112),
                __webpack_require__(113),
                __webpack_require__(145),
                __webpack_require__(116),
                __webpack_require__(510),
                __webpack_require__(511),
                __webpack_require__(512),
                __webpack_require__(513),
                __webpack_require__(141),
                __webpack_require__(146)
            ];
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var flatten = __webpack_require__(2).flatten;
            function factory(type, config, load, typed) {
                var abs = load(__webpack_require__(29));
                var map = load(__webpack_require__(139));
                var median = load(__webpack_require__(145));
                var subtract = load(__webpack_require__(21));
                var mad = typed('mad', {
                    'Array | Matrix': _mad,
                    '...': function (args) {
                        return _mad(args);
                    }
                });
                mad.toTex = undefined;
                return mad;
                function _mad(array) {
                    array = flatten(array.valueOf());
                    if (array.length === 0) {
                        throw new Error('Cannot calculate median absolute deviation of an empty array');
                    }
                    var med = median(array);
                    return median(map(array, function (value) {
                        return abs(subtract(value, med));
                    }));
                }
            }
            exports.name = 'mad';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var flatten = __webpack_require__(2).flatten;
            function factory(type, config, load, typed) {
                var mode = typed('mode', {
                    'Array | Matrix': _mode,
                    '...': function (args) {
                        return _mode(args);
                    }
                });
                return mode;
                function _mode(values) {
                    values = flatten(values.valueOf());
                    var num = values.length;
                    if (num == 0) {
                        throw new Error('Cannot calculate mode of an empty array');
                    }
                    var count = {}, mode = [], max = 0;
                    for (var i in values) {
                        if (!(values[i] in count)) {
                            count[values[i]] = 0;
                        }
                        count[values[i]]++;
                        if (count[values[i]] == max) {
                            mode.push(values[i]);
                        }
                        else if (count[values[i]] > max) {
                            max = count[values[i]];
                            mode = [values[i]];
                        }
                    }
                    return mode;
                }
                ;
            }
            exports.name = 'mode';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepForEach = __webpack_require__(42);
            function factory(type, config, load, typed) {
                var multiply = load(__webpack_require__(23));
                var prod = typed('prod', {
                    'Array | Matrix': _prod,
                    'Array | Matrix, number | BigNumber': function (array, dim) {
                        throw new Error('prod(A, dim) is not yet supported');
                    },
                    '...': function (args) {
                        return _prod(args);
                    }
                });
                prod.toTex = undefined;
                return prod;
                function _prod(array) {
                    var prod = undefined;
                    deepForEach(array, function (value) {
                        prod = (prod === undefined) ? value : multiply(prod, value);
                    });
                    if (prod === undefined) {
                        throw new Error('Cannot calculate prod of an empty array');
                    }
                    return prod;
                }
            }
            exports.name = 'prod';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var isInteger = __webpack_require__(3).isInteger;
            var isNumber = __webpack_require__(3).isNumber;
            var flatten = __webpack_require__(2).flatten;
            var isCollection = __webpack_require__(46);
            function factory(type, config, load, typed) {
                var add = load(__webpack_require__(18));
                var multiply = load(__webpack_require__(12));
                var partitionSelect = load(__webpack_require__(88));
                var compare = load(__webpack_require__(49));
                function quantileSeq(data, probOrN, sorted) {
                    var probArr, dataArr, one;
                    if (arguments.length < 2 || arguments.length > 3) {
                        throw new SyntaxError('Function quantileSeq requires two or three parameters');
                    }
                    if (isCollection(data)) {
                        sorted = sorted || false;
                        if (typeof sorted === 'boolean') {
                            dataArr = data.valueOf();
                            if (isNumber(probOrN)) {
                                if (probOrN < 0) {
                                    throw new Error('N/prob must be non-negative');
                                }
                                if (probOrN <= 1) {
                                    return _quantileSeq(dataArr, probOrN, sorted);
                                }
                                if (probOrN > 1) {
                                    if (!isInteger(probOrN)) {
                                        throw new Error('N must be a positive integer');
                                    }
                                    var nPlusOne = probOrN + 1;
                                    probArr = new Array(probOrN);
                                    for (var i = 0; i < probOrN;) {
                                        probArr[i] = _quantileSeq(dataArr, (++i) / nPlusOne, sorted);
                                    }
                                    return probArr;
                                }
                            }
                            if (type.isBigNumber(probOrN)) {
                                if (probOrN.isNegative()) {
                                    throw new Error('N/prob must be non-negative');
                                }
                                one = new probOrN.constructor(1);
                                if (probOrN.lte(one)) {
                                    return _quantileSeq(dataArr, probOrN, sorted);
                                }
                                if (probOrN.gt(one)) {
                                    if (!probOrN.isInteger()) {
                                        throw new Error('N must be a positive integer');
                                    }
                                    var intN = probOrN.toNumber();
                                    if (intN > 4294967295) {
                                        throw new Error('N must be less than or equal to 2^32-1, as that is the maximum length of an Array');
                                    }
                                    var nPlusOne = new type.BigNumber(intN + 1);
                                    probArr = new Array(intN);
                                    for (var i = 0; i < intN;) {
                                        probArr[i] = _quantileSeq(dataArr, new type.BigNumber(++i).div(nPlusOne), sorted);
                                    }
                                    return probArr;
                                }
                            }
                            if (Array.isArray(probOrN)) {
                                probArr = new Array(probOrN.length);
                                for (var i = 0; i < probArr.length; ++i) {
                                    var currProb = probOrN[i];
                                    if (isNumber(currProb)) {
                                        if (currProb < 0 || currProb > 1) {
                                            throw new Error('Probability must be between 0 and 1, inclusive');
                                        }
                                    }
                                    else if (type.isBigNumber(currProb)) {
                                        one = new currProb.constructor(1);
                                        if (currProb.isNegative() || currProb.gt(one)) {
                                            throw new Error('Probability must be between 0 and 1, inclusive');
                                        }
                                    }
                                    else {
                                        throw new TypeError('Unexpected type of argument in function quantileSeq');
                                    }
                                    probArr[i] = _quantileSeq(dataArr, currProb, sorted);
                                }
                                return probArr;
                            }
                            throw new TypeError('Unexpected type of argument in function quantileSeq');
                        }
                        throw new TypeError('Unexpected type of argument in function quantileSeq');
                    }
                    throw new TypeError('Unexpected type of argument in function quantileSeq');
                }
                function _quantileSeq(array, prob, sorted) {
                    var flat = flatten(array);
                    var len = flat.length;
                    if (len === 0) {
                        throw new Error('Cannot calculate quantile of an empty sequence');
                    }
                    if (isNumber(prob)) {
                        var index = prob * (len - 1);
                        var fracPart = index % 1;
                        if (fracPart === 0) {
                            var value = sorted ? flat[index] : partitionSelect(flat, index);
                            validate(value);
                            return value;
                        }
                        var integerPart = Math.floor(index);
                        var left, right;
                        if (sorted) {
                            left = flat[integerPart];
                            right = flat[integerPart + 1];
                        }
                        else {
                            right = partitionSelect(flat, integerPart + 1);
                            left = flat[integerPart];
                            for (var i = 0; i < integerPart; ++i) {
                                if (compare(flat[i], left) > 0) {
                                    left = flat[i];
                                }
                            }
                        }
                        validate(left);
                        validate(right);
                        return add(multiply(left, 1 - fracPart), multiply(right, fracPart));
                    }
                    var index = prob.times(len - 1);
                    if (index.isInteger()) {
                        index = index.toNumber();
                        var value = sorted ? flat[index] : partitionSelect(flat, index);
                        validate(value);
                        return value;
                    }
                    var integerPart = index.floor();
                    var fracPart = index.minus(integerPart);
                    var integerPartNumber = integerPart.toNumber();
                    var left, right;
                    if (sorted) {
                        left = flat[integerPartNumber];
                        right = flat[integerPartNumber + 1];
                    }
                    else {
                        right = partitionSelect(flat, integerPartNumber + 1);
                        left = flat[integerPartNumber];
                        for (var i = 0; i < integerPartNumber; ++i) {
                            if (compare(flat[i], left) > 0) {
                                left = flat[i];
                            }
                        }
                    }
                    validate(left);
                    validate(right);
                    var one = new fracPart.constructor(1);
                    return add(multiply(left, one.minus(fracPart)), multiply(right, fracPart));
                }
                var validate = typed({
                    'number | BigNumber | Unit': function (x) {
                        return x;
                    }
                });
                return quantileSeq;
            }
            exports.name = 'quantileSeq';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load, typed) {
                var sqrt = load(__webpack_require__(56));
                var variance = load(__webpack_require__(146));
                var std = typed('std', {
                    'Array | Matrix': _std,
                    'Array | Matrix, string': _std,
                    '...': function (args) {
                        return _std(args);
                    }
                });
                std.toTex = undefined;
                return std;
                function _std(array, normalization) {
                    if (array.length == 0) {
                        throw new SyntaxError('Function std requires one or more parameters (0 provided)');
                    }
                    return sqrt(variance.apply(null, arguments));
                }
            }
            exports.name = 'std';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            module.exports = [
                __webpack_require__(98),
                __webpack_require__(515)
            ];
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var isString = __webpack_require__(9).isString;
            var format = __webpack_require__(9).format;
            function factory(type, config, load, typed) {
                var print = typed('print', {
                    'string, Object': _print,
                    'string, Object, number | Object': _print
                });
                print.toTex = undefined;
                return print;
            }
            function _print(template, values, options) {
                return template.replace(/\$([\w\.]+)/g, function (original, key) {
                    var keys = key.split('.');
                    var value = values[keys.shift()];
                    while (keys.length && value !== undefined) {
                        var k = keys.shift();
                        value = k ? value[k] : value + '.';
                    }
                    if (value !== undefined) {
                        if (!isString(value)) {
                            return format(value, options);
                        }
                        else {
                            return value;
                        }
                    }
                    return original;
                });
            }
            exports.name = 'print';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            module.exports = [
                __webpack_require__(517),
                __webpack_require__(147),
                __webpack_require__(518),
                __webpack_require__(519),
                __webpack_require__(520),
                __webpack_require__(521),
                __webpack_require__(522),
                __webpack_require__(523),
                __webpack_require__(524),
                __webpack_require__(525),
                __webpack_require__(526),
                __webpack_require__(527),
                __webpack_require__(528),
                __webpack_require__(529),
                __webpack_require__(530),
                __webpack_require__(531),
                __webpack_require__(532),
                __webpack_require__(533),
                __webpack_require__(534),
                __webpack_require__(535),
                __webpack_require__(536),
                __webpack_require__(537),
                __webpack_require__(538),
                __webpack_require__(539),
                __webpack_require__(540)
            ];
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            function factory(type, config, load, typed) {
                var acos = typed('acos', {
                    'number': function (x) {
                        if ((x >= -1 && x <= 1) || config.predictable) {
                            return Math.acos(x);
                        }
                        else {
                            return new type.Complex(x, 0).acos();
                        }
                    },
                    'Complex': function (x) {
                        return x.acos();
                    },
                    'BigNumber': function (x) {
                        return x.acos();
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, acos);
                    }
                });
                acos.toTex = { 1: '\\cos^{-1}\\left(${args[0]}\\right)' };
                return acos;
            }
            exports.name = 'acos';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            function factory(type, config, load, typed) {
                var acot = typed('acot', {
                    'number': function (x) {
                        return Math.atan(1 / x);
                    },
                    'Complex': function (x) {
                        return x.acot();
                    },
                    'BigNumber': function (x) {
                        return new type.BigNumber(1).div(x).atan();
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, acot);
                    }
                });
                acot.toTex = { 1: '\\cot^{-1}\\left(${args[0]}\\right)' };
                return acot;
            }
            exports.name = 'acot';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            function factory(type, config, load, typed) {
                var acoth = typed('acoth', {
                    'number': function (x) {
                        if (x >= 1 || x <= -1 || config.predictable) {
                            return isFinite(x) ? (Math.log((x + 1) / x) + Math.log(x / (x - 1))) / 2 : 0;
                        }
                        return new type.Complex(x, 0).acoth();
                    },
                    'Complex': function (x) {
                        return x.acoth();
                    },
                    'BigNumber': function (x) {
                        return new type.BigNumber(1).div(x).atanh();
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, acoth);
                    }
                });
                acoth.toTex = { 1: '\\coth^{-1}\\left(${args[0]}\\right)' };
                return acoth;
            }
            exports.name = 'acoth';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            function factory(type, config, load, typed) {
                var acsc = typed('acsc', {
                    'number': function (x) {
                        if (x <= -1 || x >= 1 || config.predictable) {
                            return Math.asin(1 / x);
                        }
                        return new type.Complex(x, 0).acsc();
                    },
                    'Complex': function (x) {
                        return x.acsc();
                    },
                    'BigNumber': function (x) {
                        return new type.BigNumber(1).div(x).asin();
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, acsc);
                    }
                });
                acsc.toTex = { 1: '\\csc^{-1}\\left(${args[0]}\\right)' };
                return acsc;
            }
            exports.name = 'acsc';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            function factory(type, config, load, typed) {
                var acsch = typed('acsch', {
                    'number': function (x) {
                        x = 1 / x;
                        return Math.log(x + Math.sqrt(x * x + 1));
                    },
                    'Complex': function (x) {
                        return x.acsch();
                    },
                    'BigNumber': function (x) {
                        return new type.BigNumber(1).div(x).asinh();
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, acsch);
                    }
                });
                acsch.toTex = { 1: '\\mathrm{csch}^{-1}\\left(${args[0]}\\right)' };
                return acsch;
            }
            exports.name = 'acsch';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            function factory(type, config, load, typed) {
                var asec = typed('asec', {
                    'number': function (x) {
                        if (x <= -1 || x >= 1 || config.predictable) {
                            return Math.acos(1 / x);
                        }
                        return new type.Complex(x, 0).asec();
                    },
                    'Complex': function (x) {
                        return x.asec();
                    },
                    'BigNumber': function (x) {
                        return new type.BigNumber(1).div(x).acos();
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, asec);
                    }
                });
                asec.toTex = { 1: '\\sec^{-1}\\left(${args[0]}\\right)' };
                return asec;
            }
            exports.name = 'asec';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            function factory(type, config, load, typed) {
                var acosh = typed.find(load(__webpack_require__(147)), ['Complex']);
                var asech = typed('asech', {
                    'number': function (x) {
                        if ((x <= 1 && x >= -1) || config.predictable) {
                            x = 1 / x;
                            var ret = Math.sqrt(x * x - 1);
                            if (x > 0 || config.predictable) {
                                return Math.log(ret + x);
                            }
                            return new type.Complex(Math.log(ret - x), Math.PI);
                        }
                        return new type.Complex(x, 0).asech();
                    },
                    'Complex': function (x) {
                        return x.asech();
                    },
                    'BigNumber': function (x) {
                        return new type.BigNumber(1).div(x).acosh();
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, asech);
                    }
                });
                asech.toTex = { 1: '\\mathrm{sech}^{-1}\\left(${args[0]}\\right)' };
                return asech;
            }
            exports.name = 'asech';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            function factory(type, config, load, typed) {
                var asin = typed('asin', {
                    'number': function (x) {
                        if ((x >= -1 && x <= 1) || config.predictable) {
                            return Math.asin(x);
                        }
                        else {
                            return new type.Complex(x, 0).asin();
                        }
                    },
                    'Complex': function (x) {
                        return x.asin();
                    },
                    'BigNumber': function (x) {
                        return x.asin();
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, asin, true);
                    }
                });
                asin.toTex = { 1: '\\sin^{-1}\\left(${args[0]}\\right)' };
                return asin;
            }
            exports.name = 'asin';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            function factory(type, config, load, typed) {
                var asinh = typed('asinh', {
                    'number': Math.asinh || function (x) {
                        return Math.log(Math.sqrt(x * x + 1) + x);
                    },
                    'Complex': function (x) {
                        return x.asinh();
                    },
                    'BigNumber': function (x) {
                        return x.asinh();
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, asinh, true);
                    }
                });
                asinh.toTex = { 1: '\\sinh^{-1}\\left(${args[0]}\\right)' };
                return asinh;
            }
            exports.name = 'asinh';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            function factory(type, config, load, typed) {
                var atan = typed('atan', {
                    'number': function (x) {
                        return Math.atan(x);
                    },
                    'Complex': function (x) {
                        return x.atan();
                    },
                    'BigNumber': function (x) {
                        return x.atan();
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, atan, true);
                    }
                });
                atan.toTex = { 1: '\\tan^{-1}\\left(${args[0]}\\right)' };
                return atan;
            }
            exports.name = 'atan';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load, typed) {
                var matrix = load(__webpack_require__(0));
                var algorithm02 = load(__webpack_require__(24));
                var algorithm03 = load(__webpack_require__(15));
                var algorithm09 = load(__webpack_require__(133));
                var algorithm11 = load(__webpack_require__(17));
                var algorithm12 = load(__webpack_require__(16));
                var algorithm13 = load(__webpack_require__(8));
                var algorithm14 = load(__webpack_require__(6));
                var atan2 = typed('atan2', {
                    'number, number': Math.atan2,
                    'BigNumber, BigNumber': function (y, x) {
                        return type.BigNumber.atan2(y, x);
                    },
                    'Matrix, Matrix': function (x, y) {
                        var c;
                        switch (x.storage()) {
                            case 'sparse':
                                switch (y.storage()) {
                                    case 'sparse':
                                        c = algorithm09(x, y, atan2, false);
                                        break;
                                    default:
                                        c = algorithm02(y, x, atan2, true);
                                        break;
                                }
                                break;
                            default:
                                switch (y.storage()) {
                                    case 'sparse':
                                        c = algorithm03(x, y, atan2, false);
                                        break;
                                    default:
                                        c = algorithm13(x, y, atan2);
                                        break;
                                }
                                break;
                        }
                        return c;
                    },
                    'Array, Array': function (x, y) {
                        return atan2(matrix(x), matrix(y)).valueOf();
                    },
                    'Array, Matrix': function (x, y) {
                        return atan2(matrix(x), y);
                    },
                    'Matrix, Array': function (x, y) {
                        return atan2(x, matrix(y));
                    },
                    'Matrix, number | BigNumber': function (x, y) {
                        var c;
                        switch (x.storage()) {
                            case 'sparse':
                                c = algorithm11(x, y, atan2, false);
                                break;
                            default:
                                c = algorithm14(x, y, atan2, false);
                                break;
                        }
                        return c;
                    },
                    'number | BigNumber, Matrix': function (x, y) {
                        var c;
                        switch (y.storage()) {
                            case 'sparse':
                                c = algorithm12(y, x, atan2, true);
                                break;
                            default:
                                c = algorithm14(y, x, atan2, true);
                                break;
                        }
                        return c;
                    },
                    'Array, number | BigNumber': function (x, y) {
                        return algorithm14(matrix(x), y, atan2, false).valueOf();
                    },
                    'number | BigNumber, Array': function (x, y) {
                        return algorithm14(matrix(y), x, atan2, true).valueOf();
                    }
                });
                atan2.toTex = { 2: '\\mathrm{atan2}\\left(${args}\\right)' };
                return atan2;
            }
            exports.name = 'atan2';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            function factory(type, config, load, typed) {
                var atanh = typed('atanh', {
                    'number': function (x) {
                        if ((x <= 1 && x >= -1) || config.predictable) {
                            return _atanh(x);
                        }
                        return new type.Complex(x, 0).atanh();
                    },
                    'Complex': function (x) {
                        return x.atanh();
                    },
                    'BigNumber': function (x) {
                        return x.atanh();
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, atanh, true);
                    }
                });
                atanh.toTex = { 1: '\\tanh^{-1}\\left(${args[0]}\\right)' };
                return atanh;
            }
            var _atanh = Math.atanh || function (x) {
                return Math.log((1 + x) / (1 - x)) / 2;
            };
            exports.name = 'atanh';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            function factory(type, config, load, typed) {
                var cos = typed('cos', {
                    'number': Math.cos,
                    'Complex': function (x) {
                        return x.cos();
                    },
                    'BigNumber': function (x) {
                        return x.cos();
                    },
                    'Unit': function (x) {
                        if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
                            throw new TypeError('Unit in function cos is no angle');
                        }
                        return cos(x.value);
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, cos);
                    }
                });
                cos.toTex = { 1: '\\cos\\left(${args[0]}\\right)' };
                return cos;
            }
            exports.name = 'cos';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            function factory(type, config, load, typed) {
                var cosh = typed('cosh', {
                    'number': _cosh,
                    'Complex': function (x) {
                        return x.cosh();
                    },
                    'BigNumber': function (x) {
                        return x.cosh();
                    },
                    'Unit': function (x) {
                        if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
                            throw new TypeError('Unit in function cosh is no angle');
                        }
                        return cosh(x.value);
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, cosh);
                    }
                });
                cosh.toTex = { 1: '\\cosh\\left(${args[0]}\\right)' };
                return cosh;
            }
            var _cosh = Math.cosh || function (x) {
                return (Math.exp(x) + Math.exp(-x)) / 2;
            };
            exports.name = 'cosh';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            function factory(type, config, load, typed) {
                var cot = typed('cot', {
                    'number': function (x) {
                        return 1 / Math.tan(x);
                    },
                    'Complex': function (x) {
                        return x.cot();
                    },
                    'BigNumber': function (x) {
                        return new type.BigNumber(1).div(x.tan());
                    },
                    'Unit': function (x) {
                        if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
                            throw new TypeError('Unit in function cot is no angle');
                        }
                        return cot(x.value);
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, cot);
                    }
                });
                cot.toTex = { 1: '\\cot\\left(${args[0]}\\right)' };
                return cot;
            }
            exports.name = 'cot';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            function factory(type, config, load, typed) {
                var coth = typed('coth', {
                    'number': _coth,
                    'Complex': function (x) {
                        return x.coth();
                    },
                    'BigNumber': function (x) {
                        return new type.BigNumber(1).div(x.tanh());
                    },
                    'Unit': function (x) {
                        if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
                            throw new TypeError('Unit in function coth is no angle');
                        }
                        return coth(x.value);
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, coth);
                    }
                });
                coth.toTex = { 1: '\\coth\\left(${args[0]}\\right)' };
                return coth;
            }
            function _coth(x) {
                var e = Math.exp(2 * x);
                return (e + 1) / (e - 1);
            }
            exports.name = 'coth';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            function factory(type, config, load, typed) {
                var csc = typed('csc', {
                    'number': function (x) {
                        return 1 / Math.sin(x);
                    },
                    'Complex': function (x) {
                        return x.csc();
                    },
                    'BigNumber': function (x) {
                        return new type.BigNumber(1).div(x.sin());
                    },
                    'Unit': function (x) {
                        if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
                            throw new TypeError('Unit in function csc is no angle');
                        }
                        return csc(x.value);
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, csc);
                    }
                });
                csc.toTex = { 1: '\\csc\\left(${args[0]}\\right)' };
                return csc;
            }
            exports.name = 'csc';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            var sign = __webpack_require__(3).sign;
            function factory(type, config, load, typed) {
                var csch = typed('csch', {
                    'number': _csch,
                    'Complex': function (x) {
                        return x.csch();
                    },
                    'BigNumber': function (x) {
                        return new type.BigNumber(1).div(x.sinh());
                    },
                    'Unit': function (x) {
                        if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
                            throw new TypeError('Unit in function csch is no angle');
                        }
                        return csch(x.value);
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, csch);
                    }
                });
                csch.toTex = { 1: '\\mathrm{csch}\\left(${args[0]}\\right)' };
                return csch;
            }
            function _csch(x) {
                if (x == 0) {
                    return Number.POSITIVE_INFINITY;
                }
                else {
                    return Math.abs(2 / (Math.exp(x) - Math.exp(-x))) * sign(x);
                }
            }
            exports.name = 'csch';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            function factory(type, config, load, typed) {
                var sec = typed('sec', {
                    'number': function (x) {
                        return 1 / Math.cos(x);
                    },
                    'Complex': function (x) {
                        return x.sec();
                    },
                    'BigNumber': function (x) {
                        return new type.BigNumber(1).div(x.cos());
                    },
                    'Unit': function (x) {
                        if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
                            throw new TypeError('Unit in function sec is no angle');
                        }
                        return sec(x.value);
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, sec);
                    }
                });
                sec.toTex = { 1: '\\sec\\left(${args[0]}\\right)' };
                return sec;
            }
            exports.name = 'sec';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            function factory(type, config, load, typed) {
                var sech = typed('sech', {
                    'number': _sech,
                    'Complex': function (x) {
                        return x.sech();
                    },
                    'BigNumber': function (x) {
                        return new type.BigNumber(1).div(x.cosh());
                    },
                    'Unit': function (x) {
                        if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
                            throw new TypeError('Unit in function sech is no angle');
                        }
                        return sech(x.value);
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, sech);
                    }
                });
                sech.toTex = { 1: '\\mathrm{sech}\\left(${args[0]}\\right)' };
                return sech;
            }
            function _sech(x) {
                return 2 / (Math.exp(x) + Math.exp(-x));
            }
            exports.name = 'sech';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            function factory(type, config, load, typed) {
                var sin = typed('sin', {
                    'number': Math.sin,
                    'Complex': function (x) {
                        return x.sin();
                    },
                    'BigNumber': function (x) {
                        return x.sin();
                    },
                    'Unit': function (x) {
                        if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
                            throw new TypeError('Unit in function sin is no angle');
                        }
                        return sin(x.value);
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, sin, true);
                    }
                });
                sin.toTex = { 1: '\\sin\\left(${args[0]}\\right)' };
                return sin;
            }
            exports.name = 'sin';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            function factory(type, config, load, typed) {
                var sinh = typed('sinh', {
                    'number': _sinh,
                    'Complex': function (x) {
                        return x.sinh();
                    },
                    'BigNumber': function (x) {
                        return x.sinh();
                    },
                    'Unit': function (x) {
                        if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
                            throw new TypeError('Unit in function sinh is no angle');
                        }
                        return sinh(x.value);
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, sinh, true);
                    }
                });
                sinh.toTex = { 1: '\\sinh\\left(${args[0]}\\right)' };
                return sinh;
            }
            var _sinh = Math.sinh || function (x) {
                return (Math.exp(x) - Math.exp(-x)) / 2;
            };
            exports.name = 'sinh';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            function factory(type, config, load, typed) {
                var tan = typed('tan', {
                    'number': Math.tan,
                    'Complex': function (x) {
                        return x.tan();
                    },
                    'BigNumber': function (x) {
                        return x.tan();
                    },
                    'Unit': function (x) {
                        if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
                            throw new TypeError('Unit in function tan is no angle');
                        }
                        return tan(x.value);
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, tan, true);
                    }
                });
                tan.toTex = { 1: '\\tan\\left(${args[0]}\\right)' };
                return tan;
            }
            exports.name = 'tan';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            function factory(type, config, load, typed) {
                var tanh = typed('tanh', {
                    'number': _tanh,
                    'Complex': function (x) {
                        return x.tanh();
                    },
                    'BigNumber': function (x) {
                        return x.tanh();
                    },
                    'Unit': function (x) {
                        if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
                            throw new TypeError('Unit in function tanh is no angle');
                        }
                        return tanh(x.value);
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, tanh, true);
                    }
                });
                tanh.toTex = { 1: '\\tanh\\left(${args[0]}\\right)' };
                return tanh;
            }
            var _tanh = Math.tanh || function (x) {
                var e = Math.exp(2 * x);
                return (e - 1) / (e + 1);
            };
            exports.name = 'tanh';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            module.exports = [
                __webpack_require__(542)
            ];
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load, typed) {
                var latex = __webpack_require__(4);
                var matrix = load(__webpack_require__(0));
                var algorithm13 = load(__webpack_require__(8));
                var algorithm14 = load(__webpack_require__(6));
                var to = typed('to', {
                    'Unit, Unit | string': function (x, unit) {
                        return x.to(unit);
                    },
                    'Matrix, Matrix': function (x, y) {
                        return algorithm13(x, y, to);
                    },
                    'Array, Array': function (x, y) {
                        return to(matrix(x), matrix(y)).valueOf();
                    },
                    'Array, Matrix': function (x, y) {
                        return to(matrix(x), y);
                    },
                    'Matrix, Array': function (x, y) {
                        return to(x, matrix(y));
                    },
                    'Matrix, any': function (x, y) {
                        return algorithm14(x, y, to, false);
                    },
                    'any, Matrix': function (x, y) {
                        return algorithm14(y, x, to, true);
                    },
                    'Array, any': function (x, y) {
                        return algorithm14(matrix(x), y, to, false).valueOf();
                    },
                    'any, Array': function (x, y) {
                        return algorithm14(matrix(y), x, to, true).valueOf();
                    }
                });
                to.toTex = {
                    2: '\\left(${args[0]}' + latex.operators['to'] + '${args[1]}\\right)'
                };
                return to;
            }
            exports.name = 'to';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            module.exports = [
                __webpack_require__(120),
                __webpack_require__(48),
                __webpack_require__(57),
                __webpack_require__(75),
                __webpack_require__(55),
                __webpack_require__(544),
                __webpack_require__(82),
                __webpack_require__(545),
                __webpack_require__(76)
            ];
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            function factory(type, config, load, typed) {
                var isPrime = typed('isPrime', {
                    'number': function (x) {
                        if (x < 2) {
                            return false;
                        }
                        if (x == 2) {
                            return true;
                        }
                        if (x % 2 == 0) {
                            return false;
                        }
                        for (var i = 3; i * i <= x; i += 2) {
                            if (x % i == 0) {
                                return false;
                            }
                        }
                        return true;
                    },
                    'BigNumber': function (x) {
                        if (x.lt(2)) {
                            return false;
                        }
                        if (x.equals(2)) {
                            return true;
                        }
                        if (x.mod(2).isZero()) {
                            return false;
                        }
                        for (var i = type.BigNumber(3); i.times(i).lte(x); i = i.plus(1)) {
                            if (x.mod(i).isZero()) {
                                return false;
                            }
                        }
                        return true;
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, isPrime);
                    }
                });
                return isPrime;
            }
            exports.name = 'isPrime';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var deepMap = __webpack_require__(1);
            var number = __webpack_require__(3);
            function factory(type, config, load, typed) {
                var isNaN = typed('isNaN', {
                    'number': function (x) {
                        return Number.isNaN(x);
                    },
                    'BigNumber': function (x) {
                        return x.isNaN();
                    },
                    'Fraction': function (x) {
                        return false;
                    },
                    'Complex': function (x) {
                        return x.isNaN();
                    },
                    'Unit': function (x) {
                        return Number.isNaN(x.value);
                    },
                    'Array | Matrix': function (x) {
                        return deepMap(x, Number.isNaN);
                    }
                });
                return isNaN;
            }
            exports.name = 'isNaN';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            module.exports = [
                __webpack_require__(547)
            ];
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            function factory(type, config, load, typed) {
                return function reviver(key, value) {
                    var constructor = type[value && value.mathjs];
                    if (constructor && typeof constructor.fromJSON === 'function') {
                        return constructor.fromJSON(value);
                    }
                    return value;
                };
            }
            exports.name = 'reviver';
            exports.path = 'json';
            exports.factory = factory;
        }),
        (function (module, exports, __webpack_require__) {
            "use strict";
            var ArgumentsError = __webpack_require__(50);
            var DimensionError = __webpack_require__(10);
            var IndexError = __webpack_require__(51);
            module.exports = [
                {
                    name: 'ArgumentsError', path: 'error',
                    factory: function () {
                        return ArgumentsError;
                    }
                },
                {
                    name: 'DimensionError',
                    path: 'error',
                    factory: function () {
                        return DimensionError;
                    }
                },
                {
                    name: 'IndexError',
                    path: 'error',
                    factory: function () {
                        return IndexError;
                    }
                }
            ];
        })
    ]);
});
define("ControllerMock", ["require", "exports", "math/math"], function (require, exports, math) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ControllerMock = (function () {
        function ControllerMock() {
        }
        ControllerMock.steering = function (sensors) {
            var threshold = 0.1;
            var thresholdN = -0.1;
            var fl = sensors[0];
            var fr = sensors[1];
            var slf = sensors[2];
            var slb = sensors[3];
            var srf = sensors[4];
            var srb = sensors[5];
            var comp1 = (((fl - fr) > threshold) && ((slf - slb) > threshold)) && ((srb - srf) > threshold);
            var comp2 = (((fl - fr) < thresholdN) && ((slf - slb) < thresholdN)) && ((srb - srf) < thresholdN);
            var comp3 = (slf < slb) && (srf < srb);
            var resComp3;
            if (comp3) {
                resComp3 = math.unit('-1 deg');
            }
            else {
                resComp3 = math.unit('0 deg');
            }
            var resComp2;
            if (comp2) {
                resComp2 = math.unit('5 deg');
            }
            else {
                resComp2 = resComp3;
            }
            var steering;
            if (comp1) {
                steering = math.unit('-5 deg');
            }
            else {
                steering = resComp2;
            }
            return steering;
        };
        ControllerMock.acceleration = function (time) {
            var cond = time < math.unit('1 s');
            var acceleration;
            if (cond) {
                acceleration = math.unit('0 m/s^2');
            }
            else {
                acceleration = math.unit('1 m/s^2');
            }
            return acceleration;
        };
        ControllerMock.gameOverTrigger = function (x, y, time) {
            var aboveBnd = x > 200;
            var belowBnd = x < -200;
            var rightBnd = y > 120;
            var leftBnd = y < -50;
            var xloc = x < 1 && x > -1;
            var yloc = y < 15 && y > -15;
            var tloc = time.value > 3;
            var finishCircle = xloc && yloc && tloc;
            return aboveBnd || belowBnd || rightBnd || leftBnd || finishCircle;
        };
        return ControllerMock;
    }());
    exports.ControllerMock = ControllerMock;
});
define("CoordHelper", ["require", "exports", "math/math"], function (require, exports, math) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var CoordHelper = (function () {
        function CoordHelper() {
        }
        CoordHelper.getIntersectionLine = function (p1, p2, s, d) {
            var scalar = (p1[0] * (p2[1] - p1[1]) - p1[1] * (p2[0] - p1[0]) - s[0] * (p2[1] - p1[1]) + s[1] * (p2[0] - p1[0])) /
                (d[0] * (p2[1] - p1[1]) - d[1] * (p2[0] - p1[0]));
            var intersection = math.add(s, math.multiply(d, scalar));
            return intersection;
        };
        CoordHelper.getDistanceLine = function (p1, p2, s, r) {
            try {
                var intersection = CoordHelper.getIntersectionLine(p1, p2, s, r);
                var distance = math.distance(intersection, s);
                return distance;
            }
            catch (_a) {
                return Number.MAX_VALUE;
            }
        };
        CoordHelper.getIntersectionCirclePlus = function (sensor, direction, middlePoint, radius, plus) {
            var plusValue = plus ? 1.0 : -1.0;
            var a = direction[0];
            var b = direction[1];
            var m = middlePoint[0];
            var n = middlePoint[1];
            var x = sensor[0];
            var y = sensor[1];
            var as = Math.pow(a, 2) + Math.pow(b, 2);
            var xm = Math.pow(x - m, 2) + Math.pow(y - n, 2) - Math.pow(radius, 2);
            var za = Math.pow(2 * a * (x - m) + 2 * b * (y - n), 2);
            var zaq = 2 * Math.pow(a, 2) + 2 * Math.pow(b, 2);
            var sqrtValue = -4 * as * xm + za;
            if (sqrtValue < 0 && sqrtValue >= -0.0001) {
                sqrtValue = 0;
            }
            var sqrt = plusValue * Math.sqrt(sqrtValue);
            var scalar = -1 * (sqrt + 2 * a * (x - m) + 2 * b * (y - n)) / zaq;
            return math.add(sensor, math.multiply(direction, scalar));
        };
        CoordHelper.getIntersectionCircle = function (s, d, m, radius) {
            var result = new Array();
            var pointLower = CoordHelper.getIntersectionCirclePlus(s, d, m, radius, false);
            var pointUpper = CoordHelper.getIntersectionCirclePlus(s, d, m, radius, true);
            result.push(pointUpper);
            result.push(pointLower);
            return result;
        };
        CoordHelper.getDistanceCircle = function (s, d, m, radius, plus) {
            try {
                var intersection = CoordHelper.getIntersectionCirclePlus(s, d, m, radius, plus);
                var distance = math.distance(math.matrix(intersection), math.matrix(s));
                return distance;
            }
            catch (_a) {
                return Number.MAX_VALUE;
            }
        };
        return CoordHelper;
    }());
    exports.CoordHelper = CoordHelper;
});
define("coord/Orientation", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Orientation;
    (function (Orientation) {
        Orientation[Orientation["FRONT_LEFT"] = 0] = "FRONT_LEFT";
        Orientation[Orientation["FRONT_RIGHT"] = 1] = "FRONT_RIGHT";
        Orientation[Orientation["FRONT_LEFT_SIDE"] = 2] = "FRONT_LEFT_SIDE";
        Orientation[Orientation["FRONT_RIGHT_SIDE"] = 3] = "FRONT_RIGHT_SIDE";
        Orientation[Orientation["BACK_LEFT"] = 4] = "BACK_LEFT";
        Orientation[Orientation["BACK_RIGHT"] = 5] = "BACK_RIGHT";
        Orientation[Orientation["BACK_LEFT_SIDE"] = 6] = "BACK_LEFT_SIDE";
        Orientation[Orientation["BACK_RIGHT_SIDE"] = 7] = "BACK_RIGHT_SIDE";
    })(Orientation || (Orientation = {}));
    exports.Orientation = Orientation;
});
define("coord/Rotation", ["require", "exports", "math/math"], function (require, exports, math) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Rotation = (function () {
        function Rotation() {
        }
        Rotation.getMatrix = function (degree) {
            var rotationMatrix = [[math.cos(degree), math.sin(degree)],
                [-math.sin(degree), math.cos(degree)]];
            return rotationMatrix;
        };
        return Rotation;
    }());
    exports.Rotation = Rotation;
});
define("track/Wall", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Wall = (function () {
        function Wall() {
        }
        Wall.prototype.inBoundaries = function (pointLeft, point, pointRight) {
            var xMin = Math.min(pointLeft[1], pointRight[1]) - 2.1;
            var xMax = Math.max(pointLeft[1], pointRight[1]) + 2.1;
            var yMin = Math.min(pointLeft[0], pointRight[0]) - 2.1;
            var yMax = Math.max(pointLeft[0], pointRight[0]) + 2.1;
            var inHeight = yMin <= point[0] && point[0] <= yMax;
            var inWidth = xMin <= point[1] && point[1] <= xMax;
            return inHeight && inWidth;
        };
        return Wall;
    }());
    exports.Wall = Wall;
});
define("track/WallCurved", ["require", "exports", "track/Wall"], function (require, exports, Wall_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var WallCurved = (function (_super) {
        __extends(WallCurved, _super);
        function WallCurved(pointMiddle, radius, pointLower, pointUpper) {
            var _this = _super.call(this) || this;
            _this.setPointMiddle(pointMiddle);
            _this.setRadius(radius);
            _this.setPointLower(pointLower);
            _this.setPointUpper(pointUpper);
            return _this;
        }
        WallCurved.prototype.inBoundaries = function (point) {
            return _super.prototype.inBoundaries.call(this, this.pointLower, point, this.pointUpper);
        };
        WallCurved.prototype.setPointMiddle = function (point) {
            this.pointMiddle = point;
            return this;
        };
        WallCurved.prototype.setPointUpper = function (point) {
            this.pointUpper = point;
            return this;
        };
        WallCurved.prototype.setPointLower = function (point) {
            this.pointLower = point;
            return this;
        };
        WallCurved.prototype.setRadius = function (radius) {
            this.radius = radius;
            return this;
        };
        return WallCurved;
    }(Wall_1.Wall));
    exports.WallCurved = WallCurved;
});
define("track/WallLinear", ["require", "exports", "track/Wall"], function (require, exports, Wall_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var WallLinear = (function (_super) {
        __extends(WallLinear, _super);
        function WallLinear(pointLeft, pointRight) {
            var _this = _super.call(this) || this;
            _this.setPointLeft(pointLeft);
            _this.setPointRight(pointRight);
            return _this;
        }
        WallLinear.prototype.inBoundaries = function (point) {
            return _super.prototype.inBoundaries.call(this, this.pointLeft, point, this.pointRight);
        };
        WallLinear.prototype.setPointLeft = function (point) {
            this.pointLeft = point;
            return this;
        };
        WallLinear.prototype.setPointRight = function (point) {
            this.pointRight = point;
            return this;
        };
        return WallLinear;
    }(Wall_2.Wall));
    exports.WallLinear = WallLinear;
});
define("track/Track", ["require", "exports", "track/WallCurved", "track/WallLinear"], function (require, exports, WallCurved_1, WallLinear_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Track = (function () {
        function Track() {
            this.walls = new Array();
            this.walls.push(new WallLinear_1.WallLinear([58, -9.5], [-122, -9.5]));
            this.walls.push(new WallLinear_1.WallLinear([58, 10], [-122, 10]));
            this.walls.push(new WallLinear_1.WallLinear([109, -36], [58, -9.5]));
            this.walls.push(new WallLinear_1.WallLinear([114, -18], [58, 10]));
            this.walls.push(new WallCurved_1.WallCurved([123, 22], 60, [184, 22], [109, -36]));
            this.walls.push(new WallCurved_1.WallCurved([123, 22], 41, [164, 22], [114, -18]));
            this.walls.push(new WallCurved_1.WallCurved([123, 22], 60, [137.6, 79], [184, 22]));
            this.walls.push(new WallCurved_1.WallCurved([123, 22], 41, [133, 60.6], [164, 22]));
            this.walls.push(new WallLinear_1.WallLinear([137.6, 79], [108, 83.5]));
            this.walls.push(new WallLinear_1.WallLinear([133, 60.6], [98.5, 65.8]));
            this.walls.push(new WallLinear_1.WallLinear([108, 83.5], [59, 110]));
            this.walls.push(new WallLinear_1.WallLinear([98.5, 65.8], [58, 90]));
            this.walls.push(new WallLinear_1.WallLinear([59, 110], [-121, 110]));
            this.walls.push(new WallLinear_1.WallLinear([58, 90], [-122, 90.8]));
            this.walls.push(new WallCurved_1.WallCurved([-123, 51.3], 61, [-121, 110], [-183, 51.3]));
            this.walls.push(new WallCurved_1.WallCurved([-123, 51.3], 41, [-123, 90.8], [-164, 51.3]));
            this.walls.push(new WallCurved_1.WallCurved([-123, 51.3], 61, [-183, 51.3], [-122, -9.5]));
            this.walls.push(new WallCurved_1.WallCurved([-123, 51.3], 41, [-164, 51.3], [-122, 10]));
        }
        Track.prototype.addRectangularObject = function (centralPoint, width, hight) {
            var point1 = [(centralPoint[1] + hight / 2), (centralPoint[0] - width / 2)];
            var point2 = [(centralPoint[1] - hight / 2), (centralPoint[0] - width / 2)];
            var point3 = [(centralPoint[1] + hight / 2), (centralPoint[0] + width / 2)];
            var point4 = [(centralPoint[1] - hight / 2), (centralPoint[0] + width / 2)];
            this.walls.push(new WallLinear_1.WallLinear(point1, point2));
            this.walls.push(new WallLinear_1.WallLinear(point2, point4));
            this.walls.push(new WallLinear_1.WallLinear(point4, point3));
            this.walls.push(new WallLinear_1.WallLinear(point3, point1));
            console.log("Added the object:", point1, point2, point3, point4);
        };
        return Track;
    }());
    exports.Track = Track;
});
define("car/Sensor", ["require", "exports", "coord/Rotation", "track/WallCurved", "track/WallLinear", "CoordHelper", "math/math"], function (require, exports, Rotation_1, WallCurved_2, WallLinear_2, CoordHelper_1, math) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Sensor = (function () {
        function Sensor(offset, direction) {
            this.offset = offset;
            this.direction = direction;
        }
        Sensor.prototype.getDirection = function (car) {
            var rotationMatrix = Rotation_1.Rotation.getMatrix(car.getDegree());
            return math.multiply(rotationMatrix, this.direction);
        };
        Sensor.prototype.getPosition = function (car) {
            var rotationMatrix = Rotation_1.Rotation.getMatrix(car.getDegree());
            var position = car.getPosition();
            var offset = math.subtract(math.add(position, this.offset), position);
            var rotatedOffset = math.multiply(rotationMatrix, offset);
            return math.add(rotatedOffset, position);
        };
        Sensor.prototype.getIntersections = function (wall, car) {
            if (wall instanceof WallLinear_2.WallLinear) {
                var result = new Array();
                try {
                    var position = this.getPosition(car);
                    var direction = this.getDirection(car);
                    var intersection = CoordHelper_1.CoordHelper.getIntersectionLine(wall.pointLeft, wall.pointRight, position, direction);
                    if (wall.inBoundaries(intersection)) {
                        result.push(intersection);
                    }
                    return result;
                }
                catch (_a) {
                    return [[0, 0], [0, 0]];
                }
            }
            else if (wall instanceof WallCurved_2.WallCurved) {
                var result = new Array();
                try {
                    var position = this.getPosition(car);
                    var direction = this.getDirection(car);
                    var intersections = CoordHelper_1.CoordHelper.getIntersectionCircle(position, direction, wall.pointMiddle, wall.radius);
                    for (var _i = 0, intersections_1 = intersections; _i < intersections_1.length; _i++) {
                        var intersection = intersections_1[_i];
                        if (wall.inBoundaries(intersection)) {
                            result.push(intersection);
                        }
                    }
                    return result;
                }
                catch (_b) {
                    return [[0, 0], [0, 0]];
                }
            }
        };
        Sensor.prototype.getParameters = function (wall, car) {
            var parameters = new Array();
            var intersections = this.getIntersections(wall, car);
            for (var _i = 0, intersections_2 = intersections; _i < intersections_2.length; _i++) {
                var intersection = intersections_2[_i];
                var position = this.getPosition(car);
                var direction = this.getDirection(car);
                var scalar = (direction[0] < 0.0001 && direction[0] > -0.0001) ?
                    (intersection[1] - position[1]) / direction[1] :
                    (intersection[0] - position[0]) / direction[0];
                parameters.push(scalar);
            }
            return parameters;
        };
        Sensor.prototype.getDistances = function (wall, car) {
            var distances = new Array();
            var intersections = this.getIntersections(wall, car);
            for (var _i = 0, intersections_3 = intersections; _i < intersections_3.length; _i++) {
                var intersection = intersections_3[_i];
                var distance = math.distance(this.getPosition(car), intersection);
                distances.push(distance);
            }
            return distances;
        };
        Sensor.prototype.getAllDistances = function (walls, car) {
            var allDistances = new Array();
            var wallIndex = 0;
            for (var _i = 0, walls_1 = walls; _i < walls_1.length; _i++) {
                var wall = walls_1[_i];
                wallIndex++;
                var parameters = this.getParameters(wall, car);
                var distances = this.getDistances(wall, car);
                for (var i = 0; i < parameters.length; i++) {
                    var parameter = parameters[i];
                    if (parameter >= 0) {
                        var distance = distances[i];
                        allDistances.push(distance);
                    }
                }
            }
            return allDistances;
        };
        Sensor.prototype.getMinDistance = function (walls, car) {
            var distances = this.getAllDistances(walls, car);
            var minDistance = Number.MAX_VALUE;
            for (var _i = 0, distances_1 = distances; _i < distances_1.length; _i++) {
                var distance = distances_1[_i];
                minDistance = Math.min(minDistance, distance);
            }
            return minDistance;
        };
        return Sensor;
    }());
    exports.Sensor = Sensor;
});
define("car/Car", ["require", "exports", "coord/Orientation", "car/Sensor", "math/math"], function (require, exports, Orientation_1, Sensor_1, math) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Car = (function () {
        function Car(x, y) {
            this.sensors = new Array();
            this.doInitSensorFrontLeft();
            this.doInitSensorFrontLeftSide();
            this.doInitSensorFrontRight();
            this.doInitSensorFrontRightSide();
            this.doInitSensorBackLeft();
            this.doInitSensorBackLeftSide();
            this.doInitSensorBackRight();
            this.doInitSensorBackRightSide();
            this.position = [x, y];
            this.degree = math.unit('0 deg');
        }
        Car.prototype.setPosition = function (position) {
            this.position = position;
        };
        Car.prototype.getPosition = function () {
            return this.position;
        };
        Car.prototype.setDegree = function (degree) {
            this.degree = degree;
        };
        Car.prototype.getDegree = function () {
            return this.degree;
        };
        Car.prototype.getSensor = function (orientation) {
            switch (+orientation) {
                case Orientation_1.Orientation.FRONT_LEFT: return this.sensors[0];
                case Orientation_1.Orientation.FRONT_LEFT_SIDE: return this.sensors[1];
                case Orientation_1.Orientation.FRONT_RIGHT: return this.sensors[2];
                case Orientation_1.Orientation.FRONT_RIGHT_SIDE: return this.sensors[3];
                case Orientation_1.Orientation.BACK_LEFT: return this.sensors[4];
                case Orientation_1.Orientation.BACK_LEFT_SIDE: return this.sensors[5];
                case Orientation_1.Orientation.BACK_RIGHT: return this.sensors[6];
                case Orientation_1.Orientation.BACK_RIGHT_SIDE: return this.sensors[7];
            }
        };
        Car.prototype.doInitSensorFrontLeft = function () {
            var direction = [1, 0];
            var offset = [4.15, 1.85];
            this.sensors.push(new Sensor_1.Sensor(offset, direction));
        };
        Car.prototype.doInitSensorFrontLeftSide = function () {
            var direction = [0, 1];
            var offset = [4.15, 1.85];
            this.sensors.push(new Sensor_1.Sensor(offset, direction));
        };
        Car.prototype.doInitSensorFrontRight = function () {
            var direction = [1, 0];
            var offset = [4.15, -1.85];
            this.sensors.push(new Sensor_1.Sensor(offset, direction));
        };
        Car.prototype.doInitSensorFrontRightSide = function () {
            var direction = [0, -1];
            var offset = [4.15, -1.85];
            this.sensors.push(new Sensor_1.Sensor(offset, direction));
        };
        Car.prototype.doInitSensorBackLeft = function () {
            var direction = [-1, 0];
            var offset = [-4.15, 1.85];
            this.sensors.push(new Sensor_1.Sensor(offset, direction));
        };
        Car.prototype.doInitSensorBackLeftSide = function () {
            var direction = [0, 1];
            var offset = [-4.15, 1.85];
            this.sensors.push(new Sensor_1.Sensor(offset, direction));
        };
        Car.prototype.doInitSensorBackRight = function () {
            var direction = [-1, 0];
            var offset = [-4.15, -1.85];
            this.sensors.push(new Sensor_1.Sensor(offset, direction));
        };
        Car.prototype.doInitSensorBackRightSide = function () {
            var direction = [0, -1];
            var offset = [-4.15, -1.85];
            this.sensors.push(new Sensor_1.Sensor(offset, direction));
        };
        Car.prototype.getDistancesFromSensors = function (track) {
            return [
                this.getSensor(Orientation_1.Orientation.FRONT_LEFT).getMinDistance(track.walls, this),
                this.getSensor(Orientation_1.Orientation.FRONT_RIGHT).getMinDistance(track.walls, this),
                this.getSensor(Orientation_1.Orientation.FRONT_LEFT_SIDE).getMinDistance(track.walls, this),
                this.getSensor(Orientation_1.Orientation.BACK_LEFT_SIDE).getMinDistance(track.walls, this),
                this.getSensor(Orientation_1.Orientation.FRONT_RIGHT_SIDE).getMinDistance(track.walls, this),
                this.getSensor(Orientation_1.Orientation.BACK_RIGHT_SIDE).getMinDistance(track.walls, this),
                this.getSensor(Orientation_1.Orientation.BACK_LEFT).getMinDistance(track.walls, this),
                this.getSensor(Orientation_1.Orientation.BACK_RIGHT).getMinDistance(track.walls, this)
            ];
        };
        return Car;
    }());
    exports.Car = Car;
});
define("Sinput", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Sinput = (function () {
        function Sinput(acceleration, steering, x0, y0, t0, doorStatus, indicatorStatus, lightTimerStatus, triggerStatus) {
            this.acceleration = acceleration;
            this.steering = steering;
            this.x0 = x0;
            this.y0 = y0;
            this.t0 = t0;
            this.doorStatus = doorStatus;
            this.indicatorStatus = indicatorStatus;
            this.lightTimerStatus = lightTimerStatus;
            this.triggerStatus = triggerStatus;
        }
        return Sinput;
    }());
    exports.Sinput = Sinput;
});
define("Soutput", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Soutput = (function () {
        function Soutput(velocity, xi, yi, ti, degree, doorStatus, indicatorStatus, lightTimerStatus, triggerStatus) {
            this.velocity = velocity;
            this.xi = xi;
            this.yi = yi;
            this.ti = ti;
            this.degree = degree;
            this.doorStatus = doorStatus;
            this.indicatorStatus = indicatorStatus;
            this.lightTimerStatus = lightTimerStatus;
            this.triggerStatus = triggerStatus;
        }
        return Soutput;
    }());
    exports.Soutput = Soutput;
});
define("Simulator", ["require", "exports", "math/math", "car/Car", "Sinput", "Soutput", "track/Track"], function (require, exports, math, Car_1, Sinput_1, Soutput_1, Track_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Simulator = (function () {
        function Simulator() {
            this.velocity = math.unit('0 m/s');
            this.time = math.unit('0 sec');
            this.samplingTime = math.unit('0.3 sec');
            this.car = new Car_1.Car(0, 0);
            this.track = new Track_1.Track();
            this.output = new Soutput_1.Soutput(math.unit('0 m/s'), math.unit('0 m'), math.unit('0 m'), math.unit('0 s'), math.unit('0 deg'), false, false, false, false);
            this.input = new Sinput_1.Sinput(math.unit('0 m/s^2'), math.unit('0 deg'), math.unit('0 m'), math.unit('0 m'), math.unit('0 s'), false, false, false, false);
            this.calculate();
        }
        Simulator.prototype.resetSimulation = function () {
            this.output.velocity = math.unit('0 m/s');
            this.output.xi = math.unit('0 m');
            this.output.yi = math.unit('0 m');
            this.output.ti = math.unit('0 s');
            this.output.degree = math.unit('0 deg');
            this.output.triggerStatus = false;
            this.time = math.unit('0 s');
            this.velocity = math.unit('0 m/s');
            this.car.setPosition([0, 0]);
            this.car.setDegree(math.unit('0 deg'));
            console.log("Simulator is reseted");
        };
        Simulator.prototype.addObjectOnTrack = function (centralPoint, width, hight) {
            this.track.addRectangularObject(centralPoint, width, hight);
        };
        Simulator.prototype.calculate = function () {
            this.time = math.add(this.time, this.samplingTime);
            this.velocity = math.add(this.velocity, math.multiply(this.input.acceleration, this.samplingTime));
            var degree = this.normalizeDegrees(math.add(this.car.getDegree(), this.input.steering));
            var x = math.add(this.input.x0, math.multiply(this.velocity, math.multiply(this.samplingTime, math.cos(degree))));
            var y = math.subtract(this.input.y0, math.multiply(this.velocity, math.multiply(this.samplingTime, math.sin(degree))));
            this.output.velocity = this.velocity;
            this.output.xi = x;
            this.output.yi = y;
            this.output.ti = this.time;
            this.output.degree = degree;
            this.output.doorStatus = this.input.doorStatus;
            this.output.indicatorStatus = this.input.indicatorStatus;
            this.output.lightTimerStatus = this.input.lightTimerStatus;
        };
        Simulator.prototype.getDistances = function () {
            var distances = this.car.getDistancesFromSensors(this.track);
            return distances;
        };
        Simulator.prototype.initPosition = function (x, y) {
            this.output.xi = math.unit(x, 'm');
            this.output.yi = math.unit(y, 'm');
            ;
        };
        Simulator.prototype.run = function (status, steering, acceleration) {
            this.output.triggerStatus = status;
            this.car.setPosition([this.output.xi.value, this.output.yi.value]);
            this.car.setDegree(this.output.degree);
            this.input.acceleration = math.unit(acceleration, "m/s^2");
            this.input.steering = math.unit(steering, 'deg');
            this.input.x0 = this.output.xi;
            this.input.y0 = this.output.yi;
            this.input.t0 = this.output.ti;
            this.input.doorStatus = false;
            this.input.indicatorStatus = false;
            this.input.lightTimerStatus = false;
            this.calculate();
            return this.output.triggerStatus;
        };
        Simulator.prototype.normalizeDegrees = function (degree) {
            if (Math.abs(degree.value * 180 / Math.PI) > 360) {
                return math.unit((degree.value % 360), 'deg');
            }
            else
                return degree;
        };
        return Simulator;
    }());
    exports.Simulator = Simulator;
});
//# sourceMappingURL=bundle.js.map